/* This file was generated by SableCC (http://www.sablecc.org/). */

package nisse.node;

import java.util.*;
import nisse.analysis.*;

@SuppressWarnings("nls")
public final class ABlockBlocks extends PBlocks
{
    private PBeginblock _beginblock_;
    private final LinkedList<PLines> _lines_ = new LinkedList<PLines>();
    private PEndblock _endblock_;

    public ABlockBlocks()
    {
        // Constructor
    }

    public ABlockBlocks(
        @SuppressWarnings("hiding") PBeginblock _beginblock_,
        @SuppressWarnings("hiding") List<PLines> _lines_,
        @SuppressWarnings("hiding") PEndblock _endblock_)
    {
        // Constructor
        setBeginblock(_beginblock_);

        setLines(_lines_);

        setEndblock(_endblock_);

    }

    @Override
    public Object clone()
    {
        return new ABlockBlocks(
            cloneNode(this._beginblock_),
            cloneList(this._lines_),
            cloneNode(this._endblock_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlockBlocks(this);
    }

    public PBeginblock getBeginblock()
    {
        return this._beginblock_;
    }

    public void setBeginblock(PBeginblock node)
    {
        if(this._beginblock_ != null)
        {
            this._beginblock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._beginblock_ = node;
    }

    public LinkedList<PLines> getLines()
    {
        return this._lines_;
    }

    public void setLines(List<PLines> list)
    {
        this._lines_.clear();
        this._lines_.addAll(list);
        for(PLines e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PEndblock getEndblock()
    {
        return this._endblock_;
    }

    public void setEndblock(PEndblock node)
    {
        if(this._endblock_ != null)
        {
            this._endblock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endblock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._beginblock_)
            + toString(this._lines_)
            + toString(this._endblock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._beginblock_ == child)
        {
            this._beginblock_ = null;
            return;
        }

        if(this._lines_.remove(child))
        {
            return;
        }

        if(this._endblock_ == child)
        {
            this._endblock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._beginblock_ == oldChild)
        {
            setBeginblock((PBeginblock) newChild);
            return;
        }

        for(ListIterator<PLines> i = this._lines_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLines) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endblock_ == oldChild)
        {
            setEndblock((PEndblock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
