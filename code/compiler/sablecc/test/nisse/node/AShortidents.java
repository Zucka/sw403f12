/* This file was generated by SableCC (http://www.sablecc.org/). */

package nisse.node;

import java.util.*;
import nisse.analysis.*;

@SuppressWarnings("nls")
public final class AShortidents extends PShortidents
{
    private final LinkedList<PShortident> _shortident_ = new LinkedList<PShortident>();
    private TPipe _pipe_;

    public AShortidents()
    {
        // Constructor
    }

    public AShortidents(
        @SuppressWarnings("hiding") List<PShortident> _shortident_,
        @SuppressWarnings("hiding") TPipe _pipe_)
    {
        // Constructor
        setShortident(_shortident_);

        setPipe(_pipe_);

    }

    @Override
    public Object clone()
    {
        return new AShortidents(
            cloneList(this._shortident_),
            cloneNode(this._pipe_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAShortidents(this);
    }

    public LinkedList<PShortident> getShortident()
    {
        return this._shortident_;
    }

    public void setShortident(List<PShortident> list)
    {
        this._shortident_.clear();
        this._shortident_.addAll(list);
        for(PShortident e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TPipe getPipe()
    {
        return this._pipe_;
    }

    public void setPipe(TPipe node)
    {
        if(this._pipe_ != null)
        {
            this._pipe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pipe_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._shortident_)
            + toString(this._pipe_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._shortident_.remove(child))
        {
            return;
        }

        if(this._pipe_ == child)
        {
            this._pipe_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PShortident> i = this._shortident_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PShortident) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._pipe_ == oldChild)
        {
            setPipe((TPipe) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
