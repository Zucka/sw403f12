/* This file was generated by SableCC (http://www.sablecc.org/). */

package nisse.node;

import java.util.*;
import nisse.analysis.*;

@SuppressWarnings("nls")
public final class ABeblockv1 extends PBeblockv1
{
    private TPipe _pipe_;
    private final LinkedList<TSpace> _first_ = new LinkedList<TSpace>();
    private TChar _char_;
    private final LinkedList<TSpace> _second_ = new LinkedList<TSpace>();

    public ABeblockv1()
    {
        // Constructor
    }

    public ABeblockv1(
        @SuppressWarnings("hiding") TPipe _pipe_,
        @SuppressWarnings("hiding") List<TSpace> _first_,
        @SuppressWarnings("hiding") TChar _char_,
        @SuppressWarnings("hiding") List<TSpace> _second_)
    {
        // Constructor
        setPipe(_pipe_);

        setFirst(_first_);

        setChar(_char_);

        setSecond(_second_);

    }

    @Override
    public Object clone()
    {
        return new ABeblockv1(
            cloneNode(this._pipe_),
            cloneList(this._first_),
            cloneNode(this._char_),
            cloneList(this._second_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABeblockv1(this);
    }

    public TPipe getPipe()
    {
        return this._pipe_;
    }

    public void setPipe(TPipe node)
    {
        if(this._pipe_ != null)
        {
            this._pipe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pipe_ = node;
    }

    public LinkedList<TSpace> getFirst()
    {
        return this._first_;
    }

    public void setFirst(List<TSpace> list)
    {
        this._first_.clear();
        this._first_.addAll(list);
        for(TSpace e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TChar getChar()
    {
        return this._char_;
    }

    public void setChar(TChar node)
    {
        if(this._char_ != null)
        {
            this._char_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._char_ = node;
    }

    public LinkedList<TSpace> getSecond()
    {
        return this._second_;
    }

    public void setSecond(List<TSpace> list)
    {
        this._second_.clear();
        this._second_.addAll(list);
        for(TSpace e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pipe_)
            + toString(this._first_)
            + toString(this._char_)
            + toString(this._second_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pipe_ == child)
        {
            this._pipe_ = null;
            return;
        }

        if(this._first_.remove(child))
        {
            return;
        }

        if(this._char_ == child)
        {
            this._char_ = null;
            return;
        }

        if(this._second_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pipe_ == oldChild)
        {
            setPipe((TPipe) newChild);
            return;
        }

        for(ListIterator<TSpace> i = this._first_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSpace) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._char_ == oldChild)
        {
            setChar((TChar) newChild);
            return;
        }

        for(ListIterator<TSpace> i = this._second_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSpace) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
