/* This file was generated by SableCC (http://www.sablecc.org/). */

package nisse.node;

import java.util.*;
import nisse.analysis.*;

@SuppressWarnings("nls")
public final class AShortident extends PShortident
{
    private PKwd _kwd_;
    private final LinkedList<TSpace> _space_ = new LinkedList<TSpace>();
    private TColon _colon_;
    private final LinkedList<TSpace> _first_ = new LinkedList<TSpace>();
    private PShortidentv1 _shortidentv1_;

    public AShortident()
    {
        // Constructor
    }

    public AShortident(
        @SuppressWarnings("hiding") PKwd _kwd_,
        @SuppressWarnings("hiding") List<TSpace> _space_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") List<TSpace> _first_,
        @SuppressWarnings("hiding") PShortidentv1 _shortidentv1_)
    {
        // Constructor
        setKwd(_kwd_);

        setSpace(_space_);

        setColon(_colon_);

        setFirst(_first_);

        setShortidentv1(_shortidentv1_);

    }

    @Override
    public Object clone()
    {
        return new AShortident(
            cloneNode(this._kwd_),
            cloneList(this._space_),
            cloneNode(this._colon_),
            cloneList(this._first_),
            cloneNode(this._shortidentv1_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAShortident(this);
    }

    public PKwd getKwd()
    {
        return this._kwd_;
    }

    public void setKwd(PKwd node)
    {
        if(this._kwd_ != null)
        {
            this._kwd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwd_ = node;
    }

    public LinkedList<TSpace> getSpace()
    {
        return this._space_;
    }

    public void setSpace(List<TSpace> list)
    {
        this._space_.clear();
        this._space_.addAll(list);
        for(TSpace e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public LinkedList<TSpace> getFirst()
    {
        return this._first_;
    }

    public void setFirst(List<TSpace> list)
    {
        this._first_.clear();
        this._first_.addAll(list);
        for(TSpace e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PShortidentv1 getShortidentv1()
    {
        return this._shortidentv1_;
    }

    public void setShortidentv1(PShortidentv1 node)
    {
        if(this._shortidentv1_ != null)
        {
            this._shortidentv1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shortidentv1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwd_)
            + toString(this._space_)
            + toString(this._colon_)
            + toString(this._first_)
            + toString(this._shortidentv1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwd_ == child)
        {
            this._kwd_ = null;
            return;
        }

        if(this._space_.remove(child))
        {
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._first_.remove(child))
        {
            return;
        }

        if(this._shortidentv1_ == child)
        {
            this._shortidentv1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwd_ == oldChild)
        {
            setKwd((PKwd) newChild);
            return;
        }

        for(ListIterator<TSpace> i = this._space_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSpace) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        for(ListIterator<TSpace> i = this._first_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSpace) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._shortidentv1_ == oldChild)
        {
            setShortidentv1((PShortidentv1) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
