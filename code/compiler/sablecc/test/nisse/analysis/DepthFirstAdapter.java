/* This file was generated by SableCC (http://www.sablecc.org/). */

package nisse.analysis;

import java.util.*;
import nisse.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPNisse().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inANisse(ANisse node)
    {
        defaultIn(node);
    }

    public void outANisse(ANisse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANisse(ANisse node)
    {
        inANisse(node);
        {
            List<PBlocks> copy = new ArrayList<PBlocks>(node.getBlocks());
            for(PBlocks e : copy)
            {
                e.apply(this);
            }
        }
        outANisse(node);
    }

    public void inABlockBlocks(ABlockBlocks node)
    {
        defaultIn(node);
    }

    public void outABlockBlocks(ABlockBlocks node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockBlocks(ABlockBlocks node)
    {
        inABlockBlocks(node);
        if(node.getBeginblock() != null)
        {
            node.getBeginblock().apply(this);
        }
        {
            List<PLines> copy = new ArrayList<PLines>(node.getLines());
            for(PLines e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEndblock() != null)
        {
            node.getEndblock().apply(this);
        }
        outABlockBlocks(node);
    }

    public void inASettingBlocks(ASettingBlocks node)
    {
        defaultIn(node);
    }

    public void outASettingBlocks(ASettingBlocks node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASettingBlocks(ASettingBlocks node)
    {
        inASettingBlocks(node);
        if(node.getSettingblock() != null)
        {
            node.getSettingblock().apply(this);
        }
        outASettingBlocks(node);
    }

    public void inASettingLines(ASettingLines node)
    {
        defaultIn(node);
    }

    public void outASettingLines(ASettingLines node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASettingLines(ASettingLines node)
    {
        inASettingLines(node);
        if(node.getSettingblock() != null)
        {
            node.getSettingblock().apply(this);
        }
        outASettingLines(node);
    }

    public void inANumerationLines(ANumerationLines node)
    {
        defaultIn(node);
    }

    public void outANumerationLines(ANumerationLines node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumerationLines(ANumerationLines node)
    {
        inANumerationLines(node);
        if(node.getNumeration() != null)
        {
            node.getNumeration().apply(this);
        }
        outANumerationLines(node);
    }

    public void inAItemlistLines(AItemlistLines node)
    {
        defaultIn(node);
    }

    public void outAItemlistLines(AItemlistLines node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAItemlistLines(AItemlistLines node)
    {
        inAItemlistLines(node);
        if(node.getItemlist() != null)
        {
            node.getItemlist().apply(this);
        }
        outAItemlistLines(node);
    }

    public void inAPlaintextLines(APlaintextLines node)
    {
        defaultIn(node);
    }

    public void outAPlaintextLines(APlaintextLines node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlaintextLines(APlaintextLines node)
    {
        inAPlaintextLines(node);
        if(node.getPlains() != null)
        {
            node.getPlains().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outAPlaintextLines(node);
    }

    public void inANumeration(ANumeration node)
    {
        defaultIn(node);
    }

    public void outANumeration(ANumeration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeration(ANumeration node)
    {
        inANumeration(node);
        if(node.getNlist() != null)
        {
            node.getNlist().apply(this);
        }
        if(node.getNumerationv1() != null)
        {
            node.getNumerationv1().apply(this);
        }
        outANumeration(node);
    }

    public void inAPlaintextNumerationv1(APlaintextNumerationv1 node)
    {
        defaultIn(node);
    }

    public void outAPlaintextNumerationv1(APlaintextNumerationv1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlaintextNumerationv1(APlaintextNumerationv1 node)
    {
        inAPlaintextNumerationv1(node);
        if(node.getPlains() != null)
        {
            node.getPlains().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outAPlaintextNumerationv1(node);
    }

    public void inANumerationNumerationv1(ANumerationNumerationv1 node)
    {
        defaultIn(node);
    }

    public void outANumerationNumerationv1(ANumerationNumerationv1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumerationNumerationv1(ANumerationNumerationv1 node)
    {
        inANumerationNumerationv1(node);
        if(node.getNumeration() != null)
        {
            node.getNumeration().apply(this);
        }
        outANumerationNumerationv1(node);
    }

    public void inAItemlist(AItemlist node)
    {
        defaultIn(node);
    }

    public void outAItemlist(AItemlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAItemlist(AItemlist node)
    {
        inAItemlist(node);
        if(node.getBlist() != null)
        {
            node.getBlist().apply(this);
        }
        if(node.getItemlistv1() != null)
        {
            node.getItemlistv1().apply(this);
        }
        outAItemlist(node);
    }

    public void inAPlaintextItemlistv1(APlaintextItemlistv1 node)
    {
        defaultIn(node);
    }

    public void outAPlaintextItemlistv1(APlaintextItemlistv1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlaintextItemlistv1(APlaintextItemlistv1 node)
    {
        inAPlaintextItemlistv1(node);
        if(node.getPlains() != null)
        {
            node.getPlains().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outAPlaintextItemlistv1(node);
    }

    public void inAItemlistItemlistv1(AItemlistItemlistv1 node)
    {
        defaultIn(node);
    }

    public void outAItemlistItemlistv1(AItemlistItemlistv1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAItemlistItemlistv1(AItemlistItemlistv1 node)
    {
        inAItemlistItemlistv1(node);
        if(node.getItemlist() != null)
        {
            node.getItemlist().apply(this);
        }
        outAItemlistItemlistv1(node);
    }

    public void inABeginblock(ABeginblock node)
    {
        defaultIn(node);
    }

    public void outABeginblock(ABeginblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABeginblock(ABeginblock node)
    {
        inABeginblock(node);
        if(node.getBeginkwd() != null)
        {
            node.getBeginkwd().apply(this);
        }
        if(node.getBeblock() != null)
        {
            node.getBeblock().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outABeginblock(node);
    }

    public void inAEndblock(AEndblock node)
    {
        defaultIn(node);
    }

    public void outAEndblock(AEndblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEndblock(AEndblock node)
    {
        inAEndblock(node);
        if(node.getEndkwd() != null)
        {
            node.getEndkwd().apply(this);
        }
        if(node.getBeblock() != null)
        {
            node.getBeblock().apply(this);
        }
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEol());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        outAEndblock(node);
    }

    public void inABeblock(ABeblock node)
    {
        defaultIn(node);
    }

    public void outABeblock(ABeblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABeblock(ABeblock node)
    {
        inABeblock(node);
        if(node.getLcurly() != null)
        {
            node.getLcurly().apply(this);
        }
        {
            List<TSpace> copy = new ArrayList<TSpace>(node.getFirst());
            for(TSpace e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        {
            List<TSpace> copy = new ArrayList<TSpace>(node.getSecond());
            for(TSpace e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBeblockv1() != null)
        {
            node.getBeblockv1().apply(this);
        }
        if(node.getRcurly() != null)
        {
            node.getRcurly().apply(this);
        }
        outABeblock(node);
    }

    public void inABeblockv1(ABeblockv1 node)
    {
        defaultIn(node);
    }

    public void outABeblockv1(ABeblockv1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABeblockv1(ABeblockv1 node)
    {
        inABeblockv1(node);
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        {
            List<TSpace> copy = new ArrayList<TSpace>(node.getFirst());
            for(TSpace e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        {
            List<TSpace> copy = new ArrayList<TSpace>(node.getSecond());
            for(TSpace e : copy)
            {
                e.apply(this);
            }
        }
        outABeblockv1(node);
    }

    public void inASettingblock(ASettingblock node)
    {
        defaultIn(node);
    }

    public void outASettingblock(ASettingblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASettingblock(ASettingblock node)
    {
        inASettingblock(node);
        if(node.getSettingkwd() != null)
        {
            node.getSettingkwd().apply(this);
        }
        if(node.getLcurly() != null)
        {
            node.getLcurly().apply(this);
        }
        if(node.getShortident() != null)
        {
            node.getShortident().apply(this);
        }
        {
            List<TSpace> copy = new ArrayList<TSpace>(node.getFirst());
            for(TSpace e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        {
            List<TSpace> copy = new ArrayList<TSpace>(node.getSecond());
            for(TSpace e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        {
            List<TSpace> copy = new ArrayList<TSpace>(node.getThird());
            for(TSpace e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRcurly() != null)
        {
            node.getRcurly().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outASettingblock(node);
    }

    public void inAPlains(APlains node)
    {
        defaultIn(node);
    }

    public void outAPlains(APlains node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlains(APlains node)
    {
        inAPlains(node);
        {
            List<PPlainsv1> copy = new ArrayList<PPlainsv1>(node.getPlainsv1());
            for(PPlainsv1 e : copy)
            {
                e.apply(this);
            }
        }
        outAPlains(node);
    }

    public void inAShortblockPlainsv1(AShortblockPlainsv1 node)
    {
        defaultIn(node);
    }

    public void outAShortblockPlainsv1(AShortblockPlainsv1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortblockPlainsv1(AShortblockPlainsv1 node)
    {
        inAShortblockPlainsv1(node);
        if(node.getShortblock() != null)
        {
            node.getShortblock().apply(this);
        }
        outAShortblockPlainsv1(node);
    }

    public void inACharallPlainsv1(ACharallPlainsv1 node)
    {
        defaultIn(node);
    }

    public void outACharallPlainsv1(ACharallPlainsv1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharallPlainsv1(ACharallPlainsv1 node)
    {
        inACharallPlainsv1(node);
        if(node.getCharall() != null)
        {
            node.getCharall().apply(this);
        }
        outACharallPlainsv1(node);
    }

    public void inAShortblock(AShortblock node)
    {
        defaultIn(node);
    }

    public void outAShortblock(AShortblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortblock(AShortblock node)
    {
        inAShortblock(node);
        if(node.getFormatKwd() != null)
        {
            node.getFormatKwd().apply(this);
        }
        if(node.getLcurly() != null)
        {
            node.getLcurly().apply(this);
        }
        if(node.getShortblockv1() != null)
        {
            node.getShortblockv1().apply(this);
        }
        if(node.getPlains() != null)
        {
            node.getPlains().apply(this);
        }
        if(node.getRcurly() != null)
        {
            node.getRcurly().apply(this);
        }
        outAShortblock(node);
    }

    public void inAShortblockv1(AShortblockv1 node)
    {
        defaultIn(node);
    }

    public void outAShortblockv1(AShortblockv1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortblockv1(AShortblockv1 node)
    {
        inAShortblockv1(node);
        if(node.getSpace() != null)
        {
            node.getSpace().apply(this);
        }
        if(node.getShortidents() != null)
        {
            node.getShortidents().apply(this);
        }
        outAShortblockv1(node);
    }

    public void inAShortidents(AShortidents node)
    {
        defaultIn(node);
    }

    public void outAShortidents(AShortidents node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortidents(AShortidents node)
    {
        inAShortidents(node);
        {
            List<PShortident> copy = new ArrayList<PShortident>(node.getShortident());
            for(PShortident e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPipe() != null)
        {
            node.getPipe().apply(this);
        }
        outAShortidents(node);
    }

    public void inAShortident(AShortident node)
    {
        defaultIn(node);
    }

    public void outAShortident(AShortident node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortident(AShortident node)
    {
        inAShortident(node);
        if(node.getKwd() != null)
        {
            node.getKwd().apply(this);
        }
        {
            List<TSpace> copy = new ArrayList<TSpace>(node.getSpace());
            for(TSpace e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        {
            List<TSpace> copy = new ArrayList<TSpace>(node.getFirst());
            for(TSpace e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getShortidentv1() != null)
        {
            node.getShortidentv1().apply(this);
        }
        outAShortident(node);
    }

    public void inACharShortidentv1(ACharShortidentv1 node)
    {
        defaultIn(node);
    }

    public void outACharShortidentv1(ACharShortidentv1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharShortidentv1(ACharShortidentv1 node)
    {
        inACharShortidentv1(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharShortidentv1(node);
    }

    public void inADigitShortidentv1(ADigitShortidentv1 node)
    {
        defaultIn(node);
    }

    public void outADigitShortidentv1(ADigitShortidentv1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADigitShortidentv1(ADigitShortidentv1 node)
    {
        inADigitShortidentv1(node);
        if(node.getDigit() != null)
        {
            node.getDigit().apply(this);
        }
        outADigitShortidentv1(node);
    }

    public void inAKwd(AKwd node)
    {
        defaultIn(node);
    }

    public void outAKwd(AKwd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKwd(AKwd node)
    {
        inAKwd(node);
        if(node.getAtsign() != null)
        {
            node.getAtsign().apply(this);
        }
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outAKwd(node);
    }

    public void inAColonCharall(AColonCharall node)
    {
        defaultIn(node);
    }

    public void outAColonCharall(AColonCharall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColonCharall(AColonCharall node)
    {
        inAColonCharall(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAColonCharall(node);
    }

    public void inADigitCharall(ADigitCharall node)
    {
        defaultIn(node);
    }

    public void outADigitCharall(ADigitCharall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADigitCharall(ADigitCharall node)
    {
        inADigitCharall(node);
        if(node.getDigit() != null)
        {
            node.getDigit().apply(this);
        }
        outADigitCharall(node);
    }

    public void inASemicolonCharall(ASemicolonCharall node)
    {
        defaultIn(node);
    }

    public void outASemicolonCharall(ASemicolonCharall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonCharall(ASemicolonCharall node)
    {
        inASemicolonCharall(node);
        if(node.getScolon() != null)
        {
            node.getScolon().apply(this);
        }
        outASemicolonCharall(node);
    }

    public void inAPercentCharall(APercentCharall node)
    {
        defaultIn(node);
    }

    public void outAPercentCharall(APercentCharall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentCharall(APercentCharall node)
    {
        inAPercentCharall(node);
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        outAPercentCharall(node);
    }

    public void inAForwardslashCharall(AForwardslashCharall node)
    {
        defaultIn(node);
    }

    public void outAForwardslashCharall(AForwardslashCharall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardslashCharall(AForwardslashCharall node)
    {
        inAForwardslashCharall(node);
        if(node.getFslash() != null)
        {
            node.getFslash().apply(this);
        }
        outAForwardslashCharall(node);
    }

    public void inABackslashCharall(ABackslashCharall node)
    {
        defaultIn(node);
    }

    public void outABackslashCharall(ABackslashCharall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABackslashCharall(ABackslashCharall node)
    {
        inABackslashCharall(node);
        if(node.getBslash() != null)
        {
            node.getBslash().apply(this);
        }
        outABackslashCharall(node);
    }

    public void inAMorecharCharall(AMorecharCharall node)
    {
        defaultIn(node);
    }

    public void outAMorecharCharall(AMorecharCharall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMorecharCharall(AMorecharCharall node)
    {
        inAMorecharCharall(node);
        if(node.getMorechar() != null)
        {
            node.getMorechar().apply(this);
        }
        outAMorecharCharall(node);
    }

    public void inACharCharall(ACharCharall node)
    {
        defaultIn(node);
    }

    public void outACharCharall(ACharCharall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharCharall(ACharCharall node)
    {
        inACharCharall(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharCharall(node);
    }

    public void inASpaceCharall(ASpaceCharall node)
    {
        defaultIn(node);
    }

    public void outASpaceCharall(ASpaceCharall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpaceCharall(ASpaceCharall node)
    {
        inASpaceCharall(node);
        if(node.getSpace() != null)
        {
            node.getSpace().apply(this);
        }
        outASpaceCharall(node);
    }
}
