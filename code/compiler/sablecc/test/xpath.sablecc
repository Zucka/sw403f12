Package com.interrupt.cc.xpath; 

 /* 
 author: Timothy Washington
 email twashing [at] gmail.com
 
 license: 
	Copyright (c) 2008, Tim Washington
	All rights reserved.
	
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
	
	    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	    * Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 
 -----------
 declare namespace xq='http://xmlbeans.apache.org/samples/xquery/employees'; 
 $this/xq:employees/xq:employee/xq:phone[contains(., '(206)')]

 ./child::node()[1]/attribute::name
	 *) Find value of the name attribute of the first element in the XMl document 
	 1) The first section is only a dot (.). A dot at the start of a query means you want to start your search from the beginning of the XMl document.
	 2) The second section (child::node()[1]) says: Find the first child element node. The combined effect of the first and second portions (./child::node()[1]) is like saying: Find the first element of this XMl document.
	 3) The third section (attribute::name) says: Find the value of an attribute name. The combined effect of the query is like saying: .

 ./child::node()[1]/child::service/child::port/child::soap:address/attribute::location
	 *) Find the first child node of the XMl document, then find a service child element within the first child, then find a port element inside the service element, then look inside the port element for an address element that belongs to the sOAP namespace and return the value of its location attribute. 

-----------


--> Expression tests
//system/bookkeeping
/system/bookkeeping
system/bookkeeping
./child::node()


--> forward axis 
descendant::node() 
attribute::attribute() 
./self::element() 
/descendant-or-self::element() 
//following-sibling::node() 
following::element() 
namespace::node() 


--> reverse axis 
parent::node() 
ancestor::node() 
preceding-sibling::node() 
preceding::node() 
ancestor-or-self::node() 


--> predicates 
./child::node()[ @asdf='' ]
./child::node()/child::service/child::port/child::soap:address/attribute::location
./child::node()[]/child::service/child::port/child::soap:address/attribute::location
./child::node()[ @name='tim' ] 
./child::node()[ 1 ]
./child::node()[ 12 ] 
./child::node()[ 1 ]/child::service/child::port/child::soap:address/attribute::location
/GPS/memory[text()=""]
/GPS/memory[text()="64MB"]


--> for 
for $i in (10, 20), $j in (1, 2) 
	return ( $i + $j )		Error: [1,6] expecting: letter, '_'
for $x in $z, $y in f($x) 
	return g($x, $y) 		Error: [1,6] expecting: letter, '_' 
[x] for $a in fn:distinct-values(book/author)
		return (book/author[. = $a][1], book[author = $a]/title)


--> if / then / else 
[x] if ($widget1/unit-cost < $widget2/unit-cost) 
		then $widget1 
		else $widget2 			Error: [1,18] expecting: ',', ')'

if ($x castable as hatsize) 
		then $x cast as hatsize
		else $x cast as tim


--> or / and 
1 eq 1 and 2 eq 2 
1 eq 2 and 3 idiv 0 = 1
1 eq 1 or 3 idiv 0 = 1


--> cast / castable 
[x] if ($x castable as hatsize) 	
		then $x cast as hatsize	Error: [1,6] expecting: letter, '_'


--> some / every 
every $part in /parts/part satisfies $part/@discounted
every $xart in (1, 2, 3), $yart in (2, 3, 4) 
	satisfies $xart + $yart = 4
some $xart in (1, 2, "cat") satisfies $x * 2 = 4		Error: [1,7] expecting: letter, '_'


--> intersect / except 
$seq1 intersect $seq2
$seq1 except $seq2


--> instanceof 
$p instance of xs:decimal			Error: [1,2] expecting: letter, '_'
5  instance of xs:integer
(5, 6) instance of xs:integer+


--> treat 
$myaddress treat as element(*, USAddress)


*/ 

 /** 
  * KNOWN ISSUES 
  * 
  * - with defining differences (ex: ncname) 
  * 
  */ 

Helpers
	
	basechar	=	[0x0041..0x005A] | [0x0061..0x007A] | [0x00C0..0x00D6] | 
					[0x00D8..0x00F6] | [0x00F8..0x00FF] | [0x0100..0x0131] | 
					[0x0134..0x013E] | [0x0141..0x0148] | [0x014A..0x017E] | 
					[0x0180..0x01C3] | [0x01CD..0x01F0] | [0x01F4..0x01F5] | 
					[0x01FA..0x0217] | [0x0250..0x02A8] | [0x02BB..0x02C1] | 
					0x0386 | [0x0388..0x038A] | 0x038C | [0x038E..0x03A1] | 
					[0x03A3..0x03CE] | [0x03D0..0x03D6] | 0x03DA | 0x03DC | 
					0x03DE | 0x03E0 | [0x03E2..0x03F3] | [0x0401..0x040C] | 
					[0x040E..0x044F] | [0x0451..0x045C] | [0x045E..0x0481] | 
					[0x0490..0x04C4] | [0x04C7..0x04C8] | [0x04CB..0x04CC] | 
					[0x04D0..0x04EB] | [0x04EE..0x04F5] | [0x04F8..0x04F9] | 
					[0x0531..0x0556] | 0x0559 | [0x0561..0x0586] | [0x05D0..0x05EA] | 
					[0x05F0..0x05F2] | [0x0621..0x063A] | [0x0641..0x064A] | 
					[0x0671..0x06B7] | [0x06BA..0x06BE] | [0x06C0..0x06CE] | 
					[0x06D0..0x06D3] | 0x06D5 | [0x06E5..0x06E6] | [0x0905..0x0939] | 
					0x093D | [0x0958..0x0961] | [0x0985..0x098C] | [0x098F..0x0990] | 
					[0x0993..0x09A8] | [0x09AA..0x09B0] | 0x09B2 | [0x09B6..0x09B9] | 
					[0x09DC..0x09DD] | [0x09DF..0x09E1] | [0x09F0..0x09F1] | 
					[0x0A05..0x0A0A] | [0x0A0F..0x0A10] | [0x0A13..0x0A28] | 
					[0x0A2A..0x0A30] | [0x0A32..0x0A33] | [0x0A35..0x0A36] | 
					[0x0A38..0x0A39] | [0x0A59..0x0A5C] | 0x0A5E | [0x0A72..0x0A74] | 
					[0x0A85..0x0A8B] | 0x0A8D | [0x0A8F..0x0A91] | [0x0A93..0x0AA8] | 
					[0x0AAA..0x0AB0] | [0x0AB2..0x0AB3] | [0x0AB5..0x0AB9] | 
					0x0ABD | 0x0AE0 | [0x0B05..0x0B0C] | [0x0B0F..0x0B10] | 
					[0x0B13..0x0B28] | [0x0B2A..0x0B30] | [0x0B32..0x0B33] | 
					[0x0B36..0x0B39] | 0x0B3D | [0x0B5C..0x0B5D] | [0x0B5F..0x0B61] | 
					[0x0B85..0x0B8A] | [0x0B8E..0x0B90] | [0x0B92..0x0B95] | 
					[0x0B99..0x0B9A] | 0x0B9C | [0x0B9E..0x0B9F] | [0x0BA3..0x0BA4] | 
					[0x0BA8..0x0BAA] | [0x0BAE..0x0BB5] | [0x0BB7..0x0BB9] | 
					[0x0C05..0x0C0C] | [0x0C0E..0x0C10] | [0x0C12..0x0C28] | 
					[0x0C2A..0x0C33] | [0x0C35..0x0C39] | [0x0C60..0x0C61] | 
					[0x0C85..0x0C8C] | [0x0C8E..0x0C90] | [0x0C92..0x0CA8] | 
					[0x0CAA..0x0CB3] | [0x0CB5..0x0CB9] | 0x0CDE | [0x0CE0..0x0CE1] | 
					[0x0D05..0x0D0C] | [0x0D0E..0x0D10] | [0x0D12..0x0D28] | 
					[0x0D2A..0x0D39] | [0x0D60..0x0D61] | [0x0E01..0x0E2E] | 0x0E30 | 
					[0x0E32..0x0E33] | [0x0E40..0x0E45] | [0x0E81..0x0E82] | 0x0E84 | 
					[0x0E87..0x0E88] | 0x0E8A | 0x0E8D | [0x0E94..0x0E97] | 
					[0x0E99..0x0E9F] | [0x0EA1..0x0EA3] | 0x0EA5 | 0x0EA7 | 
					[0x0EAA..0x0EAB] | [0x0EAD..0x0EAE] | 0x0EB0 | [0x0EB2..0x0EB3] | 
					0x0EBD | [0x0EC0..0x0EC4] | [0x0F40..0x0F47] | [0x0F49..0x0F69] | 
					[0x10A0..0x10C5] | [0x10D0..0x10F6] | 0x1100 | [0x1102..0x1103] | 
					[0x1105..0x1107] | 0x1109 | [0x110B..0x110C] | [0x110E..0x1112] | 
					0x113C | 0x113E | 0x1140 | 0x114C | 0x114E | 0x1150 | 
					[0x1154..0x1155] | 0x1159 | [0x115F..0x1161] | 0x1163 | 
					0x1165 | 0x1167 | 0x1169 | [0x116D..0x116E] | [0x1172..0x1173] | 
					0x1175 | 0x119E | 0x11A8 | 0x11AB | [0x11AE..0x11AF] | 
					[0x11B7..0x11B8] | 0x11BA | [0x11BC..0x11C2] | 0x11EB | 
					0x11F0 | 0x11F9 | [0x1E00..0x1E9B] | [0x1EA0..0x1EF9] | 
					[0x1F00..0x1F15] | [0x1F18..0x1F1D] | [0x1F20..0x1F45] | 
					[0x1F48..0x1F4D] | [0x1F50..0x1F57] | 0x1F59 | 0x1F5B | 
					0x1F5D | [0x1F5F..0x1F7D] | [0x1F80..0x1FB4] | [0x1FB6..0x1FBC] | 
					0x1FBE | [0x1FC2..0x1FC4] | [0x1FC6..0x1FCC] | [0x1FD0..0x1FD3] | 
					[0x1FD6..0x1FDB] | [0x1FE0..0x1FEC] | [0x1FF2..0x1FF4] | 
					[0x1FF6..0x1FFC] | 0x2126 | [0x212A..0x212B] | 0x212E | 
					[0x2180..0x2182] | [0x3041..0x3094] | [0x30A1..0x30FA] | 
					[0x3105..0x312C] | [0xAC00..0xD7A3]; 
	
	ideographic		=	[0x4E00..0x9FA5] | 0x3007 | [0x3021..0x3029]; 
	
	
	combiningchar	=	[0x0300..0x0345] | [0x0360..0x0361] | [0x0483..0x0486] | 
						[0x0591..0x05A1] | [0x05A3..0x05B9] | [0x05BB..0x05BD] | 
						0x05BF | [0x05C1..0x05C2] | 0x05C4 | [0x064B..0x0652] | 
						0x0670 | [0x06D6..0x06DC] | [0x06DD..0x06DF] | [0x06E0..0x06E4] | 
						[0x06E7..0x06E8] | [0x06EA..0x06ED] | [0x0901..0x0903] | 
						0x093C | [0x093E..0x094C] | 0x094D | [0x0951..0x0954] | 
						[0x0962..0x0963] | [0x0981..0x0983] | 0x09BC | 0x09BE | 
						0x09BF | [0x09C0..0x09C4] | [0x09C7..0x09C8] | [0x09CB..0x09CD] | 
						0x09D7 | [0x09E2..0x09E3] | 0x0A02 | 0x0A3C | 0x0A3E | 
						0x0A3F | [0x0A40..0x0A42] | [0x0A47..0x0A48] | [0x0A4B..0x0A4D] | 
						[0x0A70..0x0A71] | [0x0A81..0x0A83] | 0x0ABC | [0x0ABE..0x0AC5] | 
						[0x0AC7..0x0AC9] | [0x0ACB..0x0ACD] | [0x0B01..0x0B03] | 
						0x0B3C | [0x0B3E..0x0B43] | [0x0B47..0x0B48] | [0x0B4B..0x0B4D] | 
						[0x0B56..0x0B57] | [0x0B82..0x0B83] | [0x0BBE..0x0BC2] | 
						[0x0BC6..0x0BC8] | [0x0BCA..0x0BCD] | 0x0BD7 | [0x0C01..0x0C03] | 
						[0x0C3E..0x0C44] | [0x0C46..0x0C48] | [0x0C4A..0x0C4D] | 
						[0x0C55..0x0C56] | [0x0C82..0x0C83] | [0x0CBE..0x0CC4] | 
						[0x0CC6..0x0CC8] | [0x0CCA..0x0CCD] | [0x0CD5..0x0CD6] | 
						[0x0D02..0x0D03] | [0x0D3E..0x0D43] | [0x0D46..0x0D48] | 
						[0x0D4A..0x0D4D] | 0x0D57 | 0x0E31 | [0x0E34..0x0E3A] | 
						[0x0E47..0x0E4E] | 0x0EB1 | [0x0EB4..0x0EB9] | [0x0EBB..0x0EBC] | 
						[0x0EC8..0x0ECD] | [0x0F18..0x0F19] | 0x0F35 | 0x0F37 | 
						0x0F39 | 0x0F3E | 0x0F3F | [0x0F71..0x0F84] | [0x0F86..0x0F8B] | 
						[0x0F90..0x0F95] | 0x0F97 | [0x0F99..0x0FAD] | [0x0FB1..0x0FB7] | 
						0x0FB9 | [0x20D0..0x20DC] | 0x20E1 | [0x302A..0x302F] | 
						0x3099 | 0x309A; 
	
	digit 	= 	[ '0' .. '9' ]; 
	
	extender	=	0x00B7 | 0x02D0 | 0x02D1 | 0x0387 | 0x0640 | 0x0E46 | 
					0x0EC6 | 0x3005 | [0x3031..0x3035] | [0x309D..0x309E] | 
					[0x30FC..0x30FE]; 
	
	
	/** 
	 * XML names and characters taken (for reference) from these sources 
	 * 
	 * http://www.w3.org/TR/REC-xml-names/#NT-QName
	 * http://www.w3.org/TR/REC-xml-names/#NT-NCName 
	 * http://www.w3.org/TR/REC-xml/#NT-NameChar 
	 * http://www.w3.org/TR/REC-xml/#NT-Letter 
	 */ 
	
	letter_helper	   =	basechar | 
							ideographic; 
	
	namechar	=	letter_helper | digit | '.' | '-' | '_' | ':' | combiningchar | extender; 
	
	name		=   (letter_helper | '_' | ':') (namechar)*; 
	
	names	   	=   name (0x20 name)*; 
	
	nmtoken	   	=   (namechar)+; 
	
	nmtokens	=   nmtoken (0x20 nmtoken)*; 
	
	char = 0x9 | 0xA | 0xD | [0x20-0xD7FF] | [0xE000-0xFFFD] | [0x10000-0x10FFFF]; 
	
	escapequot 	   =    	'""'; 
	
	doubleliteral_helper	=   (('.' digit) | 
								(digit ('.' [0-9]*)?)) ('e' | 'E') ('+' | '-')? digit; 
	stringliteral_helper 	=   ( 0x22 (namechar)* 0x22 ) | (''' (namechar)* '''); 
	
	
	tab = 9;
	cr = 13;
	lf = 10;
	eol = cr lf | cr | lf;	// This takes care of different platforms		
	
	
Tokens
	
	keyword_return = 	'return';
	keyword_for = 		'for';
	keyword_in = 		'in';
	keyword_if = 		'if';
	keyword_is = 		'is'; 
	keyword_satisfies = 'satisfies';
	keyword_then = 		'then';
	keyword_else = 		'else';
	keyword_or = 		'or';
	keyword_and = 		'and';
	keyword_to = 		'to';	
	keyword_div = 		'div';
	keyword_idiv = 		'idiv';
	keyword_mod = 		'mod';
	keyword_union = 	'union';
	keyword_intersect = 'intersect';
	keyword_except = 	'except';
	keyword_instance = 	'instance';
	keyword_of = 		'of';
	keyword_treat = 	'treat';
	keyword_as = 		'as';
	keyword_castable = 	'castable';
	keyword_cast = 		'cast';
	keyword_some =		'some';
	keyword_every = 	'every'; 
	
	comma = 	',';
	dollar = 	'$';
	question = 	'?';
	
	lparenth = 	'(';
	rparenth = 	')';
	lbracket = 	'[';
	rbracket = 	']';
	plus2 = 	'+';
	plus = 		'+';
	minus = 	'-';
	minus2 = 	'-';
	star2 =		'*';
	star = 		'*';
	union = 	'|';
	equals = 	'=';
	
	ne_abbrev = 	'!=';
	lt_abbrev = 	'<';
	le_abbrev = 	'<=';
	gt_abbrev = 	'>';
	ge_abbrev = 	'>=';
	eq = 			'eq';
	ne =			'ne';
	lt = 				'lt';
	le = 				'le';
	gt = 				'gt';
	ge = 				'ge';
	is = 				'is';
	ncomp_precedes = 	'<<';
	ncomp_follows = 	'>>';
	axis_delim = 		'::';
	colon = 		':';
	
	abbrev_root = 		'/';
	abbrev_root_desc = 	'//';
	abbrev_attrib = 		'@';
	abbrev_reversestep = 	'..';
	abbrev_context = 		'.';
	
	
	/**
	 * Axes 
	 */
	
	//forward axis
	axis_child = 'child';
	axis_descendant = 'descendant'; 
	axis_attribute = 'attribute'; 
	axis_self = 'self'; 
	axis_descendant_or_self = 'descendant-or-self'; 
	axis_following_sibling = 'following-sibling'; 
	axis_following = 'following'; 
	axis_namespace = 'namespace'; 
	
	// reverse axis 
	axis_parent = 'parent'; 
	axis_ancestor = 'ancestor'; 
	axis_preceding_sibling = 'preceding-sibling'; 
	axis_preceding = 'preceding'; 
	axis_ancestor_or_self = 'ancestor-or-self'; 
	
	
	/**
	 *  Node Set Functions
	 * 
	 *	function: number last()
	 *	function: number position()
	 *	function: number count(node-set)
	 *	function: node-set id(object) 
	 *	function: string local-name(node-set?)
	 *	function: string namespace-uri(node-set?)
	 *	function: string name(node-set?) 
	 */
	
	/** 
	 *  String Functions
	 *
	 *	function: string string(object?)
	 *	function: string concat(string, string, string*)
	 *	function: boolean starts-with(string, string)
	 *	function: boolean contains(string, string)
	 *	function: string substring-before(string, string)
	 *	function: string substring-after(string, string)
	 *	function: string substring(string, number, number?) 
	 *	function: number string-length(string?)
	 *	function: string normalize-space(string?)
	 *	function: string translate(string, string, string) 
	 */
	
	/**
	 *  Boolean Functions
	 *
	 *	function: boolean boolean(object)
	 *	function: boolean not(boolean)
	 *	function: boolean true()
	 *	function: boolean false()
	 *	function: boolean lang(string) 
	 */
	
	/** 
	 *  Number Functions
	 *
	 *	function: number number(object?)
	 *	function: number sum(node-set)
	 *	function: number floor(number) 
	 *	function: number ceiling(number)
	 *	function: number round(number) 
	 */
	
	/**
	 * Reserved Function Names 
	 */ 
	//fn_attribute = 'attribute'; 
	fn_comment = 'comment'; 
	fn_document_node = 'document-node'; 
	fn_element = 'element'; 
	fn_empty_sequence = 'empty-sequence'; 
	fn_item = 'item'; 
	fn_node = 'node'; 
	fn_processing_instruction = 'processing-instruction'; 
	fn_schema_attribute = 'schema-attribute'; 
	fn_schema_element = 'schema-element'; 
	fn_text = 'text'; 
	fn_typeswitch = 'typeswitch'; 
	
	
	xmlns = 'xmlns'; 
	
	integerliteral		=    	digit+; 
	
	letter	   =	basechar+; 
	
	ncnamechar	=   namechar; 
	
	underscore = '_'; 
	
	
	decimalliteral 	   	=    	('.' digit+) | (digit+ '.' digit*); 
	
	doubleliteral 	   	=   doubleliteral_helper; 
	
	stringliteral 	   	=   stringliteral_helper; 
	
	whitespace 	= 	(' ' | tab | eol);
	comment 	   =    	'(:' (char)* ':)'; 
	
	
Ignored Tokens 
	
	whitespace, 
	comment; 
	
	
Productions 
	
	xpath = expr; 
	
	expr = exprsingle? expr_part*; 
		expr_part = T.comma exprsingle; 
	
	exprsingle = 	{for} forexpr | 
					{quantif} quantifiedexpr | 
					{if} ifexpr | 
					{or} orexpr;
	
	forexpr 		= simpleforclause T.keyword_return exprsingle;
	
	simpleforclause = T.keyword_for T.dollar varname T.keyword_in exprsingle simpleforclause_part*;
		simpleforclause_part = T.comma T.dollar varname T.keyword_in exprsingle;
	
	quantifiedexpr 	= some_every_part T.dollar varname T.keyword_in [exprsingle1]:exprsingle quantifiedexpr_part* T.keyword_satisfies [exprsingle2]:exprsingle;
		some_every_part = 	{some}	T.keyword_some | 
							{every}	T.keyword_every; 
		quantifiedexpr_part = T.comma T.dollar varname T.keyword_in exprsingle; 
	
	ifexpr 	= 	T.keyword_if T.lparenth expr T.rparenth T.keyword_then [exprsingle1]:exprsingle T.keyword_else [exprsingle2]:exprsingle; 
	
	orexpr 	   =    	andexpr orexpr_part*;
		orexpr_part = T.keyword_or andexpr; 
	
	andexpr 	   =    	comparisonexpr andexpr_part*;
		andexpr_part = T.keyword_and comparisonexpr; 
	
	comparisonexpr 	   =    rangeexpr comparisonexpr_part?; 
		comparisonexpr_part = comparisonexpr_part_part rangeexpr; 
		comparisonexpr_part_part = 	{value} valuecomp | 
									{general} generalcomp | 
									{node} nodecomp; 
	
	rangeexpr 	   =    	additiveexpr rangeexpr_part?;
		rangeexpr_part = T.keyword_to additiveexpr; 
	
	additiveexpr 	   =    	multiplicativeexpr additiveexpr_part*;
		additiveexpr_part = additiveexpr_part_part multiplicativeexpr; 
		additiveexpr_part_part = 	{plus} T.plus2 | 
									{minus} T.minus2; 
	
	
	multiplicativeexpr 	   =    	unionexpr multiplicativeexpr_part*; 
		multiplicativeexpr_part = multiplicativeexpr_part_part unionexpr; 
		multiplicativeexpr_part_part = 	{star} T.star2 | 
										{div} T.keyword_div | 
										{idiv} T.keyword_idiv | 
										{mod} T.keyword_mod; 
	
	unionexpr 	   =    	intersectexceptexpr unionexpr_part*;
		unionexpr_part = unionexpr_part_part intersectexceptexpr; 
		unionexpr_part_part = 	{unionkey} T.keyword_union | 
								{union} T.union; 
		
	intersectexceptexpr 	   =    	instanceofexpr intersectexceptexpr_part*;
		intersectexceptexpr_part = intersectexceptexpr_part_part instanceofexpr; 
		intersectexceptexpr_part_part = 	{intersect} T.keyword_intersect | 
											{except} T.keyword_except; 
	
	instanceofexpr 	   =    	treatexpr instanceofexpr_part?;
		instanceofexpr_part = T.keyword_instance T.keyword_of sequencetype; 
		
	treatexpr 	   =    	castableexpr treatexpr_part?; 
		treatexpr_part = T.keyword_treat T.keyword_as sequencetype; 
	
	castableexpr 	   =    	castexpr castableexpr_part?;
		castableexpr_part = T.keyword_castable T.keyword_as singletype; 
	
	castexpr 	   =    	unaryexpr castexpr_part?;
		castexpr_part = T.keyword_cast T.keyword_as singletype; 
	
	unaryexpr 	   =    	unaryexpr_part* valueexpr;
		unaryexpr_part = 	{minus} T.minus | 
							{plus} T.plus; 
	
	valueexpr 	   =    	pathexpr;
	
	generalcomp 	   =    {eq} T.equals | 
							{ne} T.ne_abbrev | 
							{lt} T.lt_abbrev | 
							{le} T.le_abbrev | 
							{gt} T.gt_abbrev | 
							{ge} T.ge_abbrev;
	
	valuecomp 	   =    {eq} T.eq | 
						{ne} T.ne | 
						{lt} T.lt | 
						{le} T.le | 
						{gt} T.gt | 
						{ge} T.ge;
	
	nodecomp 	   =    {is} T.keyword_is | 
						{ncomppre} T.ncomp_precedes | 
						{ncompfol} T.ncomp_follows;
	
	pathexpr 	   =    {path1} pathexpr_part_one | 
						{path2} pathexpr_part_two | 
						{relpath} relativepathexpr; 
		pathexpr_part_one = T.abbrev_root relativepathexpr?; 
		pathexpr_part_two = T.abbrev_root_desc relativepathexpr; 
	
	relativepathexpr 	   =    	stepexpr relativepathexpr_part*;
		relativepathexpr_part = relativepathexpr_part_part stepexpr; 
		relativepathexpr_part_part = 	{root} T.abbrev_root | 
										{rootdesc} T.abbrev_root_desc; 
	
	stepexpr 	   =	{filter} filterexpr | 
						{axis} axisstep;
	
	
	/**
	 * Axes 
	 */ 
	axisstep 	   =    axisstep_part predicatelist;
		axisstep_part = 	{reverse} reversestep | 
							{forward} forwardstep; 
	
	forwardstep 	   =    {forward} forwardstep_part | 
							{abbrevforward} abbrevforwardstep;
		forwardstep_part = forwardaxis nodetest; 
		
	forwardaxis 	   =    {forward1} forwardaxis_part_one | 
							{forward2} forwardaxis_part_two | 
							{forward3} forwardaxis_part_three | 
							{forward4} forwardaxis_part_four | 
							{forward5} forwardaxis_part_five | 
							{forward6} forwardaxis_part_six | 
							{forward7} forwardaxis_part_seven | 
							{forward8} forwardaxis_part_eight;
		forwardaxis_part_one = T.axis_child T.axis_delim; 
		forwardaxis_part_two = T.axis_descendant T.axis_delim; 
		forwardaxis_part_three = T.axis_attribute T.axis_delim; 
		forwardaxis_part_four = T.axis_self T.axis_delim; 
		forwardaxis_part_five = T.axis_descendant_or_self T.axis_delim; 
		forwardaxis_part_six = T.axis_following_sibling T.axis_delim; 
		forwardaxis_part_seven = T.axis_following T.axis_delim; 
		forwardaxis_part_eight = T.axis_namespace T.axis_delim; 
	
	abbrevforwardstep 	   =    	T.abbrev_attrib? nodetest;
	
	reversestep 	   =    {reverse} reversestep_part | 
							{abbrevreverse} abbrevreversestep; 
		reversestep_part = reverseaxis nodetest; 
	
	reverseaxis 	   =    {reverse1} reverseaxis_part_one | 
							{reverse2} reverseaxis_part_two | 
							{reverse3} reverseaxis_part_three | 
							{reverse4} reverseaxis_part_four | 
							{reverse5} reverseaxis_part_five; 
		reverseaxis_part_one = T.axis_parent T.axis_delim; 
		reverseaxis_part_two = T.axis_ancestor T.axis_delim; 
		reverseaxis_part_three = T.axis_preceding_sibling T.axis_delim; 
		reverseaxis_part_four = T.axis_preceding T.axis_delim; 
		reverseaxis_part_five = T.axis_ancestor_or_self T.axis_delim; 
	
	
	abbrevreversestep 	   =    	T.abbrev_reversestep;
	
	nodetest 	   =	{kind} kindtest | 
						{name} nametest;
	
	nametest 	   =    {qname} qname | 
						{wildc} wildcard;
	
	wildcard 	   =    {star} T.star | 
						{wild1} wildcard_part_one | 
						{wild2} wildcard_part_two; 
		wildcard_part_one = ncname T.colon T.star; 
		wildcard_part_two = T.star T.colon ncname; 
		
	filterexpr 	   =    	primaryexpr predicatelist;
	
	predicatelist 	   =    	predicate*;

	predicate 	   =    	T.lbracket expr T.rbracket;
	
	primaryexpr 	   =    {literal} literal | 
							{varref} varref | 
							{parenthex} parenthesizedexpr | 
							{contextex} contextitemexpr | 
							{function} functioncall;
	
	literal 	   =    {numeric} numericliteral | 
						{string} stringliteral;
	
	numericliteral 	   =    {integer} integerliteral | 
							{decimal} decimalliteral | 
							{double} doubleliteral;
	
	varref 	   =    	T.dollar varname;

	varname 	   =    	qname;

	parenthesizedexpr 	   =    	T.lparenth expr? T.rparenth;

	contextitemexpr 	   =    	T.abbrev_context;

	
	/** 
	 * Functions
	 */ 
	
	functioncall 	   =    	qname T.lparenth functioncall_part? T.rparenth; 	
		functioncall_part = exprsingle functioncall_part_part*; 
		functioncall_part_part = T.comma exprsingle; 
	
	
	singletype 	   =    	atomictype T.question?;
	
	sequencetype 	   =    {sequencetype1} sequencetype_part_one | 
							{sequencetype2} sequencetype_part_two;
		sequencetype_part_one = T.fn_empty_sequence T.lparenth T.rparenth; 
		sequencetype_part_two = itemtype occurrenceindicator?; 
	
	occurrenceindicator 	   =	{question} T.question | 
									{star} T.star | 
									{plus} T.plus; 
	
	
	itemtype 	   =    {kind} kindtest | 
						{item} itemtype_part | 
						{atomic} atomictype; 
		itemtype_part = T.fn_item T.lparenth T.rparenth; 

	atomictype 	   =    qname;

	kindtest 	   =    {document} documenttest | 
						{element} elementtest | 
						{attribute} attributetest | 
						{schemaelem} schemaelementtest | 
						{schemaattr} schemaattributetest | 
						{pi} pitest | 
						{comment} commenttest | 
						{text} texttest | 
	//					{any} anykindtest;
						{any} akindtest;

	//anykindtest 	   =    	T.fn_node T.lparenth T.rparenth;
	akindtest 	   =    	T.fn_node T.lparenth T.rparenth;
	
	documenttest 	   =    	T.fn_document_node T.lparenth documenttest_part? T.rparenth; 
		documenttest_part = 	{element} elementtest | 
								{schemaelem} schemaelementtest; 
		

	texttest 	   =    	T.fn_text T.lparenth T.rparenth;
	
	commenttest 	   =    	T.fn_comment T.lparenth T.rparenth;
	
	pitest 	   =    	T.fn_processing_instruction T.lparenth pitest_part? T.rparenth; 
		pitest_part = 	{ncname} ncname | 
						{stringlit} stringliteral; 
	
	attributetest 	   =    	T.axis_attribute T.lparenth attributetest_part? T.rparenth;	 
		attributetest_part = attribnameorwildcard attributetest_part_part?; 
		attributetest_part_part = T.comma typename; 
	
	
	attribnameorwildcard 	   =    {attrib} attributename | 
									{star} T.star;
	
	schemaattributetest 	   =    	T.fn_schema_attribute T.lparenth attributedeclaration T.rparenth;
	
	attributedeclaration 	   =    	attributename;
	
	elementtest 	   =    	T.fn_element T.lparenth elementtest_part? T.rparenth; 
		elementtest_part = elementnameorwildcard elementtest_part_part?; 
		elementtest_part_part = T.comma typename T.question?; 
	
	elementnameorwildcard 	   =	{element} elementname | 
									{star} T.star;

	schemaelementtest 	   =    	T.fn_schema_element T.lparenth elementdeclaration T.rparenth;

	elementdeclaration 	   =    	elementname;

	attributename 	   =    	qname;

	elementname 	   =    	qname;

	typename 	   =    	qname;
	
	
	/** 
	 * Qualified XML Names 
	 */
	qname	= 	{prefixed} prefixedname | 
				{unprefixed} unprefixedname; 
	
	prefixedname	=	prefix T.colon localpart; 
	
	unprefixedname	=	localpart; 
	
	prefix	   =	ncname; 
	
	localpart	=	ncname; 
	
	
	/** 
	 * Attribute Names for Namespace 
	 */ 
	nsattname	=	{prefixed} prefixedattname | 
					{default} defaultattname; 
	
	prefixedattname	=	T.xmlns T.colon ncname; 
	
	defaultattname	=	T.xmlns; 
	
	ncname	   =   	ncnamestartchar T.ncnamechar*;		/* An XML Name, minus the ":" */
	
	ncnamestartchar	=	{letter} T.letter | 
						{underscore} T.underscore ; 
	
