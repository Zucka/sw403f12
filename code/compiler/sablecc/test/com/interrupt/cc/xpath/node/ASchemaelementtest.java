/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class ASchemaelementtest extends PSchemaelementtest
{
    private TFnSchemaElement _fnSchemaElement_;
    private TLparenth _lparenth_;
    private PElementdeclaration _elementdeclaration_;
    private TRparenth _rparenth_;

    public ASchemaelementtest()
    {
        // Constructor
    }

    public ASchemaelementtest(
        @SuppressWarnings("hiding") TFnSchemaElement _fnSchemaElement_,
        @SuppressWarnings("hiding") TLparenth _lparenth_,
        @SuppressWarnings("hiding") PElementdeclaration _elementdeclaration_,
        @SuppressWarnings("hiding") TRparenth _rparenth_)
    {
        // Constructor
        setFnSchemaElement(_fnSchemaElement_);

        setLparenth(_lparenth_);

        setElementdeclaration(_elementdeclaration_);

        setRparenth(_rparenth_);

    }

    @Override
    public Object clone()
    {
        return new ASchemaelementtest(
            cloneNode(this._fnSchemaElement_),
            cloneNode(this._lparenth_),
            cloneNode(this._elementdeclaration_),
            cloneNode(this._rparenth_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASchemaelementtest(this);
    }

    public TFnSchemaElement getFnSchemaElement()
    {
        return this._fnSchemaElement_;
    }

    public void setFnSchemaElement(TFnSchemaElement node)
    {
        if(this._fnSchemaElement_ != null)
        {
            this._fnSchemaElement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fnSchemaElement_ = node;
    }

    public TLparenth getLparenth()
    {
        return this._lparenth_;
    }

    public void setLparenth(TLparenth node)
    {
        if(this._lparenth_ != null)
        {
            this._lparenth_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparenth_ = node;
    }

    public PElementdeclaration getElementdeclaration()
    {
        return this._elementdeclaration_;
    }

    public void setElementdeclaration(PElementdeclaration node)
    {
        if(this._elementdeclaration_ != null)
        {
            this._elementdeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elementdeclaration_ = node;
    }

    public TRparenth getRparenth()
    {
        return this._rparenth_;
    }

    public void setRparenth(TRparenth node)
    {
        if(this._rparenth_ != null)
        {
            this._rparenth_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparenth_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fnSchemaElement_)
            + toString(this._lparenth_)
            + toString(this._elementdeclaration_)
            + toString(this._rparenth_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fnSchemaElement_ == child)
        {
            this._fnSchemaElement_ = null;
            return;
        }

        if(this._lparenth_ == child)
        {
            this._lparenth_ = null;
            return;
        }

        if(this._elementdeclaration_ == child)
        {
            this._elementdeclaration_ = null;
            return;
        }

        if(this._rparenth_ == child)
        {
            this._rparenth_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fnSchemaElement_ == oldChild)
        {
            setFnSchemaElement((TFnSchemaElement) newChild);
            return;
        }

        if(this._lparenth_ == oldChild)
        {
            setLparenth((TLparenth) newChild);
            return;
        }

        if(this._elementdeclaration_ == oldChild)
        {
            setElementdeclaration((PElementdeclaration) newChild);
            return;
        }

        if(this._rparenth_ == oldChild)
        {
            setRparenth((TRparenth) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
