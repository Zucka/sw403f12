/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AAbbrevforwardForwardstep extends PForwardstep
{
    private PAbbrevforwardstep _abbrevforwardstep_;

    public AAbbrevforwardForwardstep()
    {
        // Constructor
    }

    public AAbbrevforwardForwardstep(
        @SuppressWarnings("hiding") PAbbrevforwardstep _abbrevforwardstep_)
    {
        // Constructor
        setAbbrevforwardstep(_abbrevforwardstep_);

    }

    @Override
    public Object clone()
    {
        return new AAbbrevforwardForwardstep(
            cloneNode(this._abbrevforwardstep_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAbbrevforwardForwardstep(this);
    }

    public PAbbrevforwardstep getAbbrevforwardstep()
    {
        return this._abbrevforwardstep_;
    }

    public void setAbbrevforwardstep(PAbbrevforwardstep node)
    {
        if(this._abbrevforwardstep_ != null)
        {
            this._abbrevforwardstep_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._abbrevforwardstep_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._abbrevforwardstep_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._abbrevforwardstep_ == child)
        {
            this._abbrevforwardstep_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._abbrevforwardstep_ == oldChild)
        {
            setAbbrevforwardstep((PAbbrevforwardstep) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
