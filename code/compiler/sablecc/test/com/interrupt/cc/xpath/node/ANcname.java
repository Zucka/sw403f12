/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import java.util.*;
import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class ANcname extends PNcname
{
    private PNcnamestartchar _ncnamestartchar_;
    private final LinkedList<TNcnamechar> _ncnamechar_ = new LinkedList<TNcnamechar>();

    public ANcname()
    {
        // Constructor
    }

    public ANcname(
        @SuppressWarnings("hiding") PNcnamestartchar _ncnamestartchar_,
        @SuppressWarnings("hiding") List<TNcnamechar> _ncnamechar_)
    {
        // Constructor
        setNcnamestartchar(_ncnamestartchar_);

        setNcnamechar(_ncnamechar_);

    }

    @Override
    public Object clone()
    {
        return new ANcname(
            cloneNode(this._ncnamestartchar_),
            cloneList(this._ncnamechar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANcname(this);
    }

    public PNcnamestartchar getNcnamestartchar()
    {
        return this._ncnamestartchar_;
    }

    public void setNcnamestartchar(PNcnamestartchar node)
    {
        if(this._ncnamestartchar_ != null)
        {
            this._ncnamestartchar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ncnamestartchar_ = node;
    }

    public LinkedList<TNcnamechar> getNcnamechar()
    {
        return this._ncnamechar_;
    }

    public void setNcnamechar(List<TNcnamechar> list)
    {
        this._ncnamechar_.clear();
        this._ncnamechar_.addAll(list);
        for(TNcnamechar e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ncnamestartchar_)
            + toString(this._ncnamechar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ncnamestartchar_ == child)
        {
            this._ncnamestartchar_ = null;
            return;
        }

        if(this._ncnamechar_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ncnamestartchar_ == oldChild)
        {
            setNcnamestartchar((PNcnamestartchar) newChild);
            return;
        }

        for(ListIterator<TNcnamechar> i = this._ncnamechar_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TNcnamechar) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
