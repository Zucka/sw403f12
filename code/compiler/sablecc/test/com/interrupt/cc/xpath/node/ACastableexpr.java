/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class ACastableexpr extends PCastableexpr
{
    private PCastexpr _castexpr_;
    private PCastableexprPart _castableexprPart_;

    public ACastableexpr()
    {
        // Constructor
    }

    public ACastableexpr(
        @SuppressWarnings("hiding") PCastexpr _castexpr_,
        @SuppressWarnings("hiding") PCastableexprPart _castableexprPart_)
    {
        // Constructor
        setCastexpr(_castexpr_);

        setCastableexprPart(_castableexprPart_);

    }

    @Override
    public Object clone()
    {
        return new ACastableexpr(
            cloneNode(this._castexpr_),
            cloneNode(this._castableexprPart_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACastableexpr(this);
    }

    public PCastexpr getCastexpr()
    {
        return this._castexpr_;
    }

    public void setCastexpr(PCastexpr node)
    {
        if(this._castexpr_ != null)
        {
            this._castexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._castexpr_ = node;
    }

    public PCastableexprPart getCastableexprPart()
    {
        return this._castableexprPart_;
    }

    public void setCastableexprPart(PCastableexprPart node)
    {
        if(this._castableexprPart_ != null)
        {
            this._castableexprPart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._castableexprPart_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._castexpr_)
            + toString(this._castableexprPart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._castexpr_ == child)
        {
            this._castexpr_ = null;
            return;
        }

        if(this._castableexprPart_ == child)
        {
            this._castableexprPart_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._castexpr_ == oldChild)
        {
            setCastexpr((PCastexpr) newChild);
            return;
        }

        if(this._castableexprPart_ == oldChild)
        {
            setCastableexprPart((PCastableexprPart) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
