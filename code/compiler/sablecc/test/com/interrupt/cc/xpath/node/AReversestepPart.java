/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AReversestepPart extends PReversestepPart
{
    private PReverseaxis _reverseaxis_;
    private PNodetest _nodetest_;

    public AReversestepPart()
    {
        // Constructor
    }

    public AReversestepPart(
        @SuppressWarnings("hiding") PReverseaxis _reverseaxis_,
        @SuppressWarnings("hiding") PNodetest _nodetest_)
    {
        // Constructor
        setReverseaxis(_reverseaxis_);

        setNodetest(_nodetest_);

    }

    @Override
    public Object clone()
    {
        return new AReversestepPart(
            cloneNode(this._reverseaxis_),
            cloneNode(this._nodetest_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAReversestepPart(this);
    }

    public PReverseaxis getReverseaxis()
    {
        return this._reverseaxis_;
    }

    public void setReverseaxis(PReverseaxis node)
    {
        if(this._reverseaxis_ != null)
        {
            this._reverseaxis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._reverseaxis_ = node;
    }

    public PNodetest getNodetest()
    {
        return this._nodetest_;
    }

    public void setNodetest(PNodetest node)
    {
        if(this._nodetest_ != null)
        {
            this._nodetest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nodetest_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._reverseaxis_)
            + toString(this._nodetest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._reverseaxis_ == child)
        {
            this._reverseaxis_ = null;
            return;
        }

        if(this._nodetest_ == child)
        {
            this._nodetest_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._reverseaxis_ == oldChild)
        {
            setReverseaxis((PReverseaxis) newChild);
            return;
        }

        if(this._nodetest_ == oldChild)
        {
            setNodetest((PNodetest) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
