/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AForexpr extends PForexpr
{
    private PSimpleforclause _simpleforclause_;
    private TKeywordReturn _keywordReturn_;
    private PExprsingle _exprsingle_;

    public AForexpr()
    {
        // Constructor
    }

    public AForexpr(
        @SuppressWarnings("hiding") PSimpleforclause _simpleforclause_,
        @SuppressWarnings("hiding") TKeywordReturn _keywordReturn_,
        @SuppressWarnings("hiding") PExprsingle _exprsingle_)
    {
        // Constructor
        setSimpleforclause(_simpleforclause_);

        setKeywordReturn(_keywordReturn_);

        setExprsingle(_exprsingle_);

    }

    @Override
    public Object clone()
    {
        return new AForexpr(
            cloneNode(this._simpleforclause_),
            cloneNode(this._keywordReturn_),
            cloneNode(this._exprsingle_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForexpr(this);
    }

    public PSimpleforclause getSimpleforclause()
    {
        return this._simpleforclause_;
    }

    public void setSimpleforclause(PSimpleforclause node)
    {
        if(this._simpleforclause_ != null)
        {
            this._simpleforclause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simpleforclause_ = node;
    }

    public TKeywordReturn getKeywordReturn()
    {
        return this._keywordReturn_;
    }

    public void setKeywordReturn(TKeywordReturn node)
    {
        if(this._keywordReturn_ != null)
        {
            this._keywordReturn_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordReturn_ = node;
    }

    public PExprsingle getExprsingle()
    {
        return this._exprsingle_;
    }

    public void setExprsingle(PExprsingle node)
    {
        if(this._exprsingle_ != null)
        {
            this._exprsingle_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprsingle_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._simpleforclause_)
            + toString(this._keywordReturn_)
            + toString(this._exprsingle_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._simpleforclause_ == child)
        {
            this._simpleforclause_ = null;
            return;
        }

        if(this._keywordReturn_ == child)
        {
            this._keywordReturn_ = null;
            return;
        }

        if(this._exprsingle_ == child)
        {
            this._exprsingle_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._simpleforclause_ == oldChild)
        {
            setSimpleforclause((PSimpleforclause) newChild);
            return;
        }

        if(this._keywordReturn_ == oldChild)
        {
            setKeywordReturn((TKeywordReturn) newChild);
            return;
        }

        if(this._exprsingle_ == oldChild)
        {
            setExprsingle((PExprsingle) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
