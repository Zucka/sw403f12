/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import java.util.*;
import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AOrexpr extends POrexpr
{
    private PAndexpr _andexpr_;
    private final LinkedList<POrexprPart> _orexprPart_ = new LinkedList<POrexprPart>();

    public AOrexpr()
    {
        // Constructor
    }

    public AOrexpr(
        @SuppressWarnings("hiding") PAndexpr _andexpr_,
        @SuppressWarnings("hiding") List<POrexprPart> _orexprPart_)
    {
        // Constructor
        setAndexpr(_andexpr_);

        setOrexprPart(_orexprPart_);

    }

    @Override
    public Object clone()
    {
        return new AOrexpr(
            cloneNode(this._andexpr_),
            cloneList(this._orexprPart_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrexpr(this);
    }

    public PAndexpr getAndexpr()
    {
        return this._andexpr_;
    }

    public void setAndexpr(PAndexpr node)
    {
        if(this._andexpr_ != null)
        {
            this._andexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._andexpr_ = node;
    }

    public LinkedList<POrexprPart> getOrexprPart()
    {
        return this._orexprPart_;
    }

    public void setOrexprPart(List<POrexprPart> list)
    {
        this._orexprPart_.clear();
        this._orexprPart_.addAll(list);
        for(POrexprPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._andexpr_)
            + toString(this._orexprPart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._andexpr_ == child)
        {
            this._andexpr_ = null;
            return;
        }

        if(this._orexprPart_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._andexpr_ == oldChild)
        {
            setAndexpr((PAndexpr) newChild);
            return;
        }

        for(ListIterator<POrexprPart> i = this._orexprPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((POrexprPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
