/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import java.util.*;
import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AUnionexpr extends PUnionexpr
{
    private PIntersectexceptexpr _intersectexceptexpr_;
    private final LinkedList<PUnionexprPart> _unionexprPart_ = new LinkedList<PUnionexprPart>();

    public AUnionexpr()
    {
        // Constructor
    }

    public AUnionexpr(
        @SuppressWarnings("hiding") PIntersectexceptexpr _intersectexceptexpr_,
        @SuppressWarnings("hiding") List<PUnionexprPart> _unionexprPart_)
    {
        // Constructor
        setIntersectexceptexpr(_intersectexceptexpr_);

        setUnionexprPart(_unionexprPart_);

    }

    @Override
    public Object clone()
    {
        return new AUnionexpr(
            cloneNode(this._intersectexceptexpr_),
            cloneList(this._unionexprPart_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnionexpr(this);
    }

    public PIntersectexceptexpr getIntersectexceptexpr()
    {
        return this._intersectexceptexpr_;
    }

    public void setIntersectexceptexpr(PIntersectexceptexpr node)
    {
        if(this._intersectexceptexpr_ != null)
        {
            this._intersectexceptexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._intersectexceptexpr_ = node;
    }

    public LinkedList<PUnionexprPart> getUnionexprPart()
    {
        return this._unionexprPart_;
    }

    public void setUnionexprPart(List<PUnionexprPart> list)
    {
        this._unionexprPart_.clear();
        this._unionexprPart_.addAll(list);
        for(PUnionexprPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._intersectexceptexpr_)
            + toString(this._unionexprPart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._intersectexceptexpr_ == child)
        {
            this._intersectexceptexpr_ = null;
            return;
        }

        if(this._unionexprPart_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._intersectexceptexpr_ == oldChild)
        {
            setIntersectexceptexpr((PIntersectexceptexpr) newChild);
            return;
        }

        for(ListIterator<PUnionexprPart> i = this._unionexprPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PUnionexprPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
