/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class APitest extends PPitest
{
    private TFnProcessingInstruction _fnProcessingInstruction_;
    private TLparenth _lparenth_;
    private PPitestPart _pitestPart_;
    private TRparenth _rparenth_;

    public APitest()
    {
        // Constructor
    }

    public APitest(
        @SuppressWarnings("hiding") TFnProcessingInstruction _fnProcessingInstruction_,
        @SuppressWarnings("hiding") TLparenth _lparenth_,
        @SuppressWarnings("hiding") PPitestPart _pitestPart_,
        @SuppressWarnings("hiding") TRparenth _rparenth_)
    {
        // Constructor
        setFnProcessingInstruction(_fnProcessingInstruction_);

        setLparenth(_lparenth_);

        setPitestPart(_pitestPart_);

        setRparenth(_rparenth_);

    }

    @Override
    public Object clone()
    {
        return new APitest(
            cloneNode(this._fnProcessingInstruction_),
            cloneNode(this._lparenth_),
            cloneNode(this._pitestPart_),
            cloneNode(this._rparenth_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPitest(this);
    }

    public TFnProcessingInstruction getFnProcessingInstruction()
    {
        return this._fnProcessingInstruction_;
    }

    public void setFnProcessingInstruction(TFnProcessingInstruction node)
    {
        if(this._fnProcessingInstruction_ != null)
        {
            this._fnProcessingInstruction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fnProcessingInstruction_ = node;
    }

    public TLparenth getLparenth()
    {
        return this._lparenth_;
    }

    public void setLparenth(TLparenth node)
    {
        if(this._lparenth_ != null)
        {
            this._lparenth_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparenth_ = node;
    }

    public PPitestPart getPitestPart()
    {
        return this._pitestPart_;
    }

    public void setPitestPart(PPitestPart node)
    {
        if(this._pitestPart_ != null)
        {
            this._pitestPart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pitestPart_ = node;
    }

    public TRparenth getRparenth()
    {
        return this._rparenth_;
    }

    public void setRparenth(TRparenth node)
    {
        if(this._rparenth_ != null)
        {
            this._rparenth_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparenth_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fnProcessingInstruction_)
            + toString(this._lparenth_)
            + toString(this._pitestPart_)
            + toString(this._rparenth_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fnProcessingInstruction_ == child)
        {
            this._fnProcessingInstruction_ = null;
            return;
        }

        if(this._lparenth_ == child)
        {
            this._lparenth_ = null;
            return;
        }

        if(this._pitestPart_ == child)
        {
            this._pitestPart_ = null;
            return;
        }

        if(this._rparenth_ == child)
        {
            this._rparenth_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fnProcessingInstruction_ == oldChild)
        {
            setFnProcessingInstruction((TFnProcessingInstruction) newChild);
            return;
        }

        if(this._lparenth_ == oldChild)
        {
            setLparenth((TLparenth) newChild);
            return;
        }

        if(this._pitestPart_ == oldChild)
        {
            setPitestPart((PPitestPart) newChild);
            return;
        }

        if(this._rparenth_ == oldChild)
        {
            setRparenth((TRparenth) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
