/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import java.util.*;
import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AAdditiveexpr extends PAdditiveexpr
{
    private PMultiplicativeexpr _multiplicativeexpr_;
    private final LinkedList<PAdditiveexprPart> _additiveexprPart_ = new LinkedList<PAdditiveexprPart>();

    public AAdditiveexpr()
    {
        // Constructor
    }

    public AAdditiveexpr(
        @SuppressWarnings("hiding") PMultiplicativeexpr _multiplicativeexpr_,
        @SuppressWarnings("hiding") List<PAdditiveexprPart> _additiveexprPart_)
    {
        // Constructor
        setMultiplicativeexpr(_multiplicativeexpr_);

        setAdditiveexprPart(_additiveexprPart_);

    }

    @Override
    public Object clone()
    {
        return new AAdditiveexpr(
            cloneNode(this._multiplicativeexpr_),
            cloneList(this._additiveexprPart_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAdditiveexpr(this);
    }

    public PMultiplicativeexpr getMultiplicativeexpr()
    {
        return this._multiplicativeexpr_;
    }

    public void setMultiplicativeexpr(PMultiplicativeexpr node)
    {
        if(this._multiplicativeexpr_ != null)
        {
            this._multiplicativeexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiplicativeexpr_ = node;
    }

    public LinkedList<PAdditiveexprPart> getAdditiveexprPart()
    {
        return this._additiveexprPart_;
    }

    public void setAdditiveexprPart(List<PAdditiveexprPart> list)
    {
        this._additiveexprPart_.clear();
        this._additiveexprPart_.addAll(list);
        for(PAdditiveexprPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._multiplicativeexpr_)
            + toString(this._additiveexprPart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._multiplicativeexpr_ == child)
        {
            this._multiplicativeexpr_ = null;
            return;
        }

        if(this._additiveexprPart_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._multiplicativeexpr_ == oldChild)
        {
            setMultiplicativeexpr((PMultiplicativeexpr) newChild);
            return;
        }

        for(ListIterator<PAdditiveexprPart> i = this._additiveexprPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAdditiveexprPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
