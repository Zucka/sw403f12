/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.analysis;

import java.util.*;
import com.interrupt.cc.xpath.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPXpath().apply(this);
        outStart(node);
    }

    public void inAXpath(AXpath node)
    {
        defaultIn(node);
    }

    public void outAXpath(AXpath node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXpath(AXpath node)
    {
        inAXpath(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAXpath(node);
    }

    public void inAExpr(AExpr node)
    {
        defaultIn(node);
    }

    public void outAExpr(AExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr(AExpr node)
    {
        inAExpr(node);
        {
            List<PExprPart> copy = new ArrayList<PExprPart>(node.getExprPart());
            Collections.reverse(copy);
            for(PExprPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExprsingle() != null)
        {
            node.getExprsingle().apply(this);
        }
        outAExpr(node);
    }

    public void inAExprPart(AExprPart node)
    {
        defaultIn(node);
    }

    public void outAExprPart(AExprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprPart(AExprPart node)
    {
        inAExprPart(node);
        if(node.getExprsingle() != null)
        {
            node.getExprsingle().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExprPart(node);
    }

    public void inAForExprsingle(AForExprsingle node)
    {
        defaultIn(node);
    }

    public void outAForExprsingle(AForExprsingle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForExprsingle(AForExprsingle node)
    {
        inAForExprsingle(node);
        if(node.getForexpr() != null)
        {
            node.getForexpr().apply(this);
        }
        outAForExprsingle(node);
    }

    public void inAQuantifExprsingle(AQuantifExprsingle node)
    {
        defaultIn(node);
    }

    public void outAQuantifExprsingle(AQuantifExprsingle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuantifExprsingle(AQuantifExprsingle node)
    {
        inAQuantifExprsingle(node);
        if(node.getQuantifiedexpr() != null)
        {
            node.getQuantifiedexpr().apply(this);
        }
        outAQuantifExprsingle(node);
    }

    public void inAIfExprsingle(AIfExprsingle node)
    {
        defaultIn(node);
    }

    public void outAIfExprsingle(AIfExprsingle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfExprsingle(AIfExprsingle node)
    {
        inAIfExprsingle(node);
        if(node.getIfexpr() != null)
        {
            node.getIfexpr().apply(this);
        }
        outAIfExprsingle(node);
    }

    public void inAOrExprsingle(AOrExprsingle node)
    {
        defaultIn(node);
    }

    public void outAOrExprsingle(AOrExprsingle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExprsingle(AOrExprsingle node)
    {
        inAOrExprsingle(node);
        if(node.getOrexpr() != null)
        {
            node.getOrexpr().apply(this);
        }
        outAOrExprsingle(node);
    }

    public void inAForexpr(AForexpr node)
    {
        defaultIn(node);
    }

    public void outAForexpr(AForexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForexpr(AForexpr node)
    {
        inAForexpr(node);
        if(node.getExprsingle() != null)
        {
            node.getExprsingle().apply(this);
        }
        if(node.getKeywordReturn() != null)
        {
            node.getKeywordReturn().apply(this);
        }
        if(node.getSimpleforclause() != null)
        {
            node.getSimpleforclause().apply(this);
        }
        outAForexpr(node);
    }

    public void inASimpleforclause(ASimpleforclause node)
    {
        defaultIn(node);
    }

    public void outASimpleforclause(ASimpleforclause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleforclause(ASimpleforclause node)
    {
        inASimpleforclause(node);
        {
            List<PSimpleforclausePart> copy = new ArrayList<PSimpleforclausePart>(node.getSimpleforclausePart());
            Collections.reverse(copy);
            for(PSimpleforclausePart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExprsingle() != null)
        {
            node.getExprsingle().apply(this);
        }
        if(node.getKeywordIn() != null)
        {
            node.getKeywordIn().apply(this);
        }
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        if(node.getKeywordFor() != null)
        {
            node.getKeywordFor().apply(this);
        }
        outASimpleforclause(node);
    }

    public void inASimpleforclausePart(ASimpleforclausePart node)
    {
        defaultIn(node);
    }

    public void outASimpleforclausePart(ASimpleforclausePart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleforclausePart(ASimpleforclausePart node)
    {
        inASimpleforclausePart(node);
        if(node.getExprsingle() != null)
        {
            node.getExprsingle().apply(this);
        }
        if(node.getKeywordIn() != null)
        {
            node.getKeywordIn().apply(this);
        }
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outASimpleforclausePart(node);
    }

    public void inAQuantifiedexpr(AQuantifiedexpr node)
    {
        defaultIn(node);
    }

    public void outAQuantifiedexpr(AQuantifiedexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuantifiedexpr(AQuantifiedexpr node)
    {
        inAQuantifiedexpr(node);
        if(node.getExprsingle2() != null)
        {
            node.getExprsingle2().apply(this);
        }
        if(node.getKeywordSatisfies() != null)
        {
            node.getKeywordSatisfies().apply(this);
        }
        {
            List<PQuantifiedexprPart> copy = new ArrayList<PQuantifiedexprPart>(node.getQuantifiedexprPart());
            Collections.reverse(copy);
            for(PQuantifiedexprPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExprsingle1() != null)
        {
            node.getExprsingle1().apply(this);
        }
        if(node.getKeywordIn() != null)
        {
            node.getKeywordIn().apply(this);
        }
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        if(node.getSomeEveryPart() != null)
        {
            node.getSomeEveryPart().apply(this);
        }
        outAQuantifiedexpr(node);
    }

    public void inASomeSomeEveryPart(ASomeSomeEveryPart node)
    {
        defaultIn(node);
    }

    public void outASomeSomeEveryPart(ASomeSomeEveryPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomeSomeEveryPart(ASomeSomeEveryPart node)
    {
        inASomeSomeEveryPart(node);
        if(node.getKeywordSome() != null)
        {
            node.getKeywordSome().apply(this);
        }
        outASomeSomeEveryPart(node);
    }

    public void inAEverySomeEveryPart(AEverySomeEveryPart node)
    {
        defaultIn(node);
    }

    public void outAEverySomeEveryPart(AEverySomeEveryPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEverySomeEveryPart(AEverySomeEveryPart node)
    {
        inAEverySomeEveryPart(node);
        if(node.getKeywordEvery() != null)
        {
            node.getKeywordEvery().apply(this);
        }
        outAEverySomeEveryPart(node);
    }

    public void inAQuantifiedexprPart(AQuantifiedexprPart node)
    {
        defaultIn(node);
    }

    public void outAQuantifiedexprPart(AQuantifiedexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuantifiedexprPart(AQuantifiedexprPart node)
    {
        inAQuantifiedexprPart(node);
        if(node.getExprsingle() != null)
        {
            node.getExprsingle().apply(this);
        }
        if(node.getKeywordIn() != null)
        {
            node.getKeywordIn().apply(this);
        }
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAQuantifiedexprPart(node);
    }

    public void inAIfexpr(AIfexpr node)
    {
        defaultIn(node);
    }

    public void outAIfexpr(AIfexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfexpr(AIfexpr node)
    {
        inAIfexpr(node);
        if(node.getExprsingle2() != null)
        {
            node.getExprsingle2().apply(this);
        }
        if(node.getKeywordElse() != null)
        {
            node.getKeywordElse().apply(this);
        }
        if(node.getExprsingle1() != null)
        {
            node.getExprsingle1().apply(this);
        }
        if(node.getKeywordThen() != null)
        {
            node.getKeywordThen().apply(this);
        }
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getKeywordIf() != null)
        {
            node.getKeywordIf().apply(this);
        }
        outAIfexpr(node);
    }

    public void inAOrexpr(AOrexpr node)
    {
        defaultIn(node);
    }

    public void outAOrexpr(AOrexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrexpr(AOrexpr node)
    {
        inAOrexpr(node);
        {
            List<POrexprPart> copy = new ArrayList<POrexprPart>(node.getOrexprPart());
            Collections.reverse(copy);
            for(POrexprPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAndexpr() != null)
        {
            node.getAndexpr().apply(this);
        }
        outAOrexpr(node);
    }

    public void inAOrexprPart(AOrexprPart node)
    {
        defaultIn(node);
    }

    public void outAOrexprPart(AOrexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrexprPart(AOrexprPart node)
    {
        inAOrexprPart(node);
        if(node.getAndexpr() != null)
        {
            node.getAndexpr().apply(this);
        }
        if(node.getKeywordOr() != null)
        {
            node.getKeywordOr().apply(this);
        }
        outAOrexprPart(node);
    }

    public void inAAndexpr(AAndexpr node)
    {
        defaultIn(node);
    }

    public void outAAndexpr(AAndexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndexpr(AAndexpr node)
    {
        inAAndexpr(node);
        {
            List<PAndexprPart> copy = new ArrayList<PAndexprPart>(node.getAndexprPart());
            Collections.reverse(copy);
            for(PAndexprPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComparisonexpr() != null)
        {
            node.getComparisonexpr().apply(this);
        }
        outAAndexpr(node);
    }

    public void inAAndexprPart(AAndexprPart node)
    {
        defaultIn(node);
    }

    public void outAAndexprPart(AAndexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndexprPart(AAndexprPart node)
    {
        inAAndexprPart(node);
        if(node.getComparisonexpr() != null)
        {
            node.getComparisonexpr().apply(this);
        }
        if(node.getKeywordAnd() != null)
        {
            node.getKeywordAnd().apply(this);
        }
        outAAndexprPart(node);
    }

    public void inAComparisonexpr(AComparisonexpr node)
    {
        defaultIn(node);
    }

    public void outAComparisonexpr(AComparisonexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparisonexpr(AComparisonexpr node)
    {
        inAComparisonexpr(node);
        if(node.getComparisonexprPart() != null)
        {
            node.getComparisonexprPart().apply(this);
        }
        if(node.getRangeexpr() != null)
        {
            node.getRangeexpr().apply(this);
        }
        outAComparisonexpr(node);
    }

    public void inAComparisonexprPart(AComparisonexprPart node)
    {
        defaultIn(node);
    }

    public void outAComparisonexprPart(AComparisonexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparisonexprPart(AComparisonexprPart node)
    {
        inAComparisonexprPart(node);
        if(node.getRangeexpr() != null)
        {
            node.getRangeexpr().apply(this);
        }
        if(node.getComparisonexprPartPart() != null)
        {
            node.getComparisonexprPartPart().apply(this);
        }
        outAComparisonexprPart(node);
    }

    public void inAValueComparisonexprPartPart(AValueComparisonexprPartPart node)
    {
        defaultIn(node);
    }

    public void outAValueComparisonexprPartPart(AValueComparisonexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueComparisonexprPartPart(AValueComparisonexprPartPart node)
    {
        inAValueComparisonexprPartPart(node);
        if(node.getValuecomp() != null)
        {
            node.getValuecomp().apply(this);
        }
        outAValueComparisonexprPartPart(node);
    }

    public void inAGeneralComparisonexprPartPart(AGeneralComparisonexprPartPart node)
    {
        defaultIn(node);
    }

    public void outAGeneralComparisonexprPartPart(AGeneralComparisonexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeneralComparisonexprPartPart(AGeneralComparisonexprPartPart node)
    {
        inAGeneralComparisonexprPartPart(node);
        if(node.getGeneralcomp() != null)
        {
            node.getGeneralcomp().apply(this);
        }
        outAGeneralComparisonexprPartPart(node);
    }

    public void inANodeComparisonexprPartPart(ANodeComparisonexprPartPart node)
    {
        defaultIn(node);
    }

    public void outANodeComparisonexprPartPart(ANodeComparisonexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANodeComparisonexprPartPart(ANodeComparisonexprPartPart node)
    {
        inANodeComparisonexprPartPart(node);
        if(node.getNodecomp() != null)
        {
            node.getNodecomp().apply(this);
        }
        outANodeComparisonexprPartPart(node);
    }

    public void inARangeexpr(ARangeexpr node)
    {
        defaultIn(node);
    }

    public void outARangeexpr(ARangeexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARangeexpr(ARangeexpr node)
    {
        inARangeexpr(node);
        if(node.getRangeexprPart() != null)
        {
            node.getRangeexprPart().apply(this);
        }
        if(node.getAdditiveexpr() != null)
        {
            node.getAdditiveexpr().apply(this);
        }
        outARangeexpr(node);
    }

    public void inARangeexprPart(ARangeexprPart node)
    {
        defaultIn(node);
    }

    public void outARangeexprPart(ARangeexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARangeexprPart(ARangeexprPart node)
    {
        inARangeexprPart(node);
        if(node.getAdditiveexpr() != null)
        {
            node.getAdditiveexpr().apply(this);
        }
        if(node.getKeywordTo() != null)
        {
            node.getKeywordTo().apply(this);
        }
        outARangeexprPart(node);
    }

    public void inAAdditiveexpr(AAdditiveexpr node)
    {
        defaultIn(node);
    }

    public void outAAdditiveexpr(AAdditiveexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditiveexpr(AAdditiveexpr node)
    {
        inAAdditiveexpr(node);
        {
            List<PAdditiveexprPart> copy = new ArrayList<PAdditiveexprPart>(node.getAdditiveexprPart());
            Collections.reverse(copy);
            for(PAdditiveexprPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMultiplicativeexpr() != null)
        {
            node.getMultiplicativeexpr().apply(this);
        }
        outAAdditiveexpr(node);
    }

    public void inAAdditiveexprPart(AAdditiveexprPart node)
    {
        defaultIn(node);
    }

    public void outAAdditiveexprPart(AAdditiveexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditiveexprPart(AAdditiveexprPart node)
    {
        inAAdditiveexprPart(node);
        if(node.getMultiplicativeexpr() != null)
        {
            node.getMultiplicativeexpr().apply(this);
        }
        if(node.getAdditiveexprPartPart() != null)
        {
            node.getAdditiveexprPartPart().apply(this);
        }
        outAAdditiveexprPart(node);
    }

    public void inAPlusAdditiveexprPartPart(APlusAdditiveexprPartPart node)
    {
        defaultIn(node);
    }

    public void outAPlusAdditiveexprPartPart(APlusAdditiveexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAdditiveexprPartPart(APlusAdditiveexprPartPart node)
    {
        inAPlusAdditiveexprPartPart(node);
        if(node.getPlus2() != null)
        {
            node.getPlus2().apply(this);
        }
        outAPlusAdditiveexprPartPart(node);
    }

    public void inAMinusAdditiveexprPartPart(AMinusAdditiveexprPartPart node)
    {
        defaultIn(node);
    }

    public void outAMinusAdditiveexprPartPart(AMinusAdditiveexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAdditiveexprPartPart(AMinusAdditiveexprPartPart node)
    {
        inAMinusAdditiveexprPartPart(node);
        if(node.getMinus2() != null)
        {
            node.getMinus2().apply(this);
        }
        outAMinusAdditiveexprPartPart(node);
    }

    public void inAMultiplicativeexpr(AMultiplicativeexpr node)
    {
        defaultIn(node);
    }

    public void outAMultiplicativeexpr(AMultiplicativeexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicativeexpr(AMultiplicativeexpr node)
    {
        inAMultiplicativeexpr(node);
        {
            List<PMultiplicativeexprPart> copy = new ArrayList<PMultiplicativeexprPart>(node.getMultiplicativeexprPart());
            Collections.reverse(copy);
            for(PMultiplicativeexprPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getUnionexpr() != null)
        {
            node.getUnionexpr().apply(this);
        }
        outAMultiplicativeexpr(node);
    }

    public void inAMultiplicativeexprPart(AMultiplicativeexprPart node)
    {
        defaultIn(node);
    }

    public void outAMultiplicativeexprPart(AMultiplicativeexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicativeexprPart(AMultiplicativeexprPart node)
    {
        inAMultiplicativeexprPart(node);
        if(node.getUnionexpr() != null)
        {
            node.getUnionexpr().apply(this);
        }
        if(node.getMultiplicativeexprPartPart() != null)
        {
            node.getMultiplicativeexprPartPart().apply(this);
        }
        outAMultiplicativeexprPart(node);
    }

    public void inAStarMultiplicativeexprPartPart(AStarMultiplicativeexprPartPart node)
    {
        defaultIn(node);
    }

    public void outAStarMultiplicativeexprPartPart(AStarMultiplicativeexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarMultiplicativeexprPartPart(AStarMultiplicativeexprPartPart node)
    {
        inAStarMultiplicativeexprPartPart(node);
        if(node.getStar2() != null)
        {
            node.getStar2().apply(this);
        }
        outAStarMultiplicativeexprPartPart(node);
    }

    public void inADivMultiplicativeexprPartPart(ADivMultiplicativeexprPartPart node)
    {
        defaultIn(node);
    }

    public void outADivMultiplicativeexprPartPart(ADivMultiplicativeexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMultiplicativeexprPartPart(ADivMultiplicativeexprPartPart node)
    {
        inADivMultiplicativeexprPartPart(node);
        if(node.getKeywordDiv() != null)
        {
            node.getKeywordDiv().apply(this);
        }
        outADivMultiplicativeexprPartPart(node);
    }

    public void inAIdivMultiplicativeexprPartPart(AIdivMultiplicativeexprPartPart node)
    {
        defaultIn(node);
    }

    public void outAIdivMultiplicativeexprPartPart(AIdivMultiplicativeexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdivMultiplicativeexprPartPart(AIdivMultiplicativeexprPartPart node)
    {
        inAIdivMultiplicativeexprPartPart(node);
        if(node.getKeywordIdiv() != null)
        {
            node.getKeywordIdiv().apply(this);
        }
        outAIdivMultiplicativeexprPartPart(node);
    }

    public void inAModMultiplicativeexprPartPart(AModMultiplicativeexprPartPart node)
    {
        defaultIn(node);
    }

    public void outAModMultiplicativeexprPartPart(AModMultiplicativeexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModMultiplicativeexprPartPart(AModMultiplicativeexprPartPart node)
    {
        inAModMultiplicativeexprPartPart(node);
        if(node.getKeywordMod() != null)
        {
            node.getKeywordMod().apply(this);
        }
        outAModMultiplicativeexprPartPart(node);
    }

    public void inAUnionexpr(AUnionexpr node)
    {
        defaultIn(node);
    }

    public void outAUnionexpr(AUnionexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnionexpr(AUnionexpr node)
    {
        inAUnionexpr(node);
        {
            List<PUnionexprPart> copy = new ArrayList<PUnionexprPart>(node.getUnionexprPart());
            Collections.reverse(copy);
            for(PUnionexprPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIntersectexceptexpr() != null)
        {
            node.getIntersectexceptexpr().apply(this);
        }
        outAUnionexpr(node);
    }

    public void inAUnionexprPart(AUnionexprPart node)
    {
        defaultIn(node);
    }

    public void outAUnionexprPart(AUnionexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnionexprPart(AUnionexprPart node)
    {
        inAUnionexprPart(node);
        if(node.getIntersectexceptexpr() != null)
        {
            node.getIntersectexceptexpr().apply(this);
        }
        if(node.getUnionexprPartPart() != null)
        {
            node.getUnionexprPartPart().apply(this);
        }
        outAUnionexprPart(node);
    }

    public void inAUnionkeyUnionexprPartPart(AUnionkeyUnionexprPartPart node)
    {
        defaultIn(node);
    }

    public void outAUnionkeyUnionexprPartPart(AUnionkeyUnionexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnionkeyUnionexprPartPart(AUnionkeyUnionexprPartPart node)
    {
        inAUnionkeyUnionexprPartPart(node);
        if(node.getKeywordUnion() != null)
        {
            node.getKeywordUnion().apply(this);
        }
        outAUnionkeyUnionexprPartPart(node);
    }

    public void inAUnionUnionexprPartPart(AUnionUnionexprPartPart node)
    {
        defaultIn(node);
    }

    public void outAUnionUnionexprPartPart(AUnionUnionexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnionUnionexprPartPart(AUnionUnionexprPartPart node)
    {
        inAUnionUnionexprPartPart(node);
        if(node.getUnion() != null)
        {
            node.getUnion().apply(this);
        }
        outAUnionUnionexprPartPart(node);
    }

    public void inAIntersectexceptexpr(AIntersectexceptexpr node)
    {
        defaultIn(node);
    }

    public void outAIntersectexceptexpr(AIntersectexceptexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntersectexceptexpr(AIntersectexceptexpr node)
    {
        inAIntersectexceptexpr(node);
        {
            List<PIntersectexceptexprPart> copy = new ArrayList<PIntersectexceptexprPart>(node.getIntersectexceptexprPart());
            Collections.reverse(copy);
            for(PIntersectexceptexprPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInstanceofexpr() != null)
        {
            node.getInstanceofexpr().apply(this);
        }
        outAIntersectexceptexpr(node);
    }

    public void inAIntersectexceptexprPart(AIntersectexceptexprPart node)
    {
        defaultIn(node);
    }

    public void outAIntersectexceptexprPart(AIntersectexceptexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntersectexceptexprPart(AIntersectexceptexprPart node)
    {
        inAIntersectexceptexprPart(node);
        if(node.getInstanceofexpr() != null)
        {
            node.getInstanceofexpr().apply(this);
        }
        if(node.getIntersectexceptexprPartPart() != null)
        {
            node.getIntersectexceptexprPartPart().apply(this);
        }
        outAIntersectexceptexprPart(node);
    }

    public void inAIntersectIntersectexceptexprPartPart(AIntersectIntersectexceptexprPartPart node)
    {
        defaultIn(node);
    }

    public void outAIntersectIntersectexceptexprPartPart(AIntersectIntersectexceptexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntersectIntersectexceptexprPartPart(AIntersectIntersectexceptexprPartPart node)
    {
        inAIntersectIntersectexceptexprPartPart(node);
        if(node.getKeywordIntersect() != null)
        {
            node.getKeywordIntersect().apply(this);
        }
        outAIntersectIntersectexceptexprPartPart(node);
    }

    public void inAExceptIntersectexceptexprPartPart(AExceptIntersectexceptexprPartPart node)
    {
        defaultIn(node);
    }

    public void outAExceptIntersectexceptexprPartPart(AExceptIntersectexceptexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExceptIntersectexceptexprPartPart(AExceptIntersectexceptexprPartPart node)
    {
        inAExceptIntersectexceptexprPartPart(node);
        if(node.getKeywordExcept() != null)
        {
            node.getKeywordExcept().apply(this);
        }
        outAExceptIntersectexceptexprPartPart(node);
    }

    public void inAInstanceofexpr(AInstanceofexpr node)
    {
        defaultIn(node);
    }

    public void outAInstanceofexpr(AInstanceofexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceofexpr(AInstanceofexpr node)
    {
        inAInstanceofexpr(node);
        if(node.getInstanceofexprPart() != null)
        {
            node.getInstanceofexprPart().apply(this);
        }
        if(node.getTreatexpr() != null)
        {
            node.getTreatexpr().apply(this);
        }
        outAInstanceofexpr(node);
    }

    public void inAInstanceofexprPart(AInstanceofexprPart node)
    {
        defaultIn(node);
    }

    public void outAInstanceofexprPart(AInstanceofexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanceofexprPart(AInstanceofexprPart node)
    {
        inAInstanceofexprPart(node);
        if(node.getSequencetype() != null)
        {
            node.getSequencetype().apply(this);
        }
        if(node.getKeywordOf() != null)
        {
            node.getKeywordOf().apply(this);
        }
        if(node.getKeywordInstance() != null)
        {
            node.getKeywordInstance().apply(this);
        }
        outAInstanceofexprPart(node);
    }

    public void inATreatexpr(ATreatexpr node)
    {
        defaultIn(node);
    }

    public void outATreatexpr(ATreatexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATreatexpr(ATreatexpr node)
    {
        inATreatexpr(node);
        if(node.getTreatexprPart() != null)
        {
            node.getTreatexprPart().apply(this);
        }
        if(node.getCastableexpr() != null)
        {
            node.getCastableexpr().apply(this);
        }
        outATreatexpr(node);
    }

    public void inATreatexprPart(ATreatexprPart node)
    {
        defaultIn(node);
    }

    public void outATreatexprPart(ATreatexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATreatexprPart(ATreatexprPart node)
    {
        inATreatexprPart(node);
        if(node.getSequencetype() != null)
        {
            node.getSequencetype().apply(this);
        }
        if(node.getKeywordAs() != null)
        {
            node.getKeywordAs().apply(this);
        }
        if(node.getKeywordTreat() != null)
        {
            node.getKeywordTreat().apply(this);
        }
        outATreatexprPart(node);
    }

    public void inACastableexpr(ACastableexpr node)
    {
        defaultIn(node);
    }

    public void outACastableexpr(ACastableexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACastableexpr(ACastableexpr node)
    {
        inACastableexpr(node);
        if(node.getCastableexprPart() != null)
        {
            node.getCastableexprPart().apply(this);
        }
        if(node.getCastexpr() != null)
        {
            node.getCastexpr().apply(this);
        }
        outACastableexpr(node);
    }

    public void inACastableexprPart(ACastableexprPart node)
    {
        defaultIn(node);
    }

    public void outACastableexprPart(ACastableexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACastableexprPart(ACastableexprPart node)
    {
        inACastableexprPart(node);
        if(node.getSingletype() != null)
        {
            node.getSingletype().apply(this);
        }
        if(node.getKeywordAs() != null)
        {
            node.getKeywordAs().apply(this);
        }
        if(node.getKeywordCastable() != null)
        {
            node.getKeywordCastable().apply(this);
        }
        outACastableexprPart(node);
    }

    public void inACastexpr(ACastexpr node)
    {
        defaultIn(node);
    }

    public void outACastexpr(ACastexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACastexpr(ACastexpr node)
    {
        inACastexpr(node);
        if(node.getCastexprPart() != null)
        {
            node.getCastexprPart().apply(this);
        }
        if(node.getUnaryexpr() != null)
        {
            node.getUnaryexpr().apply(this);
        }
        outACastexpr(node);
    }

    public void inACastexprPart(ACastexprPart node)
    {
        defaultIn(node);
    }

    public void outACastexprPart(ACastexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACastexprPart(ACastexprPart node)
    {
        inACastexprPart(node);
        if(node.getSingletype() != null)
        {
            node.getSingletype().apply(this);
        }
        if(node.getKeywordAs() != null)
        {
            node.getKeywordAs().apply(this);
        }
        if(node.getKeywordCast() != null)
        {
            node.getKeywordCast().apply(this);
        }
        outACastexprPart(node);
    }

    public void inAUnaryexpr(AUnaryexpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryexpr(AUnaryexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryexpr(AUnaryexpr node)
    {
        inAUnaryexpr(node);
        if(node.getValueexpr() != null)
        {
            node.getValueexpr().apply(this);
        }
        {
            List<PUnaryexprPart> copy = new ArrayList<PUnaryexprPart>(node.getUnaryexprPart());
            Collections.reverse(copy);
            for(PUnaryexprPart e : copy)
            {
                e.apply(this);
            }
        }
        outAUnaryexpr(node);
    }

    public void inAMinusUnaryexprPart(AMinusUnaryexprPart node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryexprPart(AMinusUnaryexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusUnaryexprPart(AMinusUnaryexprPart node)
    {
        inAMinusUnaryexprPart(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnaryexprPart(node);
    }

    public void inAPlusUnaryexprPart(APlusUnaryexprPart node)
    {
        defaultIn(node);
    }

    public void outAPlusUnaryexprPart(APlusUnaryexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusUnaryexprPart(APlusUnaryexprPart node)
    {
        inAPlusUnaryexprPart(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusUnaryexprPart(node);
    }

    public void inAValueexpr(AValueexpr node)
    {
        defaultIn(node);
    }

    public void outAValueexpr(AValueexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueexpr(AValueexpr node)
    {
        inAValueexpr(node);
        if(node.getPathexpr() != null)
        {
            node.getPathexpr().apply(this);
        }
        outAValueexpr(node);
    }

    public void inAEqGeneralcomp(AEqGeneralcomp node)
    {
        defaultIn(node);
    }

    public void outAEqGeneralcomp(AEqGeneralcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqGeneralcomp(AEqGeneralcomp node)
    {
        inAEqGeneralcomp(node);
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        outAEqGeneralcomp(node);
    }

    public void inANeGeneralcomp(ANeGeneralcomp node)
    {
        defaultIn(node);
    }

    public void outANeGeneralcomp(ANeGeneralcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeGeneralcomp(ANeGeneralcomp node)
    {
        inANeGeneralcomp(node);
        if(node.getNeAbbrev() != null)
        {
            node.getNeAbbrev().apply(this);
        }
        outANeGeneralcomp(node);
    }

    public void inALtGeneralcomp(ALtGeneralcomp node)
    {
        defaultIn(node);
    }

    public void outALtGeneralcomp(ALtGeneralcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtGeneralcomp(ALtGeneralcomp node)
    {
        inALtGeneralcomp(node);
        if(node.getLtAbbrev() != null)
        {
            node.getLtAbbrev().apply(this);
        }
        outALtGeneralcomp(node);
    }

    public void inALeGeneralcomp(ALeGeneralcomp node)
    {
        defaultIn(node);
    }

    public void outALeGeneralcomp(ALeGeneralcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeGeneralcomp(ALeGeneralcomp node)
    {
        inALeGeneralcomp(node);
        if(node.getLeAbbrev() != null)
        {
            node.getLeAbbrev().apply(this);
        }
        outALeGeneralcomp(node);
    }

    public void inAGtGeneralcomp(AGtGeneralcomp node)
    {
        defaultIn(node);
    }

    public void outAGtGeneralcomp(AGtGeneralcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtGeneralcomp(AGtGeneralcomp node)
    {
        inAGtGeneralcomp(node);
        if(node.getGtAbbrev() != null)
        {
            node.getGtAbbrev().apply(this);
        }
        outAGtGeneralcomp(node);
    }

    public void inAGeGeneralcomp(AGeGeneralcomp node)
    {
        defaultIn(node);
    }

    public void outAGeGeneralcomp(AGeGeneralcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeGeneralcomp(AGeGeneralcomp node)
    {
        inAGeGeneralcomp(node);
        if(node.getGeAbbrev() != null)
        {
            node.getGeAbbrev().apply(this);
        }
        outAGeGeneralcomp(node);
    }

    public void inAEqValuecomp(AEqValuecomp node)
    {
        defaultIn(node);
    }

    public void outAEqValuecomp(AEqValuecomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqValuecomp(AEqValuecomp node)
    {
        inAEqValuecomp(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqValuecomp(node);
    }

    public void inANeValuecomp(ANeValuecomp node)
    {
        defaultIn(node);
    }

    public void outANeValuecomp(ANeValuecomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeValuecomp(ANeValuecomp node)
    {
        inANeValuecomp(node);
        if(node.getNe() != null)
        {
            node.getNe().apply(this);
        }
        outANeValuecomp(node);
    }

    public void inALtValuecomp(ALtValuecomp node)
    {
        defaultIn(node);
    }

    public void outALtValuecomp(ALtValuecomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtValuecomp(ALtValuecomp node)
    {
        inALtValuecomp(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtValuecomp(node);
    }

    public void inALeValuecomp(ALeValuecomp node)
    {
        defaultIn(node);
    }

    public void outALeValuecomp(ALeValuecomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeValuecomp(ALeValuecomp node)
    {
        inALeValuecomp(node);
        if(node.getLe() != null)
        {
            node.getLe().apply(this);
        }
        outALeValuecomp(node);
    }

    public void inAGtValuecomp(AGtValuecomp node)
    {
        defaultIn(node);
    }

    public void outAGtValuecomp(AGtValuecomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtValuecomp(AGtValuecomp node)
    {
        inAGtValuecomp(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtValuecomp(node);
    }

    public void inAGeValuecomp(AGeValuecomp node)
    {
        defaultIn(node);
    }

    public void outAGeValuecomp(AGeValuecomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeValuecomp(AGeValuecomp node)
    {
        inAGeValuecomp(node);
        if(node.getGe() != null)
        {
            node.getGe().apply(this);
        }
        outAGeValuecomp(node);
    }

    public void inAIsNodecomp(AIsNodecomp node)
    {
        defaultIn(node);
    }

    public void outAIsNodecomp(AIsNodecomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsNodecomp(AIsNodecomp node)
    {
        inAIsNodecomp(node);
        if(node.getKeywordIs() != null)
        {
            node.getKeywordIs().apply(this);
        }
        outAIsNodecomp(node);
    }

    public void inANcomppreNodecomp(ANcomppreNodecomp node)
    {
        defaultIn(node);
    }

    public void outANcomppreNodecomp(ANcomppreNodecomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANcomppreNodecomp(ANcomppreNodecomp node)
    {
        inANcomppreNodecomp(node);
        if(node.getNcompPrecedes() != null)
        {
            node.getNcompPrecedes().apply(this);
        }
        outANcomppreNodecomp(node);
    }

    public void inANcompfolNodecomp(ANcompfolNodecomp node)
    {
        defaultIn(node);
    }

    public void outANcompfolNodecomp(ANcompfolNodecomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANcompfolNodecomp(ANcompfolNodecomp node)
    {
        inANcompfolNodecomp(node);
        if(node.getNcompFollows() != null)
        {
            node.getNcompFollows().apply(this);
        }
        outANcompfolNodecomp(node);
    }

    public void inAPath1Pathexpr(APath1Pathexpr node)
    {
        defaultIn(node);
    }

    public void outAPath1Pathexpr(APath1Pathexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPath1Pathexpr(APath1Pathexpr node)
    {
        inAPath1Pathexpr(node);
        if(node.getPathexprPartOne() != null)
        {
            node.getPathexprPartOne().apply(this);
        }
        outAPath1Pathexpr(node);
    }

    public void inAPath2Pathexpr(APath2Pathexpr node)
    {
        defaultIn(node);
    }

    public void outAPath2Pathexpr(APath2Pathexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPath2Pathexpr(APath2Pathexpr node)
    {
        inAPath2Pathexpr(node);
        if(node.getPathexprPartTwo() != null)
        {
            node.getPathexprPartTwo().apply(this);
        }
        outAPath2Pathexpr(node);
    }

    public void inARelpathPathexpr(ARelpathPathexpr node)
    {
        defaultIn(node);
    }

    public void outARelpathPathexpr(ARelpathPathexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelpathPathexpr(ARelpathPathexpr node)
    {
        inARelpathPathexpr(node);
        if(node.getRelativepathexpr() != null)
        {
            node.getRelativepathexpr().apply(this);
        }
        outARelpathPathexpr(node);
    }

    public void inAPathexprPartOne(APathexprPartOne node)
    {
        defaultIn(node);
    }

    public void outAPathexprPartOne(APathexprPartOne node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathexprPartOne(APathexprPartOne node)
    {
        inAPathexprPartOne(node);
        if(node.getRelativepathexpr() != null)
        {
            node.getRelativepathexpr().apply(this);
        }
        if(node.getAbbrevRoot() != null)
        {
            node.getAbbrevRoot().apply(this);
        }
        outAPathexprPartOne(node);
    }

    public void inAPathexprPartTwo(APathexprPartTwo node)
    {
        defaultIn(node);
    }

    public void outAPathexprPartTwo(APathexprPartTwo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathexprPartTwo(APathexprPartTwo node)
    {
        inAPathexprPartTwo(node);
        if(node.getRelativepathexpr() != null)
        {
            node.getRelativepathexpr().apply(this);
        }
        if(node.getAbbrevRootDesc() != null)
        {
            node.getAbbrevRootDesc().apply(this);
        }
        outAPathexprPartTwo(node);
    }

    public void inARelativepathexpr(ARelativepathexpr node)
    {
        defaultIn(node);
    }

    public void outARelativepathexpr(ARelativepathexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelativepathexpr(ARelativepathexpr node)
    {
        inARelativepathexpr(node);
        {
            List<PRelativepathexprPart> copy = new ArrayList<PRelativepathexprPart>(node.getRelativepathexprPart());
            Collections.reverse(copy);
            for(PRelativepathexprPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStepexpr() != null)
        {
            node.getStepexpr().apply(this);
        }
        outARelativepathexpr(node);
    }

    public void inARelativepathexprPart(ARelativepathexprPart node)
    {
        defaultIn(node);
    }

    public void outARelativepathexprPart(ARelativepathexprPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelativepathexprPart(ARelativepathexprPart node)
    {
        inARelativepathexprPart(node);
        if(node.getStepexpr() != null)
        {
            node.getStepexpr().apply(this);
        }
        if(node.getRelativepathexprPartPart() != null)
        {
            node.getRelativepathexprPartPart().apply(this);
        }
        outARelativepathexprPart(node);
    }

    public void inARootRelativepathexprPartPart(ARootRelativepathexprPartPart node)
    {
        defaultIn(node);
    }

    public void outARootRelativepathexprPartPart(ARootRelativepathexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARootRelativepathexprPartPart(ARootRelativepathexprPartPart node)
    {
        inARootRelativepathexprPartPart(node);
        if(node.getAbbrevRoot() != null)
        {
            node.getAbbrevRoot().apply(this);
        }
        outARootRelativepathexprPartPart(node);
    }

    public void inARootdescRelativepathexprPartPart(ARootdescRelativepathexprPartPart node)
    {
        defaultIn(node);
    }

    public void outARootdescRelativepathexprPartPart(ARootdescRelativepathexprPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARootdescRelativepathexprPartPart(ARootdescRelativepathexprPartPart node)
    {
        inARootdescRelativepathexprPartPart(node);
        if(node.getAbbrevRootDesc() != null)
        {
            node.getAbbrevRootDesc().apply(this);
        }
        outARootdescRelativepathexprPartPart(node);
    }

    public void inAFilterStepexpr(AFilterStepexpr node)
    {
        defaultIn(node);
    }

    public void outAFilterStepexpr(AFilterStepexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilterStepexpr(AFilterStepexpr node)
    {
        inAFilterStepexpr(node);
        if(node.getFilterexpr() != null)
        {
            node.getFilterexpr().apply(this);
        }
        outAFilterStepexpr(node);
    }

    public void inAAxisStepexpr(AAxisStepexpr node)
    {
        defaultIn(node);
    }

    public void outAAxisStepexpr(AAxisStepexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAxisStepexpr(AAxisStepexpr node)
    {
        inAAxisStepexpr(node);
        if(node.getAxisstep() != null)
        {
            node.getAxisstep().apply(this);
        }
        outAAxisStepexpr(node);
    }

    public void inAAxisstep(AAxisstep node)
    {
        defaultIn(node);
    }

    public void outAAxisstep(AAxisstep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAxisstep(AAxisstep node)
    {
        inAAxisstep(node);
        if(node.getPredicatelist() != null)
        {
            node.getPredicatelist().apply(this);
        }
        if(node.getAxisstepPart() != null)
        {
            node.getAxisstepPart().apply(this);
        }
        outAAxisstep(node);
    }

    public void inAReverseAxisstepPart(AReverseAxisstepPart node)
    {
        defaultIn(node);
    }

    public void outAReverseAxisstepPart(AReverseAxisstepPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverseAxisstepPart(AReverseAxisstepPart node)
    {
        inAReverseAxisstepPart(node);
        if(node.getReversestep() != null)
        {
            node.getReversestep().apply(this);
        }
        outAReverseAxisstepPart(node);
    }

    public void inAForwardAxisstepPart(AForwardAxisstepPart node)
    {
        defaultIn(node);
    }

    public void outAForwardAxisstepPart(AForwardAxisstepPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardAxisstepPart(AForwardAxisstepPart node)
    {
        inAForwardAxisstepPart(node);
        if(node.getForwardstep() != null)
        {
            node.getForwardstep().apply(this);
        }
        outAForwardAxisstepPart(node);
    }

    public void inAForwardForwardstep(AForwardForwardstep node)
    {
        defaultIn(node);
    }

    public void outAForwardForwardstep(AForwardForwardstep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardForwardstep(AForwardForwardstep node)
    {
        inAForwardForwardstep(node);
        if(node.getForwardstepPart() != null)
        {
            node.getForwardstepPart().apply(this);
        }
        outAForwardForwardstep(node);
    }

    public void inAAbbrevforwardForwardstep(AAbbrevforwardForwardstep node)
    {
        defaultIn(node);
    }

    public void outAAbbrevforwardForwardstep(AAbbrevforwardForwardstep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbbrevforwardForwardstep(AAbbrevforwardForwardstep node)
    {
        inAAbbrevforwardForwardstep(node);
        if(node.getAbbrevforwardstep() != null)
        {
            node.getAbbrevforwardstep().apply(this);
        }
        outAAbbrevforwardForwardstep(node);
    }

    public void inAForwardstepPart(AForwardstepPart node)
    {
        defaultIn(node);
    }

    public void outAForwardstepPart(AForwardstepPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardstepPart(AForwardstepPart node)
    {
        inAForwardstepPart(node);
        if(node.getNodetest() != null)
        {
            node.getNodetest().apply(this);
        }
        if(node.getForwardaxis() != null)
        {
            node.getForwardaxis().apply(this);
        }
        outAForwardstepPart(node);
    }

    public void inAForward1Forwardaxis(AForward1Forwardaxis node)
    {
        defaultIn(node);
    }

    public void outAForward1Forwardaxis(AForward1Forwardaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForward1Forwardaxis(AForward1Forwardaxis node)
    {
        inAForward1Forwardaxis(node);
        if(node.getForwardaxisPartOne() != null)
        {
            node.getForwardaxisPartOne().apply(this);
        }
        outAForward1Forwardaxis(node);
    }

    public void inAForward2Forwardaxis(AForward2Forwardaxis node)
    {
        defaultIn(node);
    }

    public void outAForward2Forwardaxis(AForward2Forwardaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForward2Forwardaxis(AForward2Forwardaxis node)
    {
        inAForward2Forwardaxis(node);
        if(node.getForwardaxisPartTwo() != null)
        {
            node.getForwardaxisPartTwo().apply(this);
        }
        outAForward2Forwardaxis(node);
    }

    public void inAForward3Forwardaxis(AForward3Forwardaxis node)
    {
        defaultIn(node);
    }

    public void outAForward3Forwardaxis(AForward3Forwardaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForward3Forwardaxis(AForward3Forwardaxis node)
    {
        inAForward3Forwardaxis(node);
        if(node.getForwardaxisPartThree() != null)
        {
            node.getForwardaxisPartThree().apply(this);
        }
        outAForward3Forwardaxis(node);
    }

    public void inAForward4Forwardaxis(AForward4Forwardaxis node)
    {
        defaultIn(node);
    }

    public void outAForward4Forwardaxis(AForward4Forwardaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForward4Forwardaxis(AForward4Forwardaxis node)
    {
        inAForward4Forwardaxis(node);
        if(node.getForwardaxisPartFour() != null)
        {
            node.getForwardaxisPartFour().apply(this);
        }
        outAForward4Forwardaxis(node);
    }

    public void inAForward5Forwardaxis(AForward5Forwardaxis node)
    {
        defaultIn(node);
    }

    public void outAForward5Forwardaxis(AForward5Forwardaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForward5Forwardaxis(AForward5Forwardaxis node)
    {
        inAForward5Forwardaxis(node);
        if(node.getForwardaxisPartFive() != null)
        {
            node.getForwardaxisPartFive().apply(this);
        }
        outAForward5Forwardaxis(node);
    }

    public void inAForward6Forwardaxis(AForward6Forwardaxis node)
    {
        defaultIn(node);
    }

    public void outAForward6Forwardaxis(AForward6Forwardaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForward6Forwardaxis(AForward6Forwardaxis node)
    {
        inAForward6Forwardaxis(node);
        if(node.getForwardaxisPartSix() != null)
        {
            node.getForwardaxisPartSix().apply(this);
        }
        outAForward6Forwardaxis(node);
    }

    public void inAForward7Forwardaxis(AForward7Forwardaxis node)
    {
        defaultIn(node);
    }

    public void outAForward7Forwardaxis(AForward7Forwardaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForward7Forwardaxis(AForward7Forwardaxis node)
    {
        inAForward7Forwardaxis(node);
        if(node.getForwardaxisPartSeven() != null)
        {
            node.getForwardaxisPartSeven().apply(this);
        }
        outAForward7Forwardaxis(node);
    }

    public void inAForward8Forwardaxis(AForward8Forwardaxis node)
    {
        defaultIn(node);
    }

    public void outAForward8Forwardaxis(AForward8Forwardaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForward8Forwardaxis(AForward8Forwardaxis node)
    {
        inAForward8Forwardaxis(node);
        if(node.getForwardaxisPartEight() != null)
        {
            node.getForwardaxisPartEight().apply(this);
        }
        outAForward8Forwardaxis(node);
    }

    public void inAForwardaxisPartOne(AForwardaxisPartOne node)
    {
        defaultIn(node);
    }

    public void outAForwardaxisPartOne(AForwardaxisPartOne node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardaxisPartOne(AForwardaxisPartOne node)
    {
        inAForwardaxisPartOne(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisChild() != null)
        {
            node.getAxisChild().apply(this);
        }
        outAForwardaxisPartOne(node);
    }

    public void inAForwardaxisPartTwo(AForwardaxisPartTwo node)
    {
        defaultIn(node);
    }

    public void outAForwardaxisPartTwo(AForwardaxisPartTwo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardaxisPartTwo(AForwardaxisPartTwo node)
    {
        inAForwardaxisPartTwo(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisDescendant() != null)
        {
            node.getAxisDescendant().apply(this);
        }
        outAForwardaxisPartTwo(node);
    }

    public void inAForwardaxisPartThree(AForwardaxisPartThree node)
    {
        defaultIn(node);
    }

    public void outAForwardaxisPartThree(AForwardaxisPartThree node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardaxisPartThree(AForwardaxisPartThree node)
    {
        inAForwardaxisPartThree(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisAttribute() != null)
        {
            node.getAxisAttribute().apply(this);
        }
        outAForwardaxisPartThree(node);
    }

    public void inAForwardaxisPartFour(AForwardaxisPartFour node)
    {
        defaultIn(node);
    }

    public void outAForwardaxisPartFour(AForwardaxisPartFour node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardaxisPartFour(AForwardaxisPartFour node)
    {
        inAForwardaxisPartFour(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisSelf() != null)
        {
            node.getAxisSelf().apply(this);
        }
        outAForwardaxisPartFour(node);
    }

    public void inAForwardaxisPartFive(AForwardaxisPartFive node)
    {
        defaultIn(node);
    }

    public void outAForwardaxisPartFive(AForwardaxisPartFive node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardaxisPartFive(AForwardaxisPartFive node)
    {
        inAForwardaxisPartFive(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisDescendantOrSelf() != null)
        {
            node.getAxisDescendantOrSelf().apply(this);
        }
        outAForwardaxisPartFive(node);
    }

    public void inAForwardaxisPartSix(AForwardaxisPartSix node)
    {
        defaultIn(node);
    }

    public void outAForwardaxisPartSix(AForwardaxisPartSix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardaxisPartSix(AForwardaxisPartSix node)
    {
        inAForwardaxisPartSix(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisFollowingSibling() != null)
        {
            node.getAxisFollowingSibling().apply(this);
        }
        outAForwardaxisPartSix(node);
    }

    public void inAForwardaxisPartSeven(AForwardaxisPartSeven node)
    {
        defaultIn(node);
    }

    public void outAForwardaxisPartSeven(AForwardaxisPartSeven node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardaxisPartSeven(AForwardaxisPartSeven node)
    {
        inAForwardaxisPartSeven(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisFollowing() != null)
        {
            node.getAxisFollowing().apply(this);
        }
        outAForwardaxisPartSeven(node);
    }

    public void inAForwardaxisPartEight(AForwardaxisPartEight node)
    {
        defaultIn(node);
    }

    public void outAForwardaxisPartEight(AForwardaxisPartEight node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForwardaxisPartEight(AForwardaxisPartEight node)
    {
        inAForwardaxisPartEight(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisNamespace() != null)
        {
            node.getAxisNamespace().apply(this);
        }
        outAForwardaxisPartEight(node);
    }

    public void inAAbbrevforwardstep(AAbbrevforwardstep node)
    {
        defaultIn(node);
    }

    public void outAAbbrevforwardstep(AAbbrevforwardstep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbbrevforwardstep(AAbbrevforwardstep node)
    {
        inAAbbrevforwardstep(node);
        if(node.getNodetest() != null)
        {
            node.getNodetest().apply(this);
        }
        if(node.getAbbrevAttrib() != null)
        {
            node.getAbbrevAttrib().apply(this);
        }
        outAAbbrevforwardstep(node);
    }

    public void inAReverseReversestep(AReverseReversestep node)
    {
        defaultIn(node);
    }

    public void outAReverseReversestep(AReverseReversestep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverseReversestep(AReverseReversestep node)
    {
        inAReverseReversestep(node);
        if(node.getReversestepPart() != null)
        {
            node.getReversestepPart().apply(this);
        }
        outAReverseReversestep(node);
    }

    public void inAAbbrevreverseReversestep(AAbbrevreverseReversestep node)
    {
        defaultIn(node);
    }

    public void outAAbbrevreverseReversestep(AAbbrevreverseReversestep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbbrevreverseReversestep(AAbbrevreverseReversestep node)
    {
        inAAbbrevreverseReversestep(node);
        if(node.getAbbrevreversestep() != null)
        {
            node.getAbbrevreversestep().apply(this);
        }
        outAAbbrevreverseReversestep(node);
    }

    public void inAReversestepPart(AReversestepPart node)
    {
        defaultIn(node);
    }

    public void outAReversestepPart(AReversestepPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReversestepPart(AReversestepPart node)
    {
        inAReversestepPart(node);
        if(node.getNodetest() != null)
        {
            node.getNodetest().apply(this);
        }
        if(node.getReverseaxis() != null)
        {
            node.getReverseaxis().apply(this);
        }
        outAReversestepPart(node);
    }

    public void inAReverse1Reverseaxis(AReverse1Reverseaxis node)
    {
        defaultIn(node);
    }

    public void outAReverse1Reverseaxis(AReverse1Reverseaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverse1Reverseaxis(AReverse1Reverseaxis node)
    {
        inAReverse1Reverseaxis(node);
        if(node.getReverseaxisPartOne() != null)
        {
            node.getReverseaxisPartOne().apply(this);
        }
        outAReverse1Reverseaxis(node);
    }

    public void inAReverse2Reverseaxis(AReverse2Reverseaxis node)
    {
        defaultIn(node);
    }

    public void outAReverse2Reverseaxis(AReverse2Reverseaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverse2Reverseaxis(AReverse2Reverseaxis node)
    {
        inAReverse2Reverseaxis(node);
        if(node.getReverseaxisPartTwo() != null)
        {
            node.getReverseaxisPartTwo().apply(this);
        }
        outAReverse2Reverseaxis(node);
    }

    public void inAReverse3Reverseaxis(AReverse3Reverseaxis node)
    {
        defaultIn(node);
    }

    public void outAReverse3Reverseaxis(AReverse3Reverseaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverse3Reverseaxis(AReverse3Reverseaxis node)
    {
        inAReverse3Reverseaxis(node);
        if(node.getReverseaxisPartThree() != null)
        {
            node.getReverseaxisPartThree().apply(this);
        }
        outAReverse3Reverseaxis(node);
    }

    public void inAReverse4Reverseaxis(AReverse4Reverseaxis node)
    {
        defaultIn(node);
    }

    public void outAReverse4Reverseaxis(AReverse4Reverseaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverse4Reverseaxis(AReverse4Reverseaxis node)
    {
        inAReverse4Reverseaxis(node);
        if(node.getReverseaxisPartFour() != null)
        {
            node.getReverseaxisPartFour().apply(this);
        }
        outAReverse4Reverseaxis(node);
    }

    public void inAReverse5Reverseaxis(AReverse5Reverseaxis node)
    {
        defaultIn(node);
    }

    public void outAReverse5Reverseaxis(AReverse5Reverseaxis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverse5Reverseaxis(AReverse5Reverseaxis node)
    {
        inAReverse5Reverseaxis(node);
        if(node.getReverseaxisPartFive() != null)
        {
            node.getReverseaxisPartFive().apply(this);
        }
        outAReverse5Reverseaxis(node);
    }

    public void inAReverseaxisPartOne(AReverseaxisPartOne node)
    {
        defaultIn(node);
    }

    public void outAReverseaxisPartOne(AReverseaxisPartOne node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverseaxisPartOne(AReverseaxisPartOne node)
    {
        inAReverseaxisPartOne(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisParent() != null)
        {
            node.getAxisParent().apply(this);
        }
        outAReverseaxisPartOne(node);
    }

    public void inAReverseaxisPartTwo(AReverseaxisPartTwo node)
    {
        defaultIn(node);
    }

    public void outAReverseaxisPartTwo(AReverseaxisPartTwo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverseaxisPartTwo(AReverseaxisPartTwo node)
    {
        inAReverseaxisPartTwo(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisAncestor() != null)
        {
            node.getAxisAncestor().apply(this);
        }
        outAReverseaxisPartTwo(node);
    }

    public void inAReverseaxisPartThree(AReverseaxisPartThree node)
    {
        defaultIn(node);
    }

    public void outAReverseaxisPartThree(AReverseaxisPartThree node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverseaxisPartThree(AReverseaxisPartThree node)
    {
        inAReverseaxisPartThree(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisPrecedingSibling() != null)
        {
            node.getAxisPrecedingSibling().apply(this);
        }
        outAReverseaxisPartThree(node);
    }

    public void inAReverseaxisPartFour(AReverseaxisPartFour node)
    {
        defaultIn(node);
    }

    public void outAReverseaxisPartFour(AReverseaxisPartFour node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverseaxisPartFour(AReverseaxisPartFour node)
    {
        inAReverseaxisPartFour(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisPreceding() != null)
        {
            node.getAxisPreceding().apply(this);
        }
        outAReverseaxisPartFour(node);
    }

    public void inAReverseaxisPartFive(AReverseaxisPartFive node)
    {
        defaultIn(node);
    }

    public void outAReverseaxisPartFive(AReverseaxisPartFive node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverseaxisPartFive(AReverseaxisPartFive node)
    {
        inAReverseaxisPartFive(node);
        if(node.getAxisDelim() != null)
        {
            node.getAxisDelim().apply(this);
        }
        if(node.getAxisAncestorOrSelf() != null)
        {
            node.getAxisAncestorOrSelf().apply(this);
        }
        outAReverseaxisPartFive(node);
    }

    public void inAAbbrevreversestep(AAbbrevreversestep node)
    {
        defaultIn(node);
    }

    public void outAAbbrevreversestep(AAbbrevreversestep node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbbrevreversestep(AAbbrevreversestep node)
    {
        inAAbbrevreversestep(node);
        if(node.getAbbrevReversestep() != null)
        {
            node.getAbbrevReversestep().apply(this);
        }
        outAAbbrevreversestep(node);
    }

    public void inAKindNodetest(AKindNodetest node)
    {
        defaultIn(node);
    }

    public void outAKindNodetest(AKindNodetest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKindNodetest(AKindNodetest node)
    {
        inAKindNodetest(node);
        if(node.getKindtest() != null)
        {
            node.getKindtest().apply(this);
        }
        outAKindNodetest(node);
    }

    public void inANameNodetest(ANameNodetest node)
    {
        defaultIn(node);
    }

    public void outANameNodetest(ANameNodetest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameNodetest(ANameNodetest node)
    {
        inANameNodetest(node);
        if(node.getNametest() != null)
        {
            node.getNametest().apply(this);
        }
        outANameNodetest(node);
    }

    public void inAQnameNametest(AQnameNametest node)
    {
        defaultIn(node);
    }

    public void outAQnameNametest(AQnameNametest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQnameNametest(AQnameNametest node)
    {
        inAQnameNametest(node);
        if(node.getQname() != null)
        {
            node.getQname().apply(this);
        }
        outAQnameNametest(node);
    }

    public void inAWildcNametest(AWildcNametest node)
    {
        defaultIn(node);
    }

    public void outAWildcNametest(AWildcNametest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcNametest(AWildcNametest node)
    {
        inAWildcNametest(node);
        if(node.getWildcard() != null)
        {
            node.getWildcard().apply(this);
        }
        outAWildcNametest(node);
    }

    public void inAStarWildcard(AStarWildcard node)
    {
        defaultIn(node);
    }

    public void outAStarWildcard(AStarWildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarWildcard(AStarWildcard node)
    {
        inAStarWildcard(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarWildcard(node);
    }

    public void inAWild1Wildcard(AWild1Wildcard node)
    {
        defaultIn(node);
    }

    public void outAWild1Wildcard(AWild1Wildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWild1Wildcard(AWild1Wildcard node)
    {
        inAWild1Wildcard(node);
        if(node.getWildcardPartOne() != null)
        {
            node.getWildcardPartOne().apply(this);
        }
        outAWild1Wildcard(node);
    }

    public void inAWild2Wildcard(AWild2Wildcard node)
    {
        defaultIn(node);
    }

    public void outAWild2Wildcard(AWild2Wildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWild2Wildcard(AWild2Wildcard node)
    {
        inAWild2Wildcard(node);
        if(node.getWildcardPartTwo() != null)
        {
            node.getWildcardPartTwo().apply(this);
        }
        outAWild2Wildcard(node);
    }

    public void inAWildcardPartOne(AWildcardPartOne node)
    {
        defaultIn(node);
    }

    public void outAWildcardPartOne(AWildcardPartOne node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardPartOne(AWildcardPartOne node)
    {
        inAWildcardPartOne(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getNcname() != null)
        {
            node.getNcname().apply(this);
        }
        outAWildcardPartOne(node);
    }

    public void inAWildcardPartTwo(AWildcardPartTwo node)
    {
        defaultIn(node);
    }

    public void outAWildcardPartTwo(AWildcardPartTwo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardPartTwo(AWildcardPartTwo node)
    {
        inAWildcardPartTwo(node);
        if(node.getNcname() != null)
        {
            node.getNcname().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAWildcardPartTwo(node);
    }

    public void inAFilterexpr(AFilterexpr node)
    {
        defaultIn(node);
    }

    public void outAFilterexpr(AFilterexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilterexpr(AFilterexpr node)
    {
        inAFilterexpr(node);
        if(node.getPredicatelist() != null)
        {
            node.getPredicatelist().apply(this);
        }
        if(node.getPrimaryexpr() != null)
        {
            node.getPrimaryexpr().apply(this);
        }
        outAFilterexpr(node);
    }

    public void inAPredicatelist(APredicatelist node)
    {
        defaultIn(node);
    }

    public void outAPredicatelist(APredicatelist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPredicatelist(APredicatelist node)
    {
        inAPredicatelist(node);
        {
            List<PPredicate> copy = new ArrayList<PPredicate>(node.getPredicate());
            Collections.reverse(copy);
            for(PPredicate e : copy)
            {
                e.apply(this);
            }
        }
        outAPredicatelist(node);
    }

    public void inAPredicate(APredicate node)
    {
        defaultIn(node);
    }

    public void outAPredicate(APredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPredicate(APredicate node)
    {
        inAPredicate(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        outAPredicate(node);
    }

    public void inALiteralPrimaryexpr(ALiteralPrimaryexpr node)
    {
        defaultIn(node);
    }

    public void outALiteralPrimaryexpr(ALiteralPrimaryexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralPrimaryexpr(ALiteralPrimaryexpr node)
    {
        inALiteralPrimaryexpr(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralPrimaryexpr(node);
    }

    public void inAVarrefPrimaryexpr(AVarrefPrimaryexpr node)
    {
        defaultIn(node);
    }

    public void outAVarrefPrimaryexpr(AVarrefPrimaryexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarrefPrimaryexpr(AVarrefPrimaryexpr node)
    {
        inAVarrefPrimaryexpr(node);
        if(node.getVarref() != null)
        {
            node.getVarref().apply(this);
        }
        outAVarrefPrimaryexpr(node);
    }

    public void inAParenthexPrimaryexpr(AParenthexPrimaryexpr node)
    {
        defaultIn(node);
    }

    public void outAParenthexPrimaryexpr(AParenthexPrimaryexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthexPrimaryexpr(AParenthexPrimaryexpr node)
    {
        inAParenthexPrimaryexpr(node);
        if(node.getParenthesizedexpr() != null)
        {
            node.getParenthesizedexpr().apply(this);
        }
        outAParenthexPrimaryexpr(node);
    }

    public void inAContextexPrimaryexpr(AContextexPrimaryexpr node)
    {
        defaultIn(node);
    }

    public void outAContextexPrimaryexpr(AContextexPrimaryexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContextexPrimaryexpr(AContextexPrimaryexpr node)
    {
        inAContextexPrimaryexpr(node);
        if(node.getContextitemexpr() != null)
        {
            node.getContextitemexpr().apply(this);
        }
        outAContextexPrimaryexpr(node);
    }

    public void inAFunctionPrimaryexpr(AFunctionPrimaryexpr node)
    {
        defaultIn(node);
    }

    public void outAFunctionPrimaryexpr(AFunctionPrimaryexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionPrimaryexpr(AFunctionPrimaryexpr node)
    {
        inAFunctionPrimaryexpr(node);
        if(node.getFunctioncall() != null)
        {
            node.getFunctioncall().apply(this);
        }
        outAFunctionPrimaryexpr(node);
    }

    public void inANumericLiteral(ANumericLiteral node)
    {
        defaultIn(node);
    }

    public void outANumericLiteral(ANumericLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericLiteral(ANumericLiteral node)
    {
        inANumericLiteral(node);
        if(node.getNumericliteral() != null)
        {
            node.getNumericliteral().apply(this);
        }
        outANumericLiteral(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getStringliteral() != null)
        {
            node.getStringliteral().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inAIntegerNumericliteral(AIntegerNumericliteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerNumericliteral(AIntegerNumericliteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerNumericliteral(AIntegerNumericliteral node)
    {
        inAIntegerNumericliteral(node);
        if(node.getIntegerliteral() != null)
        {
            node.getIntegerliteral().apply(this);
        }
        outAIntegerNumericliteral(node);
    }

    public void inADecimalNumericliteral(ADecimalNumericliteral node)
    {
        defaultIn(node);
    }

    public void outADecimalNumericliteral(ADecimalNumericliteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecimalNumericliteral(ADecimalNumericliteral node)
    {
        inADecimalNumericliteral(node);
        if(node.getDecimalliteral() != null)
        {
            node.getDecimalliteral().apply(this);
        }
        outADecimalNumericliteral(node);
    }

    public void inADoubleNumericliteral(ADoubleNumericliteral node)
    {
        defaultIn(node);
    }

    public void outADoubleNumericliteral(ADoubleNumericliteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleNumericliteral(ADoubleNumericliteral node)
    {
        inADoubleNumericliteral(node);
        if(node.getDoubleliteral() != null)
        {
            node.getDoubleliteral().apply(this);
        }
        outADoubleNumericliteral(node);
    }

    public void inAVarref(AVarref node)
    {
        defaultIn(node);
    }

    public void outAVarref(AVarref node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarref(AVarref node)
    {
        inAVarref(node);
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getDollar() != null)
        {
            node.getDollar().apply(this);
        }
        outAVarref(node);
    }

    public void inAVarname(AVarname node)
    {
        defaultIn(node);
    }

    public void outAVarname(AVarname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarname(AVarname node)
    {
        inAVarname(node);
        if(node.getQname() != null)
        {
            node.getQname().apply(this);
        }
        outAVarname(node);
    }

    public void inAParenthesizedexpr(AParenthesizedexpr node)
    {
        defaultIn(node);
    }

    public void outAParenthesizedexpr(AParenthesizedexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesizedexpr(AParenthesizedexpr node)
    {
        inAParenthesizedexpr(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        outAParenthesizedexpr(node);
    }

    public void inAContextitemexpr(AContextitemexpr node)
    {
        defaultIn(node);
    }

    public void outAContextitemexpr(AContextitemexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContextitemexpr(AContextitemexpr node)
    {
        inAContextitemexpr(node);
        if(node.getAbbrevContext() != null)
        {
            node.getAbbrevContext().apply(this);
        }
        outAContextitemexpr(node);
    }

    public void inAFunctioncall(AFunctioncall node)
    {
        defaultIn(node);
    }

    public void outAFunctioncall(AFunctioncall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctioncall(AFunctioncall node)
    {
        inAFunctioncall(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getFunctioncallPart() != null)
        {
            node.getFunctioncallPart().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getQname() != null)
        {
            node.getQname().apply(this);
        }
        outAFunctioncall(node);
    }

    public void inAFunctioncallPart(AFunctioncallPart node)
    {
        defaultIn(node);
    }

    public void outAFunctioncallPart(AFunctioncallPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctioncallPart(AFunctioncallPart node)
    {
        inAFunctioncallPart(node);
        {
            List<PFunctioncallPartPart> copy = new ArrayList<PFunctioncallPartPart>(node.getFunctioncallPartPart());
            Collections.reverse(copy);
            for(PFunctioncallPartPart e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExprsingle() != null)
        {
            node.getExprsingle().apply(this);
        }
        outAFunctioncallPart(node);
    }

    public void inAFunctioncallPartPart(AFunctioncallPartPart node)
    {
        defaultIn(node);
    }

    public void outAFunctioncallPartPart(AFunctioncallPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctioncallPartPart(AFunctioncallPartPart node)
    {
        inAFunctioncallPartPart(node);
        if(node.getExprsingle() != null)
        {
            node.getExprsingle().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAFunctioncallPartPart(node);
    }

    public void inASingletype(ASingletype node)
    {
        defaultIn(node);
    }

    public void outASingletype(ASingletype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingletype(ASingletype node)
    {
        inASingletype(node);
        if(node.getQuestion() != null)
        {
            node.getQuestion().apply(this);
        }
        if(node.getAtomictype() != null)
        {
            node.getAtomictype().apply(this);
        }
        outASingletype(node);
    }

    public void inASequencetype1Sequencetype(ASequencetype1Sequencetype node)
    {
        defaultIn(node);
    }

    public void outASequencetype1Sequencetype(ASequencetype1Sequencetype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequencetype1Sequencetype(ASequencetype1Sequencetype node)
    {
        inASequencetype1Sequencetype(node);
        if(node.getSequencetypePartOne() != null)
        {
            node.getSequencetypePartOne().apply(this);
        }
        outASequencetype1Sequencetype(node);
    }

    public void inASequencetype2Sequencetype(ASequencetype2Sequencetype node)
    {
        defaultIn(node);
    }

    public void outASequencetype2Sequencetype(ASequencetype2Sequencetype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequencetype2Sequencetype(ASequencetype2Sequencetype node)
    {
        inASequencetype2Sequencetype(node);
        if(node.getSequencetypePartTwo() != null)
        {
            node.getSequencetypePartTwo().apply(this);
        }
        outASequencetype2Sequencetype(node);
    }

    public void inASequencetypePartOne(ASequencetypePartOne node)
    {
        defaultIn(node);
    }

    public void outASequencetypePartOne(ASequencetypePartOne node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequencetypePartOne(ASequencetypePartOne node)
    {
        inASequencetypePartOne(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getFnEmptySequence() != null)
        {
            node.getFnEmptySequence().apply(this);
        }
        outASequencetypePartOne(node);
    }

    public void inASequencetypePartTwo(ASequencetypePartTwo node)
    {
        defaultIn(node);
    }

    public void outASequencetypePartTwo(ASequencetypePartTwo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequencetypePartTwo(ASequencetypePartTwo node)
    {
        inASequencetypePartTwo(node);
        if(node.getOccurrenceindicator() != null)
        {
            node.getOccurrenceindicator().apply(this);
        }
        if(node.getItemtype() != null)
        {
            node.getItemtype().apply(this);
        }
        outASequencetypePartTwo(node);
    }

    public void inAQuestionOccurrenceindicator(AQuestionOccurrenceindicator node)
    {
        defaultIn(node);
    }

    public void outAQuestionOccurrenceindicator(AQuestionOccurrenceindicator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuestionOccurrenceindicator(AQuestionOccurrenceindicator node)
    {
        inAQuestionOccurrenceindicator(node);
        if(node.getQuestion() != null)
        {
            node.getQuestion().apply(this);
        }
        outAQuestionOccurrenceindicator(node);
    }

    public void inAStarOccurrenceindicator(AStarOccurrenceindicator node)
    {
        defaultIn(node);
    }

    public void outAStarOccurrenceindicator(AStarOccurrenceindicator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarOccurrenceindicator(AStarOccurrenceindicator node)
    {
        inAStarOccurrenceindicator(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarOccurrenceindicator(node);
    }

    public void inAPlusOccurrenceindicator(APlusOccurrenceindicator node)
    {
        defaultIn(node);
    }

    public void outAPlusOccurrenceindicator(APlusOccurrenceindicator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOccurrenceindicator(APlusOccurrenceindicator node)
    {
        inAPlusOccurrenceindicator(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusOccurrenceindicator(node);
    }

    public void inAKindItemtype(AKindItemtype node)
    {
        defaultIn(node);
    }

    public void outAKindItemtype(AKindItemtype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKindItemtype(AKindItemtype node)
    {
        inAKindItemtype(node);
        if(node.getKindtest() != null)
        {
            node.getKindtest().apply(this);
        }
        outAKindItemtype(node);
    }

    public void inAItemItemtype(AItemItemtype node)
    {
        defaultIn(node);
    }

    public void outAItemItemtype(AItemItemtype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAItemItemtype(AItemItemtype node)
    {
        inAItemItemtype(node);
        if(node.getItemtypePart() != null)
        {
            node.getItemtypePart().apply(this);
        }
        outAItemItemtype(node);
    }

    public void inAAtomicItemtype(AAtomicItemtype node)
    {
        defaultIn(node);
    }

    public void outAAtomicItemtype(AAtomicItemtype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtomicItemtype(AAtomicItemtype node)
    {
        inAAtomicItemtype(node);
        if(node.getAtomictype() != null)
        {
            node.getAtomictype().apply(this);
        }
        outAAtomicItemtype(node);
    }

    public void inAItemtypePart(AItemtypePart node)
    {
        defaultIn(node);
    }

    public void outAItemtypePart(AItemtypePart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAItemtypePart(AItemtypePart node)
    {
        inAItemtypePart(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getFnItem() != null)
        {
            node.getFnItem().apply(this);
        }
        outAItemtypePart(node);
    }

    public void inAAtomictype(AAtomictype node)
    {
        defaultIn(node);
    }

    public void outAAtomictype(AAtomictype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtomictype(AAtomictype node)
    {
        inAAtomictype(node);
        if(node.getQname() != null)
        {
            node.getQname().apply(this);
        }
        outAAtomictype(node);
    }

    public void inADocumentKindtest(ADocumentKindtest node)
    {
        defaultIn(node);
    }

    public void outADocumentKindtest(ADocumentKindtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADocumentKindtest(ADocumentKindtest node)
    {
        inADocumentKindtest(node);
        if(node.getDocumenttest() != null)
        {
            node.getDocumenttest().apply(this);
        }
        outADocumentKindtest(node);
    }

    public void inAElementKindtest(AElementKindtest node)
    {
        defaultIn(node);
    }

    public void outAElementKindtest(AElementKindtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementKindtest(AElementKindtest node)
    {
        inAElementKindtest(node);
        if(node.getElementtest() != null)
        {
            node.getElementtest().apply(this);
        }
        outAElementKindtest(node);
    }

    public void inAAttributeKindtest(AAttributeKindtest node)
    {
        defaultIn(node);
    }

    public void outAAttributeKindtest(AAttributeKindtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributeKindtest(AAttributeKindtest node)
    {
        inAAttributeKindtest(node);
        if(node.getAttributetest() != null)
        {
            node.getAttributetest().apply(this);
        }
        outAAttributeKindtest(node);
    }

    public void inASchemaelemKindtest(ASchemaelemKindtest node)
    {
        defaultIn(node);
    }

    public void outASchemaelemKindtest(ASchemaelemKindtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASchemaelemKindtest(ASchemaelemKindtest node)
    {
        inASchemaelemKindtest(node);
        if(node.getSchemaelementtest() != null)
        {
            node.getSchemaelementtest().apply(this);
        }
        outASchemaelemKindtest(node);
    }

    public void inASchemaattrKindtest(ASchemaattrKindtest node)
    {
        defaultIn(node);
    }

    public void outASchemaattrKindtest(ASchemaattrKindtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASchemaattrKindtest(ASchemaattrKindtest node)
    {
        inASchemaattrKindtest(node);
        if(node.getSchemaattributetest() != null)
        {
            node.getSchemaattributetest().apply(this);
        }
        outASchemaattrKindtest(node);
    }

    public void inAPiKindtest(APiKindtest node)
    {
        defaultIn(node);
    }

    public void outAPiKindtest(APiKindtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPiKindtest(APiKindtest node)
    {
        inAPiKindtest(node);
        if(node.getPitest() != null)
        {
            node.getPitest().apply(this);
        }
        outAPiKindtest(node);
    }

    public void inACommentKindtest(ACommentKindtest node)
    {
        defaultIn(node);
    }

    public void outACommentKindtest(ACommentKindtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommentKindtest(ACommentKindtest node)
    {
        inACommentKindtest(node);
        if(node.getCommenttest() != null)
        {
            node.getCommenttest().apply(this);
        }
        outACommentKindtest(node);
    }

    public void inATextKindtest(ATextKindtest node)
    {
        defaultIn(node);
    }

    public void outATextKindtest(ATextKindtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextKindtest(ATextKindtest node)
    {
        inATextKindtest(node);
        if(node.getTexttest() != null)
        {
            node.getTexttest().apply(this);
        }
        outATextKindtest(node);
    }

    public void inAAnyKindtest(AAnyKindtest node)
    {
        defaultIn(node);
    }

    public void outAAnyKindtest(AAnyKindtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnyKindtest(AAnyKindtest node)
    {
        inAAnyKindtest(node);
        if(node.getAkindtest() != null)
        {
            node.getAkindtest().apply(this);
        }
        outAAnyKindtest(node);
    }

    public void inAAkindtest(AAkindtest node)
    {
        defaultIn(node);
    }

    public void outAAkindtest(AAkindtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAkindtest(AAkindtest node)
    {
        inAAkindtest(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getFnNode() != null)
        {
            node.getFnNode().apply(this);
        }
        outAAkindtest(node);
    }

    public void inADocumenttest(ADocumenttest node)
    {
        defaultIn(node);
    }

    public void outADocumenttest(ADocumenttest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADocumenttest(ADocumenttest node)
    {
        inADocumenttest(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getDocumenttestPart() != null)
        {
            node.getDocumenttestPart().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getFnDocumentNode() != null)
        {
            node.getFnDocumentNode().apply(this);
        }
        outADocumenttest(node);
    }

    public void inAElementDocumenttestPart(AElementDocumenttestPart node)
    {
        defaultIn(node);
    }

    public void outAElementDocumenttestPart(AElementDocumenttestPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementDocumenttestPart(AElementDocumenttestPart node)
    {
        inAElementDocumenttestPart(node);
        if(node.getElementtest() != null)
        {
            node.getElementtest().apply(this);
        }
        outAElementDocumenttestPart(node);
    }

    public void inASchemaelemDocumenttestPart(ASchemaelemDocumenttestPart node)
    {
        defaultIn(node);
    }

    public void outASchemaelemDocumenttestPart(ASchemaelemDocumenttestPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASchemaelemDocumenttestPart(ASchemaelemDocumenttestPart node)
    {
        inASchemaelemDocumenttestPart(node);
        if(node.getSchemaelementtest() != null)
        {
            node.getSchemaelementtest().apply(this);
        }
        outASchemaelemDocumenttestPart(node);
    }

    public void inATexttest(ATexttest node)
    {
        defaultIn(node);
    }

    public void outATexttest(ATexttest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATexttest(ATexttest node)
    {
        inATexttest(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getFnText() != null)
        {
            node.getFnText().apply(this);
        }
        outATexttest(node);
    }

    public void inACommenttest(ACommenttest node)
    {
        defaultIn(node);
    }

    public void outACommenttest(ACommenttest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommenttest(ACommenttest node)
    {
        inACommenttest(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getFnComment() != null)
        {
            node.getFnComment().apply(this);
        }
        outACommenttest(node);
    }

    public void inAPitest(APitest node)
    {
        defaultIn(node);
    }

    public void outAPitest(APitest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPitest(APitest node)
    {
        inAPitest(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getPitestPart() != null)
        {
            node.getPitestPart().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getFnProcessingInstruction() != null)
        {
            node.getFnProcessingInstruction().apply(this);
        }
        outAPitest(node);
    }

    public void inANcnamePitestPart(ANcnamePitestPart node)
    {
        defaultIn(node);
    }

    public void outANcnamePitestPart(ANcnamePitestPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANcnamePitestPart(ANcnamePitestPart node)
    {
        inANcnamePitestPart(node);
        if(node.getNcname() != null)
        {
            node.getNcname().apply(this);
        }
        outANcnamePitestPart(node);
    }

    public void inAStringlitPitestPart(AStringlitPitestPart node)
    {
        defaultIn(node);
    }

    public void outAStringlitPitestPart(AStringlitPitestPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringlitPitestPart(AStringlitPitestPart node)
    {
        inAStringlitPitestPart(node);
        if(node.getStringliteral() != null)
        {
            node.getStringliteral().apply(this);
        }
        outAStringlitPitestPart(node);
    }

    public void inAAttributetest(AAttributetest node)
    {
        defaultIn(node);
    }

    public void outAAttributetest(AAttributetest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributetest(AAttributetest node)
    {
        inAAttributetest(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getAttributetestPart() != null)
        {
            node.getAttributetestPart().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getAxisAttribute() != null)
        {
            node.getAxisAttribute().apply(this);
        }
        outAAttributetest(node);
    }

    public void inAAttributetestPart(AAttributetestPart node)
    {
        defaultIn(node);
    }

    public void outAAttributetestPart(AAttributetestPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributetestPart(AAttributetestPart node)
    {
        inAAttributetestPart(node);
        if(node.getAttributetestPartPart() != null)
        {
            node.getAttributetestPartPart().apply(this);
        }
        if(node.getAttribnameorwildcard() != null)
        {
            node.getAttribnameorwildcard().apply(this);
        }
        outAAttributetestPart(node);
    }

    public void inAAttributetestPartPart(AAttributetestPartPart node)
    {
        defaultIn(node);
    }

    public void outAAttributetestPartPart(AAttributetestPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributetestPartPart(AAttributetestPartPart node)
    {
        inAAttributetestPartPart(node);
        if(node.getTypename() != null)
        {
            node.getTypename().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAAttributetestPartPart(node);
    }

    public void inAAttribAttribnameorwildcard(AAttribAttribnameorwildcard node)
    {
        defaultIn(node);
    }

    public void outAAttribAttribnameorwildcard(AAttribAttribnameorwildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttribAttribnameorwildcard(AAttribAttribnameorwildcard node)
    {
        inAAttribAttribnameorwildcard(node);
        if(node.getAttributename() != null)
        {
            node.getAttributename().apply(this);
        }
        outAAttribAttribnameorwildcard(node);
    }

    public void inAStarAttribnameorwildcard(AStarAttribnameorwildcard node)
    {
        defaultIn(node);
    }

    public void outAStarAttribnameorwildcard(AStarAttribnameorwildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarAttribnameorwildcard(AStarAttribnameorwildcard node)
    {
        inAStarAttribnameorwildcard(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarAttribnameorwildcard(node);
    }

    public void inASchemaattributetest(ASchemaattributetest node)
    {
        defaultIn(node);
    }

    public void outASchemaattributetest(ASchemaattributetest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASchemaattributetest(ASchemaattributetest node)
    {
        inASchemaattributetest(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getAttributedeclaration() != null)
        {
            node.getAttributedeclaration().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getFnSchemaAttribute() != null)
        {
            node.getFnSchemaAttribute().apply(this);
        }
        outASchemaattributetest(node);
    }

    public void inAAttributedeclaration(AAttributedeclaration node)
    {
        defaultIn(node);
    }

    public void outAAttributedeclaration(AAttributedeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributedeclaration(AAttributedeclaration node)
    {
        inAAttributedeclaration(node);
        if(node.getAttributename() != null)
        {
            node.getAttributename().apply(this);
        }
        outAAttributedeclaration(node);
    }

    public void inAElementtest(AElementtest node)
    {
        defaultIn(node);
    }

    public void outAElementtest(AElementtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementtest(AElementtest node)
    {
        inAElementtest(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getElementtestPart() != null)
        {
            node.getElementtestPart().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getFnElement() != null)
        {
            node.getFnElement().apply(this);
        }
        outAElementtest(node);
    }

    public void inAElementtestPart(AElementtestPart node)
    {
        defaultIn(node);
    }

    public void outAElementtestPart(AElementtestPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementtestPart(AElementtestPart node)
    {
        inAElementtestPart(node);
        if(node.getElementtestPartPart() != null)
        {
            node.getElementtestPartPart().apply(this);
        }
        if(node.getElementnameorwildcard() != null)
        {
            node.getElementnameorwildcard().apply(this);
        }
        outAElementtestPart(node);
    }

    public void inAElementtestPartPart(AElementtestPartPart node)
    {
        defaultIn(node);
    }

    public void outAElementtestPartPart(AElementtestPartPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementtestPartPart(AElementtestPartPart node)
    {
        inAElementtestPartPart(node);
        if(node.getQuestion() != null)
        {
            node.getQuestion().apply(this);
        }
        if(node.getTypename() != null)
        {
            node.getTypename().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAElementtestPartPart(node);
    }

    public void inAElementElementnameorwildcard(AElementElementnameorwildcard node)
    {
        defaultIn(node);
    }

    public void outAElementElementnameorwildcard(AElementElementnameorwildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementElementnameorwildcard(AElementElementnameorwildcard node)
    {
        inAElementElementnameorwildcard(node);
        if(node.getElementname() != null)
        {
            node.getElementname().apply(this);
        }
        outAElementElementnameorwildcard(node);
    }

    public void inAStarElementnameorwildcard(AStarElementnameorwildcard node)
    {
        defaultIn(node);
    }

    public void outAStarElementnameorwildcard(AStarElementnameorwildcard node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarElementnameorwildcard(AStarElementnameorwildcard node)
    {
        inAStarElementnameorwildcard(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarElementnameorwildcard(node);
    }

    public void inASchemaelementtest(ASchemaelementtest node)
    {
        defaultIn(node);
    }

    public void outASchemaelementtest(ASchemaelementtest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASchemaelementtest(ASchemaelementtest node)
    {
        inASchemaelementtest(node);
        if(node.getRparenth() != null)
        {
            node.getRparenth().apply(this);
        }
        if(node.getElementdeclaration() != null)
        {
            node.getElementdeclaration().apply(this);
        }
        if(node.getLparenth() != null)
        {
            node.getLparenth().apply(this);
        }
        if(node.getFnSchemaElement() != null)
        {
            node.getFnSchemaElement().apply(this);
        }
        outASchemaelementtest(node);
    }

    public void inAElementdeclaration(AElementdeclaration node)
    {
        defaultIn(node);
    }

    public void outAElementdeclaration(AElementdeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementdeclaration(AElementdeclaration node)
    {
        inAElementdeclaration(node);
        if(node.getElementname() != null)
        {
            node.getElementname().apply(this);
        }
        outAElementdeclaration(node);
    }

    public void inAAttributename(AAttributename node)
    {
        defaultIn(node);
    }

    public void outAAttributename(AAttributename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributename(AAttributename node)
    {
        inAAttributename(node);
        if(node.getQname() != null)
        {
            node.getQname().apply(this);
        }
        outAAttributename(node);
    }

    public void inAElementname(AElementname node)
    {
        defaultIn(node);
    }

    public void outAElementname(AElementname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementname(AElementname node)
    {
        inAElementname(node);
        if(node.getQname() != null)
        {
            node.getQname().apply(this);
        }
        outAElementname(node);
    }

    public void inATypename(ATypename node)
    {
        defaultIn(node);
    }

    public void outATypename(ATypename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypename(ATypename node)
    {
        inATypename(node);
        if(node.getQname() != null)
        {
            node.getQname().apply(this);
        }
        outATypename(node);
    }

    public void inAPrefixedQname(APrefixedQname node)
    {
        defaultIn(node);
    }

    public void outAPrefixedQname(APrefixedQname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrefixedQname(APrefixedQname node)
    {
        inAPrefixedQname(node);
        if(node.getPrefixedname() != null)
        {
            node.getPrefixedname().apply(this);
        }
        outAPrefixedQname(node);
    }

    public void inAUnprefixedQname(AUnprefixedQname node)
    {
        defaultIn(node);
    }

    public void outAUnprefixedQname(AUnprefixedQname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnprefixedQname(AUnprefixedQname node)
    {
        inAUnprefixedQname(node);
        if(node.getUnprefixedname() != null)
        {
            node.getUnprefixedname().apply(this);
        }
        outAUnprefixedQname(node);
    }

    public void inAPrefixedname(APrefixedname node)
    {
        defaultIn(node);
    }

    public void outAPrefixedname(APrefixedname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrefixedname(APrefixedname node)
    {
        inAPrefixedname(node);
        if(node.getLocalpart() != null)
        {
            node.getLocalpart().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getPrefix() != null)
        {
            node.getPrefix().apply(this);
        }
        outAPrefixedname(node);
    }

    public void inAUnprefixedname(AUnprefixedname node)
    {
        defaultIn(node);
    }

    public void outAUnprefixedname(AUnprefixedname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnprefixedname(AUnprefixedname node)
    {
        inAUnprefixedname(node);
        if(node.getLocalpart() != null)
        {
            node.getLocalpart().apply(this);
        }
        outAUnprefixedname(node);
    }

    public void inAPrefix(APrefix node)
    {
        defaultIn(node);
    }

    public void outAPrefix(APrefix node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrefix(APrefix node)
    {
        inAPrefix(node);
        if(node.getNcname() != null)
        {
            node.getNcname().apply(this);
        }
        outAPrefix(node);
    }

    public void inALocalpart(ALocalpart node)
    {
        defaultIn(node);
    }

    public void outALocalpart(ALocalpart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalpart(ALocalpart node)
    {
        inALocalpart(node);
        if(node.getNcname() != null)
        {
            node.getNcname().apply(this);
        }
        outALocalpart(node);
    }

    public void inAPrefixedNsattname(APrefixedNsattname node)
    {
        defaultIn(node);
    }

    public void outAPrefixedNsattname(APrefixedNsattname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrefixedNsattname(APrefixedNsattname node)
    {
        inAPrefixedNsattname(node);
        if(node.getPrefixedattname() != null)
        {
            node.getPrefixedattname().apply(this);
        }
        outAPrefixedNsattname(node);
    }

    public void inADefaultNsattname(ADefaultNsattname node)
    {
        defaultIn(node);
    }

    public void outADefaultNsattname(ADefaultNsattname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultNsattname(ADefaultNsattname node)
    {
        inADefaultNsattname(node);
        if(node.getDefaultattname() != null)
        {
            node.getDefaultattname().apply(this);
        }
        outADefaultNsattname(node);
    }

    public void inAPrefixedattname(APrefixedattname node)
    {
        defaultIn(node);
    }

    public void outAPrefixedattname(APrefixedattname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrefixedattname(APrefixedattname node)
    {
        inAPrefixedattname(node);
        if(node.getNcname() != null)
        {
            node.getNcname().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getXmlns() != null)
        {
            node.getXmlns().apply(this);
        }
        outAPrefixedattname(node);
    }

    public void inADefaultattname(ADefaultattname node)
    {
        defaultIn(node);
    }

    public void outADefaultattname(ADefaultattname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultattname(ADefaultattname node)
    {
        inADefaultattname(node);
        if(node.getXmlns() != null)
        {
            node.getXmlns().apply(this);
        }
        outADefaultattname(node);
    }

    public void inANcname(ANcname node)
    {
        defaultIn(node);
    }

    public void outANcname(ANcname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANcname(ANcname node)
    {
        inANcname(node);
        {
            List<TNcnamechar> copy = new ArrayList<TNcnamechar>(node.getNcnamechar());
            Collections.reverse(copy);
            for(TNcnamechar e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNcnamestartchar() != null)
        {
            node.getNcnamestartchar().apply(this);
        }
        outANcname(node);
    }

    public void inALetterNcnamestartchar(ALetterNcnamestartchar node)
    {
        defaultIn(node);
    }

    public void outALetterNcnamestartchar(ALetterNcnamestartchar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALetterNcnamestartchar(ALetterNcnamestartchar node)
    {
        inALetterNcnamestartchar(node);
        if(node.getLetter() != null)
        {
            node.getLetter().apply(this);
        }
        outALetterNcnamestartchar(node);
    }

    public void inAUnderscoreNcnamestartchar(AUnderscoreNcnamestartchar node)
    {
        defaultIn(node);
    }

    public void outAUnderscoreNcnamestartchar(AUnderscoreNcnamestartchar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnderscoreNcnamestartchar(AUnderscoreNcnamestartchar node)
    {
        inAUnderscoreNcnamestartchar(node);
        if(node.getUnderscore() != null)
        {
            node.getUnderscore().apply(this);
        }
        outAUnderscoreNcnamestartchar(node);
    }
}
