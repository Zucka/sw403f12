/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import java.util.*;
import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AUnaryexpr extends PUnaryexpr
{
    private final LinkedList<PUnaryexprPart> _unaryexprPart_ = new LinkedList<PUnaryexprPart>();
    private PValueexpr _valueexpr_;

    public AUnaryexpr()
    {
        // Constructor
    }

    public AUnaryexpr(
        @SuppressWarnings("hiding") List<PUnaryexprPart> _unaryexprPart_,
        @SuppressWarnings("hiding") PValueexpr _valueexpr_)
    {
        // Constructor
        setUnaryexprPart(_unaryexprPart_);

        setValueexpr(_valueexpr_);

    }

    @Override
    public Object clone()
    {
        return new AUnaryexpr(
            cloneList(this._unaryexprPart_),
            cloneNode(this._valueexpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnaryexpr(this);
    }

    public LinkedList<PUnaryexprPart> getUnaryexprPart()
    {
        return this._unaryexprPart_;
    }

    public void setUnaryexprPart(List<PUnaryexprPart> list)
    {
        this._unaryexprPart_.clear();
        this._unaryexprPart_.addAll(list);
        for(PUnaryexprPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PValueexpr getValueexpr()
    {
        return this._valueexpr_;
    }

    public void setValueexpr(PValueexpr node)
    {
        if(this._valueexpr_ != null)
        {
            this._valueexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._valueexpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._unaryexprPart_)
            + toString(this._valueexpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._unaryexprPart_.remove(child))
        {
            return;
        }

        if(this._valueexpr_ == child)
        {
            this._valueexpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PUnaryexprPart> i = this._unaryexprPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PUnaryexprPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._valueexpr_ == oldChild)
        {
            setValueexpr((PValueexpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
