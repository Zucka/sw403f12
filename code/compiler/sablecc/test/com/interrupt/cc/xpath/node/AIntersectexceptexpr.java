/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import java.util.*;
import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AIntersectexceptexpr extends PIntersectexceptexpr
{
    private PInstanceofexpr _instanceofexpr_;
    private final LinkedList<PIntersectexceptexprPart> _intersectexceptexprPart_ = new LinkedList<PIntersectexceptexprPart>();

    public AIntersectexceptexpr()
    {
        // Constructor
    }

    public AIntersectexceptexpr(
        @SuppressWarnings("hiding") PInstanceofexpr _instanceofexpr_,
        @SuppressWarnings("hiding") List<PIntersectexceptexprPart> _intersectexceptexprPart_)
    {
        // Constructor
        setInstanceofexpr(_instanceofexpr_);

        setIntersectexceptexprPart(_intersectexceptexprPart_);

    }

    @Override
    public Object clone()
    {
        return new AIntersectexceptexpr(
            cloneNode(this._instanceofexpr_),
            cloneList(this._intersectexceptexprPart_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIntersectexceptexpr(this);
    }

    public PInstanceofexpr getInstanceofexpr()
    {
        return this._instanceofexpr_;
    }

    public void setInstanceofexpr(PInstanceofexpr node)
    {
        if(this._instanceofexpr_ != null)
        {
            this._instanceofexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instanceofexpr_ = node;
    }

    public LinkedList<PIntersectexceptexprPart> getIntersectexceptexprPart()
    {
        return this._intersectexceptexprPart_;
    }

    public void setIntersectexceptexprPart(List<PIntersectexceptexprPart> list)
    {
        this._intersectexceptexprPart_.clear();
        this._intersectexceptexprPart_.addAll(list);
        for(PIntersectexceptexprPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._instanceofexpr_)
            + toString(this._intersectexceptexprPart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._instanceofexpr_ == child)
        {
            this._instanceofexpr_ = null;
            return;
        }

        if(this._intersectexceptexprPart_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._instanceofexpr_ == oldChild)
        {
            setInstanceofexpr((PInstanceofexpr) newChild);
            return;
        }

        for(ListIterator<PIntersectexceptexprPart> i = this._intersectexceptexprPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PIntersectexceptexprPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
