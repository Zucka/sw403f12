/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AAbbrevreverseReversestep extends PReversestep
{
    private PAbbrevreversestep _abbrevreversestep_;

    public AAbbrevreverseReversestep()
    {
        // Constructor
    }

    public AAbbrevreverseReversestep(
        @SuppressWarnings("hiding") PAbbrevreversestep _abbrevreversestep_)
    {
        // Constructor
        setAbbrevreversestep(_abbrevreversestep_);

    }

    @Override
    public Object clone()
    {
        return new AAbbrevreverseReversestep(
            cloneNode(this._abbrevreversestep_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAbbrevreverseReversestep(this);
    }

    public PAbbrevreversestep getAbbrevreversestep()
    {
        return this._abbrevreversestep_;
    }

    public void setAbbrevreversestep(PAbbrevreversestep node)
    {
        if(this._abbrevreversestep_ != null)
        {
            this._abbrevreversestep_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._abbrevreversestep_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._abbrevreversestep_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._abbrevreversestep_ == child)
        {
            this._abbrevreversestep_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._abbrevreversestep_ == oldChild)
        {
            setAbbrevreversestep((PAbbrevreversestep) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
