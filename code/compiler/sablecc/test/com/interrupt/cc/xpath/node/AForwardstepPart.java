/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AForwardstepPart extends PForwardstepPart
{
    private PForwardaxis _forwardaxis_;
    private PNodetest _nodetest_;

    public AForwardstepPart()
    {
        // Constructor
    }

    public AForwardstepPart(
        @SuppressWarnings("hiding") PForwardaxis _forwardaxis_,
        @SuppressWarnings("hiding") PNodetest _nodetest_)
    {
        // Constructor
        setForwardaxis(_forwardaxis_);

        setNodetest(_nodetest_);

    }

    @Override
    public Object clone()
    {
        return new AForwardstepPart(
            cloneNode(this._forwardaxis_),
            cloneNode(this._nodetest_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForwardstepPart(this);
    }

    public PForwardaxis getForwardaxis()
    {
        return this._forwardaxis_;
    }

    public void setForwardaxis(PForwardaxis node)
    {
        if(this._forwardaxis_ != null)
        {
            this._forwardaxis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._forwardaxis_ = node;
    }

    public PNodetest getNodetest()
    {
        return this._nodetest_;
    }

    public void setNodetest(PNodetest node)
    {
        if(this._nodetest_ != null)
        {
            this._nodetest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nodetest_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._forwardaxis_)
            + toString(this._nodetest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._forwardaxis_ == child)
        {
            this._forwardaxis_ = null;
            return;
        }

        if(this._nodetest_ == child)
        {
            this._nodetest_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._forwardaxis_ == oldChild)
        {
            setForwardaxis((PForwardaxis) newChild);
            return;
        }

        if(this._nodetest_ == oldChild)
        {
            setNodetest((PNodetest) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
