/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import java.util.*;
import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AExpr extends PExpr
{
    private PExprsingle _exprsingle_;
    private final LinkedList<PExprPart> _exprPart_ = new LinkedList<PExprPart>();

    public AExpr()
    {
        // Constructor
    }

    public AExpr(
        @SuppressWarnings("hiding") PExprsingle _exprsingle_,
        @SuppressWarnings("hiding") List<PExprPart> _exprPart_)
    {
        // Constructor
        setExprsingle(_exprsingle_);

        setExprPart(_exprPart_);

    }

    @Override
    public Object clone()
    {
        return new AExpr(
            cloneNode(this._exprsingle_),
            cloneList(this._exprPart_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpr(this);
    }

    public PExprsingle getExprsingle()
    {
        return this._exprsingle_;
    }

    public void setExprsingle(PExprsingle node)
    {
        if(this._exprsingle_ != null)
        {
            this._exprsingle_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprsingle_ = node;
    }

    public LinkedList<PExprPart> getExprPart()
    {
        return this._exprPart_;
    }

    public void setExprPart(List<PExprPart> list)
    {
        this._exprPart_.clear();
        this._exprPart_.addAll(list);
        for(PExprPart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exprsingle_)
            + toString(this._exprPart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exprsingle_ == child)
        {
            this._exprsingle_ = null;
            return;
        }

        if(this._exprPart_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exprsingle_ == oldChild)
        {
            setExprsingle((PExprsingle) newChild);
            return;
        }

        for(ListIterator<PExprPart> i = this._exprPart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExprPart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
