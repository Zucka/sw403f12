/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import java.util.*;
import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class ASimpleforclause extends PSimpleforclause
{
    private TKeywordFor _keywordFor_;
    private TDollar _dollar_;
    private PVarname _varname_;
    private TKeywordIn _keywordIn_;
    private PExprsingle _exprsingle_;
    private final LinkedList<PSimpleforclausePart> _simpleforclausePart_ = new LinkedList<PSimpleforclausePart>();

    public ASimpleforclause()
    {
        // Constructor
    }

    public ASimpleforclause(
        @SuppressWarnings("hiding") TKeywordFor _keywordFor_,
        @SuppressWarnings("hiding") TDollar _dollar_,
        @SuppressWarnings("hiding") PVarname _varname_,
        @SuppressWarnings("hiding") TKeywordIn _keywordIn_,
        @SuppressWarnings("hiding") PExprsingle _exprsingle_,
        @SuppressWarnings("hiding") List<PSimpleforclausePart> _simpleforclausePart_)
    {
        // Constructor
        setKeywordFor(_keywordFor_);

        setDollar(_dollar_);

        setVarname(_varname_);

        setKeywordIn(_keywordIn_);

        setExprsingle(_exprsingle_);

        setSimpleforclausePart(_simpleforclausePart_);

    }

    @Override
    public Object clone()
    {
        return new ASimpleforclause(
            cloneNode(this._keywordFor_),
            cloneNode(this._dollar_),
            cloneNode(this._varname_),
            cloneNode(this._keywordIn_),
            cloneNode(this._exprsingle_),
            cloneList(this._simpleforclausePart_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleforclause(this);
    }

    public TKeywordFor getKeywordFor()
    {
        return this._keywordFor_;
    }

    public void setKeywordFor(TKeywordFor node)
    {
        if(this._keywordFor_ != null)
        {
            this._keywordFor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordFor_ = node;
    }

    public TDollar getDollar()
    {
        return this._dollar_;
    }

    public void setDollar(TDollar node)
    {
        if(this._dollar_ != null)
        {
            this._dollar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dollar_ = node;
    }

    public PVarname getVarname()
    {
        return this._varname_;
    }

    public void setVarname(PVarname node)
    {
        if(this._varname_ != null)
        {
            this._varname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varname_ = node;
    }

    public TKeywordIn getKeywordIn()
    {
        return this._keywordIn_;
    }

    public void setKeywordIn(TKeywordIn node)
    {
        if(this._keywordIn_ != null)
        {
            this._keywordIn_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordIn_ = node;
    }

    public PExprsingle getExprsingle()
    {
        return this._exprsingle_;
    }

    public void setExprsingle(PExprsingle node)
    {
        if(this._exprsingle_ != null)
        {
            this._exprsingle_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprsingle_ = node;
    }

    public LinkedList<PSimpleforclausePart> getSimpleforclausePart()
    {
        return this._simpleforclausePart_;
    }

    public void setSimpleforclausePart(List<PSimpleforclausePart> list)
    {
        this._simpleforclausePart_.clear();
        this._simpleforclausePart_.addAll(list);
        for(PSimpleforclausePart e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._keywordFor_)
            + toString(this._dollar_)
            + toString(this._varname_)
            + toString(this._keywordIn_)
            + toString(this._exprsingle_)
            + toString(this._simpleforclausePart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._keywordFor_ == child)
        {
            this._keywordFor_ = null;
            return;
        }

        if(this._dollar_ == child)
        {
            this._dollar_ = null;
            return;
        }

        if(this._varname_ == child)
        {
            this._varname_ = null;
            return;
        }

        if(this._keywordIn_ == child)
        {
            this._keywordIn_ = null;
            return;
        }

        if(this._exprsingle_ == child)
        {
            this._exprsingle_ = null;
            return;
        }

        if(this._simpleforclausePart_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._keywordFor_ == oldChild)
        {
            setKeywordFor((TKeywordFor) newChild);
            return;
        }

        if(this._dollar_ == oldChild)
        {
            setDollar((TDollar) newChild);
            return;
        }

        if(this._varname_ == oldChild)
        {
            setVarname((PVarname) newChild);
            return;
        }

        if(this._keywordIn_ == oldChild)
        {
            setKeywordIn((TKeywordIn) newChild);
            return;
        }

        if(this._exprsingle_ == oldChild)
        {
            setExprsingle((PExprsingle) newChild);
            return;
        }

        for(ListIterator<PSimpleforclausePart> i = this._simpleforclausePart_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSimpleforclausePart) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
