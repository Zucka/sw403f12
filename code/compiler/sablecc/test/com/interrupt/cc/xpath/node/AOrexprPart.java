/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AOrexprPart extends POrexprPart
{
    private TKeywordOr _keywordOr_;
    private PAndexpr _andexpr_;

    public AOrexprPart()
    {
        // Constructor
    }

    public AOrexprPart(
        @SuppressWarnings("hiding") TKeywordOr _keywordOr_,
        @SuppressWarnings("hiding") PAndexpr _andexpr_)
    {
        // Constructor
        setKeywordOr(_keywordOr_);

        setAndexpr(_andexpr_);

    }

    @Override
    public Object clone()
    {
        return new AOrexprPart(
            cloneNode(this._keywordOr_),
            cloneNode(this._andexpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrexprPart(this);
    }

    public TKeywordOr getKeywordOr()
    {
        return this._keywordOr_;
    }

    public void setKeywordOr(TKeywordOr node)
    {
        if(this._keywordOr_ != null)
        {
            this._keywordOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordOr_ = node;
    }

    public PAndexpr getAndexpr()
    {
        return this._andexpr_;
    }

    public void setAndexpr(PAndexpr node)
    {
        if(this._andexpr_ != null)
        {
            this._andexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._andexpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._keywordOr_)
            + toString(this._andexpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._keywordOr_ == child)
        {
            this._keywordOr_ = null;
            return;
        }

        if(this._andexpr_ == child)
        {
            this._andexpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._keywordOr_ == oldChild)
        {
            setKeywordOr((TKeywordOr) newChild);
            return;
        }

        if(this._andexpr_ == oldChild)
        {
            setAndexpr((PAndexpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
