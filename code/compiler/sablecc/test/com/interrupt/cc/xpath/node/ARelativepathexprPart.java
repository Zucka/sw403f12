/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class ARelativepathexprPart extends PRelativepathexprPart
{
    private PRelativepathexprPartPart _relativepathexprPartPart_;
    private PStepexpr _stepexpr_;

    public ARelativepathexprPart()
    {
        // Constructor
    }

    public ARelativepathexprPart(
        @SuppressWarnings("hiding") PRelativepathexprPartPart _relativepathexprPartPart_,
        @SuppressWarnings("hiding") PStepexpr _stepexpr_)
    {
        // Constructor
        setRelativepathexprPartPart(_relativepathexprPartPart_);

        setStepexpr(_stepexpr_);

    }

    @Override
    public Object clone()
    {
        return new ARelativepathexprPart(
            cloneNode(this._relativepathexprPartPart_),
            cloneNode(this._stepexpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARelativepathexprPart(this);
    }

    public PRelativepathexprPartPart getRelativepathexprPartPart()
    {
        return this._relativepathexprPartPart_;
    }

    public void setRelativepathexprPartPart(PRelativepathexprPartPart node)
    {
        if(this._relativepathexprPartPart_ != null)
        {
            this._relativepathexprPartPart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relativepathexprPartPart_ = node;
    }

    public PStepexpr getStepexpr()
    {
        return this._stepexpr_;
    }

    public void setStepexpr(PStepexpr node)
    {
        if(this._stepexpr_ != null)
        {
            this._stepexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stepexpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._relativepathexprPartPart_)
            + toString(this._stepexpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._relativepathexprPartPart_ == child)
        {
            this._relativepathexprPartPart_ = null;
            return;
        }

        if(this._stepexpr_ == child)
        {
            this._stepexpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._relativepathexprPartPart_ == oldChild)
        {
            setRelativepathexprPartPart((PRelativepathexprPartPart) newChild);
            return;
        }

        if(this._stepexpr_ == oldChild)
        {
            setStepexpr((PStepexpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
