/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.analysis;

import com.interrupt.cc.xpath.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAXpath(AXpath node);
    void caseAExpr(AExpr node);
    void caseAExprPart(AExprPart node);
    void caseAForExprsingle(AForExprsingle node);
    void caseAQuantifExprsingle(AQuantifExprsingle node);
    void caseAIfExprsingle(AIfExprsingle node);
    void caseAOrExprsingle(AOrExprsingle node);
    void caseAForexpr(AForexpr node);
    void caseASimpleforclause(ASimpleforclause node);
    void caseASimpleforclausePart(ASimpleforclausePart node);
    void caseAQuantifiedexpr(AQuantifiedexpr node);
    void caseASomeSomeEveryPart(ASomeSomeEveryPart node);
    void caseAEverySomeEveryPart(AEverySomeEveryPart node);
    void caseAQuantifiedexprPart(AQuantifiedexprPart node);
    void caseAIfexpr(AIfexpr node);
    void caseAOrexpr(AOrexpr node);
    void caseAOrexprPart(AOrexprPart node);
    void caseAAndexpr(AAndexpr node);
    void caseAAndexprPart(AAndexprPart node);
    void caseAComparisonexpr(AComparisonexpr node);
    void caseAComparisonexprPart(AComparisonexprPart node);
    void caseAValueComparisonexprPartPart(AValueComparisonexprPartPart node);
    void caseAGeneralComparisonexprPartPart(AGeneralComparisonexprPartPart node);
    void caseANodeComparisonexprPartPart(ANodeComparisonexprPartPart node);
    void caseARangeexpr(ARangeexpr node);
    void caseARangeexprPart(ARangeexprPart node);
    void caseAAdditiveexpr(AAdditiveexpr node);
    void caseAAdditiveexprPart(AAdditiveexprPart node);
    void caseAPlusAdditiveexprPartPart(APlusAdditiveexprPartPart node);
    void caseAMinusAdditiveexprPartPart(AMinusAdditiveexprPartPart node);
    void caseAMultiplicativeexpr(AMultiplicativeexpr node);
    void caseAMultiplicativeexprPart(AMultiplicativeexprPart node);
    void caseAStarMultiplicativeexprPartPart(AStarMultiplicativeexprPartPart node);
    void caseADivMultiplicativeexprPartPart(ADivMultiplicativeexprPartPart node);
    void caseAIdivMultiplicativeexprPartPart(AIdivMultiplicativeexprPartPart node);
    void caseAModMultiplicativeexprPartPart(AModMultiplicativeexprPartPart node);
    void caseAUnionexpr(AUnionexpr node);
    void caseAUnionexprPart(AUnionexprPart node);
    void caseAUnionkeyUnionexprPartPart(AUnionkeyUnionexprPartPart node);
    void caseAUnionUnionexprPartPart(AUnionUnionexprPartPart node);
    void caseAIntersectexceptexpr(AIntersectexceptexpr node);
    void caseAIntersectexceptexprPart(AIntersectexceptexprPart node);
    void caseAIntersectIntersectexceptexprPartPart(AIntersectIntersectexceptexprPartPart node);
    void caseAExceptIntersectexceptexprPartPart(AExceptIntersectexceptexprPartPart node);
    void caseAInstanceofexpr(AInstanceofexpr node);
    void caseAInstanceofexprPart(AInstanceofexprPart node);
    void caseATreatexpr(ATreatexpr node);
    void caseATreatexprPart(ATreatexprPart node);
    void caseACastableexpr(ACastableexpr node);
    void caseACastableexprPart(ACastableexprPart node);
    void caseACastexpr(ACastexpr node);
    void caseACastexprPart(ACastexprPart node);
    void caseAUnaryexpr(AUnaryexpr node);
    void caseAMinusUnaryexprPart(AMinusUnaryexprPart node);
    void caseAPlusUnaryexprPart(APlusUnaryexprPart node);
    void caseAValueexpr(AValueexpr node);
    void caseAEqGeneralcomp(AEqGeneralcomp node);
    void caseANeGeneralcomp(ANeGeneralcomp node);
    void caseALtGeneralcomp(ALtGeneralcomp node);
    void caseALeGeneralcomp(ALeGeneralcomp node);
    void caseAGtGeneralcomp(AGtGeneralcomp node);
    void caseAGeGeneralcomp(AGeGeneralcomp node);
    void caseAEqValuecomp(AEqValuecomp node);
    void caseANeValuecomp(ANeValuecomp node);
    void caseALtValuecomp(ALtValuecomp node);
    void caseALeValuecomp(ALeValuecomp node);
    void caseAGtValuecomp(AGtValuecomp node);
    void caseAGeValuecomp(AGeValuecomp node);
    void caseAIsNodecomp(AIsNodecomp node);
    void caseANcomppreNodecomp(ANcomppreNodecomp node);
    void caseANcompfolNodecomp(ANcompfolNodecomp node);
    void caseAPath1Pathexpr(APath1Pathexpr node);
    void caseAPath2Pathexpr(APath2Pathexpr node);
    void caseARelpathPathexpr(ARelpathPathexpr node);
    void caseAPathexprPartOne(APathexprPartOne node);
    void caseAPathexprPartTwo(APathexprPartTwo node);
    void caseARelativepathexpr(ARelativepathexpr node);
    void caseARelativepathexprPart(ARelativepathexprPart node);
    void caseARootRelativepathexprPartPart(ARootRelativepathexprPartPart node);
    void caseARootdescRelativepathexprPartPart(ARootdescRelativepathexprPartPart node);
    void caseAFilterStepexpr(AFilterStepexpr node);
    void caseAAxisStepexpr(AAxisStepexpr node);
    void caseAAxisstep(AAxisstep node);
    void caseAReverseAxisstepPart(AReverseAxisstepPart node);
    void caseAForwardAxisstepPart(AForwardAxisstepPart node);
    void caseAForwardForwardstep(AForwardForwardstep node);
    void caseAAbbrevforwardForwardstep(AAbbrevforwardForwardstep node);
    void caseAForwardstepPart(AForwardstepPart node);
    void caseAForward1Forwardaxis(AForward1Forwardaxis node);
    void caseAForward2Forwardaxis(AForward2Forwardaxis node);
    void caseAForward3Forwardaxis(AForward3Forwardaxis node);
    void caseAForward4Forwardaxis(AForward4Forwardaxis node);
    void caseAForward5Forwardaxis(AForward5Forwardaxis node);
    void caseAForward6Forwardaxis(AForward6Forwardaxis node);
    void caseAForward7Forwardaxis(AForward7Forwardaxis node);
    void caseAForward8Forwardaxis(AForward8Forwardaxis node);
    void caseAForwardaxisPartOne(AForwardaxisPartOne node);
    void caseAForwardaxisPartTwo(AForwardaxisPartTwo node);
    void caseAForwardaxisPartThree(AForwardaxisPartThree node);
    void caseAForwardaxisPartFour(AForwardaxisPartFour node);
    void caseAForwardaxisPartFive(AForwardaxisPartFive node);
    void caseAForwardaxisPartSix(AForwardaxisPartSix node);
    void caseAForwardaxisPartSeven(AForwardaxisPartSeven node);
    void caseAForwardaxisPartEight(AForwardaxisPartEight node);
    void caseAAbbrevforwardstep(AAbbrevforwardstep node);
    void caseAReverseReversestep(AReverseReversestep node);
    void caseAAbbrevreverseReversestep(AAbbrevreverseReversestep node);
    void caseAReversestepPart(AReversestepPart node);
    void caseAReverse1Reverseaxis(AReverse1Reverseaxis node);
    void caseAReverse2Reverseaxis(AReverse2Reverseaxis node);
    void caseAReverse3Reverseaxis(AReverse3Reverseaxis node);
    void caseAReverse4Reverseaxis(AReverse4Reverseaxis node);
    void caseAReverse5Reverseaxis(AReverse5Reverseaxis node);
    void caseAReverseaxisPartOne(AReverseaxisPartOne node);
    void caseAReverseaxisPartTwo(AReverseaxisPartTwo node);
    void caseAReverseaxisPartThree(AReverseaxisPartThree node);
    void caseAReverseaxisPartFour(AReverseaxisPartFour node);
    void caseAReverseaxisPartFive(AReverseaxisPartFive node);
    void caseAAbbrevreversestep(AAbbrevreversestep node);
    void caseAKindNodetest(AKindNodetest node);
    void caseANameNodetest(ANameNodetest node);
    void caseAQnameNametest(AQnameNametest node);
    void caseAWildcNametest(AWildcNametest node);
    void caseAStarWildcard(AStarWildcard node);
    void caseAWild1Wildcard(AWild1Wildcard node);
    void caseAWild2Wildcard(AWild2Wildcard node);
    void caseAWildcardPartOne(AWildcardPartOne node);
    void caseAWildcardPartTwo(AWildcardPartTwo node);
    void caseAFilterexpr(AFilterexpr node);
    void caseAPredicatelist(APredicatelist node);
    void caseAPredicate(APredicate node);
    void caseALiteralPrimaryexpr(ALiteralPrimaryexpr node);
    void caseAVarrefPrimaryexpr(AVarrefPrimaryexpr node);
    void caseAParenthexPrimaryexpr(AParenthexPrimaryexpr node);
    void caseAContextexPrimaryexpr(AContextexPrimaryexpr node);
    void caseAFunctionPrimaryexpr(AFunctionPrimaryexpr node);
    void caseANumericLiteral(ANumericLiteral node);
    void caseAStringLiteral(AStringLiteral node);
    void caseAIntegerNumericliteral(AIntegerNumericliteral node);
    void caseADecimalNumericliteral(ADecimalNumericliteral node);
    void caseADoubleNumericliteral(ADoubleNumericliteral node);
    void caseAVarref(AVarref node);
    void caseAVarname(AVarname node);
    void caseAParenthesizedexpr(AParenthesizedexpr node);
    void caseAContextitemexpr(AContextitemexpr node);
    void caseAFunctioncall(AFunctioncall node);
    void caseAFunctioncallPart(AFunctioncallPart node);
    void caseAFunctioncallPartPart(AFunctioncallPartPart node);
    void caseASingletype(ASingletype node);
    void caseASequencetype1Sequencetype(ASequencetype1Sequencetype node);
    void caseASequencetype2Sequencetype(ASequencetype2Sequencetype node);
    void caseASequencetypePartOne(ASequencetypePartOne node);
    void caseASequencetypePartTwo(ASequencetypePartTwo node);
    void caseAQuestionOccurrenceindicator(AQuestionOccurrenceindicator node);
    void caseAStarOccurrenceindicator(AStarOccurrenceindicator node);
    void caseAPlusOccurrenceindicator(APlusOccurrenceindicator node);
    void caseAKindItemtype(AKindItemtype node);
    void caseAItemItemtype(AItemItemtype node);
    void caseAAtomicItemtype(AAtomicItemtype node);
    void caseAItemtypePart(AItemtypePart node);
    void caseAAtomictype(AAtomictype node);
    void caseADocumentKindtest(ADocumentKindtest node);
    void caseAElementKindtest(AElementKindtest node);
    void caseAAttributeKindtest(AAttributeKindtest node);
    void caseASchemaelemKindtest(ASchemaelemKindtest node);
    void caseASchemaattrKindtest(ASchemaattrKindtest node);
    void caseAPiKindtest(APiKindtest node);
    void caseACommentKindtest(ACommentKindtest node);
    void caseATextKindtest(ATextKindtest node);
    void caseAAnyKindtest(AAnyKindtest node);
    void caseAAkindtest(AAkindtest node);
    void caseADocumenttest(ADocumenttest node);
    void caseAElementDocumenttestPart(AElementDocumenttestPart node);
    void caseASchemaelemDocumenttestPart(ASchemaelemDocumenttestPart node);
    void caseATexttest(ATexttest node);
    void caseACommenttest(ACommenttest node);
    void caseAPitest(APitest node);
    void caseANcnamePitestPart(ANcnamePitestPart node);
    void caseAStringlitPitestPart(AStringlitPitestPart node);
    void caseAAttributetest(AAttributetest node);
    void caseAAttributetestPart(AAttributetestPart node);
    void caseAAttributetestPartPart(AAttributetestPartPart node);
    void caseAAttribAttribnameorwildcard(AAttribAttribnameorwildcard node);
    void caseAStarAttribnameorwildcard(AStarAttribnameorwildcard node);
    void caseASchemaattributetest(ASchemaattributetest node);
    void caseAAttributedeclaration(AAttributedeclaration node);
    void caseAElementtest(AElementtest node);
    void caseAElementtestPart(AElementtestPart node);
    void caseAElementtestPartPart(AElementtestPartPart node);
    void caseAElementElementnameorwildcard(AElementElementnameorwildcard node);
    void caseAStarElementnameorwildcard(AStarElementnameorwildcard node);
    void caseASchemaelementtest(ASchemaelementtest node);
    void caseAElementdeclaration(AElementdeclaration node);
    void caseAAttributename(AAttributename node);
    void caseAElementname(AElementname node);
    void caseATypename(ATypename node);
    void caseAPrefixedQname(APrefixedQname node);
    void caseAUnprefixedQname(AUnprefixedQname node);
    void caseAPrefixedname(APrefixedname node);
    void caseAUnprefixedname(AUnprefixedname node);
    void caseAPrefix(APrefix node);
    void caseALocalpart(ALocalpart node);
    void caseAPrefixedNsattname(APrefixedNsattname node);
    void caseADefaultNsattname(ADefaultNsattname node);
    void caseAPrefixedattname(APrefixedattname node);
    void caseADefaultattname(ADefaultattname node);
    void caseANcname(ANcname node);
    void caseALetterNcnamestartchar(ALetterNcnamestartchar node);
    void caseAUnderscoreNcnamestartchar(AUnderscoreNcnamestartchar node);

    void caseTKeywordReturn(TKeywordReturn node);
    void caseTKeywordFor(TKeywordFor node);
    void caseTKeywordIn(TKeywordIn node);
    void caseTKeywordIf(TKeywordIf node);
    void caseTKeywordIs(TKeywordIs node);
    void caseTKeywordSatisfies(TKeywordSatisfies node);
    void caseTKeywordThen(TKeywordThen node);
    void caseTKeywordElse(TKeywordElse node);
    void caseTKeywordOr(TKeywordOr node);
    void caseTKeywordAnd(TKeywordAnd node);
    void caseTKeywordTo(TKeywordTo node);
    void caseTKeywordDiv(TKeywordDiv node);
    void caseTKeywordIdiv(TKeywordIdiv node);
    void caseTKeywordMod(TKeywordMod node);
    void caseTKeywordUnion(TKeywordUnion node);
    void caseTKeywordIntersect(TKeywordIntersect node);
    void caseTKeywordExcept(TKeywordExcept node);
    void caseTKeywordInstance(TKeywordInstance node);
    void caseTKeywordOf(TKeywordOf node);
    void caseTKeywordTreat(TKeywordTreat node);
    void caseTKeywordAs(TKeywordAs node);
    void caseTKeywordCastable(TKeywordCastable node);
    void caseTKeywordCast(TKeywordCast node);
    void caseTKeywordSome(TKeywordSome node);
    void caseTKeywordEvery(TKeywordEvery node);
    void caseTComma(TComma node);
    void caseTDollar(TDollar node);
    void caseTQuestion(TQuestion node);
    void caseTLparenth(TLparenth node);
    void caseTRparenth(TRparenth node);
    void caseTLbracket(TLbracket node);
    void caseTRbracket(TRbracket node);
    void caseTPlus2(TPlus2 node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMinus2(TMinus2 node);
    void caseTStar2(TStar2 node);
    void caseTStar(TStar node);
    void caseTUnion(TUnion node);
    void caseTEquals(TEquals node);
    void caseTNeAbbrev(TNeAbbrev node);
    void caseTLtAbbrev(TLtAbbrev node);
    void caseTLeAbbrev(TLeAbbrev node);
    void caseTGtAbbrev(TGtAbbrev node);
    void caseTGeAbbrev(TGeAbbrev node);
    void caseTEq(TEq node);
    void caseTNe(TNe node);
    void caseTLt(TLt node);
    void caseTLe(TLe node);
    void caseTGt(TGt node);
    void caseTGe(TGe node);
    void caseTIs(TIs node);
    void caseTNcompPrecedes(TNcompPrecedes node);
    void caseTNcompFollows(TNcompFollows node);
    void caseTAxisDelim(TAxisDelim node);
    void caseTColon(TColon node);
    void caseTAbbrevRoot(TAbbrevRoot node);
    void caseTAbbrevRootDesc(TAbbrevRootDesc node);
    void caseTAbbrevAttrib(TAbbrevAttrib node);
    void caseTAbbrevReversestep(TAbbrevReversestep node);
    void caseTAbbrevContext(TAbbrevContext node);
    void caseTAxisChild(TAxisChild node);
    void caseTAxisDescendant(TAxisDescendant node);
    void caseTAxisAttribute(TAxisAttribute node);
    void caseTAxisSelf(TAxisSelf node);
    void caseTAxisDescendantOrSelf(TAxisDescendantOrSelf node);
    void caseTAxisFollowingSibling(TAxisFollowingSibling node);
    void caseTAxisFollowing(TAxisFollowing node);
    void caseTAxisNamespace(TAxisNamespace node);
    void caseTAxisParent(TAxisParent node);
    void caseTAxisAncestor(TAxisAncestor node);
    void caseTAxisPrecedingSibling(TAxisPrecedingSibling node);
    void caseTAxisPreceding(TAxisPreceding node);
    void caseTAxisAncestorOrSelf(TAxisAncestorOrSelf node);
    void caseTFnComment(TFnComment node);
    void caseTFnDocumentNode(TFnDocumentNode node);
    void caseTFnElement(TFnElement node);
    void caseTFnEmptySequence(TFnEmptySequence node);
    void caseTFnItem(TFnItem node);
    void caseTFnNode(TFnNode node);
    void caseTFnProcessingInstruction(TFnProcessingInstruction node);
    void caseTFnSchemaAttribute(TFnSchemaAttribute node);
    void caseTFnSchemaElement(TFnSchemaElement node);
    void caseTFnText(TFnText node);
    void caseTFnTypeswitch(TFnTypeswitch node);
    void caseTXmlns(TXmlns node);
    void caseTIntegerliteral(TIntegerliteral node);
    void caseTLetter(TLetter node);
    void caseTNcnamechar(TNcnamechar node);
    void caseTUnderscore(TUnderscore node);
    void caseTDecimalliteral(TDecimalliteral node);
    void caseTDoubleliteral(TDoubleliteral node);
    void caseTStringliteral(TStringliteral node);
    void caseTWhitespace(TWhitespace node);
    void caseTComment(TComment node);
    void caseEOF(EOF node);
}
