/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AReverse1Reverseaxis extends PReverseaxis
{
    private PReverseaxisPartOne _reverseaxisPartOne_;

    public AReverse1Reverseaxis()
    {
        // Constructor
    }

    public AReverse1Reverseaxis(
        @SuppressWarnings("hiding") PReverseaxisPartOne _reverseaxisPartOne_)
    {
        // Constructor
        setReverseaxisPartOne(_reverseaxisPartOne_);

    }

    @Override
    public Object clone()
    {
        return new AReverse1Reverseaxis(
            cloneNode(this._reverseaxisPartOne_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAReverse1Reverseaxis(this);
    }

    public PReverseaxisPartOne getReverseaxisPartOne()
    {
        return this._reverseaxisPartOne_;
    }

    public void setReverseaxisPartOne(PReverseaxisPartOne node)
    {
        if(this._reverseaxisPartOne_ != null)
        {
            this._reverseaxisPartOne_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._reverseaxisPartOne_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._reverseaxisPartOne_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._reverseaxisPartOne_ == child)
        {
            this._reverseaxisPartOne_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._reverseaxisPartOne_ == oldChild)
        {
            setReverseaxisPartOne((PReverseaxisPartOne) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
