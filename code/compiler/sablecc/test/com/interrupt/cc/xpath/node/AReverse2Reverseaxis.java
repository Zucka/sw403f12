/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AReverse2Reverseaxis extends PReverseaxis
{
    private PReverseaxisPartTwo _reverseaxisPartTwo_;

    public AReverse2Reverseaxis()
    {
        // Constructor
    }

    public AReverse2Reverseaxis(
        @SuppressWarnings("hiding") PReverseaxisPartTwo _reverseaxisPartTwo_)
    {
        // Constructor
        setReverseaxisPartTwo(_reverseaxisPartTwo_);

    }

    @Override
    public Object clone()
    {
        return new AReverse2Reverseaxis(
            cloneNode(this._reverseaxisPartTwo_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAReverse2Reverseaxis(this);
    }

    public PReverseaxisPartTwo getReverseaxisPartTwo()
    {
        return this._reverseaxisPartTwo_;
    }

    public void setReverseaxisPartTwo(PReverseaxisPartTwo node)
    {
        if(this._reverseaxisPartTwo_ != null)
        {
            this._reverseaxisPartTwo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._reverseaxisPartTwo_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._reverseaxisPartTwo_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._reverseaxisPartTwo_ == child)
        {
            this._reverseaxisPartTwo_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._reverseaxisPartTwo_ == oldChild)
        {
            setReverseaxisPartTwo((PReverseaxisPartTwo) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
