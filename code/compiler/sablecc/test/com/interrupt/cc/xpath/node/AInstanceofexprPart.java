/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AInstanceofexprPart extends PInstanceofexprPart
{
    private TKeywordInstance _keywordInstance_;
    private TKeywordOf _keywordOf_;
    private PSequencetype _sequencetype_;

    public AInstanceofexprPart()
    {
        // Constructor
    }

    public AInstanceofexprPart(
        @SuppressWarnings("hiding") TKeywordInstance _keywordInstance_,
        @SuppressWarnings("hiding") TKeywordOf _keywordOf_,
        @SuppressWarnings("hiding") PSequencetype _sequencetype_)
    {
        // Constructor
        setKeywordInstance(_keywordInstance_);

        setKeywordOf(_keywordOf_);

        setSequencetype(_sequencetype_);

    }

    @Override
    public Object clone()
    {
        return new AInstanceofexprPart(
            cloneNode(this._keywordInstance_),
            cloneNode(this._keywordOf_),
            cloneNode(this._sequencetype_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstanceofexprPart(this);
    }

    public TKeywordInstance getKeywordInstance()
    {
        return this._keywordInstance_;
    }

    public void setKeywordInstance(TKeywordInstance node)
    {
        if(this._keywordInstance_ != null)
        {
            this._keywordInstance_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordInstance_ = node;
    }

    public TKeywordOf getKeywordOf()
    {
        return this._keywordOf_;
    }

    public void setKeywordOf(TKeywordOf node)
    {
        if(this._keywordOf_ != null)
        {
            this._keywordOf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordOf_ = node;
    }

    public PSequencetype getSequencetype()
    {
        return this._sequencetype_;
    }

    public void setSequencetype(PSequencetype node)
    {
        if(this._sequencetype_ != null)
        {
            this._sequencetype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sequencetype_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._keywordInstance_)
            + toString(this._keywordOf_)
            + toString(this._sequencetype_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._keywordInstance_ == child)
        {
            this._keywordInstance_ = null;
            return;
        }

        if(this._keywordOf_ == child)
        {
            this._keywordOf_ = null;
            return;
        }

        if(this._sequencetype_ == child)
        {
            this._sequencetype_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._keywordInstance_ == oldChild)
        {
            setKeywordInstance((TKeywordInstance) newChild);
            return;
        }

        if(this._keywordOf_ == oldChild)
        {
            setKeywordOf((TKeywordOf) newChild);
            return;
        }

        if(this._sequencetype_ == oldChild)
        {
            setSequencetype((PSequencetype) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
