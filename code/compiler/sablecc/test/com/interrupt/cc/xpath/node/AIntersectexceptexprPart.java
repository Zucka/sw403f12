/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AIntersectexceptexprPart extends PIntersectexceptexprPart
{
    private PIntersectexceptexprPartPart _intersectexceptexprPartPart_;
    private PInstanceofexpr _instanceofexpr_;

    public AIntersectexceptexprPart()
    {
        // Constructor
    }

    public AIntersectexceptexprPart(
        @SuppressWarnings("hiding") PIntersectexceptexprPartPart _intersectexceptexprPartPart_,
        @SuppressWarnings("hiding") PInstanceofexpr _instanceofexpr_)
    {
        // Constructor
        setIntersectexceptexprPartPart(_intersectexceptexprPartPart_);

        setInstanceofexpr(_instanceofexpr_);

    }

    @Override
    public Object clone()
    {
        return new AIntersectexceptexprPart(
            cloneNode(this._intersectexceptexprPartPart_),
            cloneNode(this._instanceofexpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIntersectexceptexprPart(this);
    }

    public PIntersectexceptexprPartPart getIntersectexceptexprPartPart()
    {
        return this._intersectexceptexprPartPart_;
    }

    public void setIntersectexceptexprPartPart(PIntersectexceptexprPartPart node)
    {
        if(this._intersectexceptexprPartPart_ != null)
        {
            this._intersectexceptexprPartPart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._intersectexceptexprPartPart_ = node;
    }

    public PInstanceofexpr getInstanceofexpr()
    {
        return this._instanceofexpr_;
    }

    public void setInstanceofexpr(PInstanceofexpr node)
    {
        if(this._instanceofexpr_ != null)
        {
            this._instanceofexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instanceofexpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._intersectexceptexprPartPart_)
            + toString(this._instanceofexpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._intersectexceptexprPartPart_ == child)
        {
            this._intersectexceptexprPartPart_ = null;
            return;
        }

        if(this._instanceofexpr_ == child)
        {
            this._instanceofexpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._intersectexceptexprPartPart_ == oldChild)
        {
            setIntersectexceptexprPartPart((PIntersectexceptexprPartPart) newChild);
            return;
        }

        if(this._instanceofexpr_ == oldChild)
        {
            setInstanceofexpr((PInstanceofexpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
