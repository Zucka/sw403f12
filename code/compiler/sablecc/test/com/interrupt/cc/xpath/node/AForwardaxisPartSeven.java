/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AForwardaxisPartSeven extends PForwardaxisPartSeven
{
    private TAxisFollowing _axisFollowing_;
    private TAxisDelim _axisDelim_;

    public AForwardaxisPartSeven()
    {
        // Constructor
    }

    public AForwardaxisPartSeven(
        @SuppressWarnings("hiding") TAxisFollowing _axisFollowing_,
        @SuppressWarnings("hiding") TAxisDelim _axisDelim_)
    {
        // Constructor
        setAxisFollowing(_axisFollowing_);

        setAxisDelim(_axisDelim_);

    }

    @Override
    public Object clone()
    {
        return new AForwardaxisPartSeven(
            cloneNode(this._axisFollowing_),
            cloneNode(this._axisDelim_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForwardaxisPartSeven(this);
    }

    public TAxisFollowing getAxisFollowing()
    {
        return this._axisFollowing_;
    }

    public void setAxisFollowing(TAxisFollowing node)
    {
        if(this._axisFollowing_ != null)
        {
            this._axisFollowing_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._axisFollowing_ = node;
    }

    public TAxisDelim getAxisDelim()
    {
        return this._axisDelim_;
    }

    public void setAxisDelim(TAxisDelim node)
    {
        if(this._axisDelim_ != null)
        {
            this._axisDelim_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._axisDelim_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._axisFollowing_)
            + toString(this._axisDelim_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._axisFollowing_ == child)
        {
            this._axisFollowing_ = null;
            return;
        }

        if(this._axisDelim_ == child)
        {
            this._axisDelim_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._axisFollowing_ == oldChild)
        {
            setAxisFollowing((TAxisFollowing) newChild);
            return;
        }

        if(this._axisDelim_ == oldChild)
        {
            setAxisDelim((TAxisDelim) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
