/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AForwardaxisPartFour extends PForwardaxisPartFour
{
    private TAxisSelf _axisSelf_;
    private TAxisDelim _axisDelim_;

    public AForwardaxisPartFour()
    {
        // Constructor
    }

    public AForwardaxisPartFour(
        @SuppressWarnings("hiding") TAxisSelf _axisSelf_,
        @SuppressWarnings("hiding") TAxisDelim _axisDelim_)
    {
        // Constructor
        setAxisSelf(_axisSelf_);

        setAxisDelim(_axisDelim_);

    }

    @Override
    public Object clone()
    {
        return new AForwardaxisPartFour(
            cloneNode(this._axisSelf_),
            cloneNode(this._axisDelim_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForwardaxisPartFour(this);
    }

    public TAxisSelf getAxisSelf()
    {
        return this._axisSelf_;
    }

    public void setAxisSelf(TAxisSelf node)
    {
        if(this._axisSelf_ != null)
        {
            this._axisSelf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._axisSelf_ = node;
    }

    public TAxisDelim getAxisDelim()
    {
        return this._axisDelim_;
    }

    public void setAxisDelim(TAxisDelim node)
    {
        if(this._axisDelim_ != null)
        {
            this._axisDelim_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._axisDelim_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._axisSelf_)
            + toString(this._axisDelim_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._axisSelf_ == child)
        {
            this._axisSelf_ = null;
            return;
        }

        if(this._axisDelim_ == child)
        {
            this._axisDelim_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._axisSelf_ == oldChild)
        {
            setAxisSelf((TAxisSelf) newChild);
            return;
        }

        if(this._axisDelim_ == oldChild)
        {
            setAxisDelim((TAxisDelim) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
