/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AFilterexpr extends PFilterexpr
{
    private PPrimaryexpr _primaryexpr_;
    private PPredicatelist _predicatelist_;

    public AFilterexpr()
    {
        // Constructor
    }

    public AFilterexpr(
        @SuppressWarnings("hiding") PPrimaryexpr _primaryexpr_,
        @SuppressWarnings("hiding") PPredicatelist _predicatelist_)
    {
        // Constructor
        setPrimaryexpr(_primaryexpr_);

        setPredicatelist(_predicatelist_);

    }

    @Override
    public Object clone()
    {
        return new AFilterexpr(
            cloneNode(this._primaryexpr_),
            cloneNode(this._predicatelist_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFilterexpr(this);
    }

    public PPrimaryexpr getPrimaryexpr()
    {
        return this._primaryexpr_;
    }

    public void setPrimaryexpr(PPrimaryexpr node)
    {
        if(this._primaryexpr_ != null)
        {
            this._primaryexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._primaryexpr_ = node;
    }

    public PPredicatelist getPredicatelist()
    {
        return this._predicatelist_;
    }

    public void setPredicatelist(PPredicatelist node)
    {
        if(this._predicatelist_ != null)
        {
            this._predicatelist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._predicatelist_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._primaryexpr_)
            + toString(this._predicatelist_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._primaryexpr_ == child)
        {
            this._primaryexpr_ = null;
            return;
        }

        if(this._predicatelist_ == child)
        {
            this._predicatelist_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._primaryexpr_ == oldChild)
        {
            setPrimaryexpr((PPrimaryexpr) newChild);
            return;
        }

        if(this._predicatelist_ == oldChild)
        {
            setPredicatelist((PPredicatelist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
