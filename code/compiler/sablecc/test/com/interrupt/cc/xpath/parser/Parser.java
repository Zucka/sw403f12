/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.parser;

import com.interrupt.cc.xpath.lexer.*;
import com.interrupt.cc.xpath.node.*;
import com.interrupt.cc.xpath.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAexpr11Xpath */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAexpr21Xpath */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AAexpr31Xpath */
		    {
			ArrayList list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce AAexpr41Xpath */
		    {
			ArrayList list = new3();
			push(goTo(0), list);
		    }
		    break;
                    case 4: /* reduce AExprPart */
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AForExprsingle */
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce AQuantifExprsingle */
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;
                    case 7: /* reduce AIfExprsingle */
		    {
			ArrayList list = new7();
			push(goTo(2), list);
		    }
		    break;
                    case 8: /* reduce AOrExprsingle */
		    {
			ArrayList list = new8();
			push(goTo(2), list);
		    }
		    break;
                    case 9: /* reduce AForexpr */
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;
                    case 10: /* reduce AAsimpleforclause1Simpleforclause */
		    {
			ArrayList list = new10();
			push(goTo(4), list);
		    }
		    break;
                    case 11: /* reduce AAsimpleforclause2Simpleforclause */
		    {
			ArrayList list = new11();
			push(goTo(4), list);
		    }
		    break;
                    case 12: /* reduce ASimpleforclausePart */
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;
                    case 13: /* reduce AAquantifiedexpr1Quantifiedexpr */
		    {
			ArrayList list = new13();
			push(goTo(6), list);
		    }
		    break;
                    case 14: /* reduce AAquantifiedexpr2Quantifiedexpr */
		    {
			ArrayList list = new14();
			push(goTo(6), list);
		    }
		    break;
                    case 15: /* reduce ASomeSomeEveryPart */
		    {
			ArrayList list = new15();
			push(goTo(7), list);
		    }
		    break;
                    case 16: /* reduce AEverySomeEveryPart */
		    {
			ArrayList list = new16();
			push(goTo(7), list);
		    }
		    break;
                    case 17: /* reduce AQuantifiedexprPart */
		    {
			ArrayList list = new17();
			push(goTo(8), list);
		    }
		    break;
                    case 18: /* reduce AAexpr11Ifexpr */
		    {
			ArrayList list = new18();
			push(goTo(9), list);
		    }
		    break;
                    case 19: /* reduce AAexpr21Ifexpr */
		    {
			ArrayList list = new19();
			push(goTo(9), list);
		    }
		    break;
                    case 20: /* reduce AAexpr31Ifexpr */
		    {
			ArrayList list = new20();
			push(goTo(9), list);
		    }
		    break;
                    case 21: /* reduce AAexpr41Ifexpr */
		    {
			ArrayList list = new21();
			push(goTo(9), list);
		    }
		    break;
                    case 22: /* reduce AAorexpr1Orexpr */
		    {
			ArrayList list = new22();
			push(goTo(10), list);
		    }
		    break;
                    case 23: /* reduce AAorexpr2Orexpr */
		    {
			ArrayList list = new23();
			push(goTo(10), list);
		    }
		    break;
                    case 24: /* reduce AOrexprPart */
		    {
			ArrayList list = new24();
			push(goTo(11), list);
		    }
		    break;
                    case 25: /* reduce AAandexpr1Andexpr */
		    {
			ArrayList list = new25();
			push(goTo(12), list);
		    }
		    break;
                    case 26: /* reduce AAandexpr2Andexpr */
		    {
			ArrayList list = new26();
			push(goTo(12), list);
		    }
		    break;
                    case 27: /* reduce AAndexprPart */
		    {
			ArrayList list = new27();
			push(goTo(13), list);
		    }
		    break;
                    case 28: /* reduce AAcomparisonexpr1Comparisonexpr */
		    {
			ArrayList list = new28();
			push(goTo(14), list);
		    }
		    break;
                    case 29: /* reduce AAcomparisonexpr2Comparisonexpr */
		    {
			ArrayList list = new29();
			push(goTo(14), list);
		    }
		    break;
                    case 30: /* reduce AComparisonexprPart */
		    {
			ArrayList list = new30();
			push(goTo(15), list);
		    }
		    break;
                    case 31: /* reduce AValueComparisonexprPartPart */
		    {
			ArrayList list = new31();
			push(goTo(16), list);
		    }
		    break;
                    case 32: /* reduce AGeneralComparisonexprPartPart */
		    {
			ArrayList list = new32();
			push(goTo(16), list);
		    }
		    break;
                    case 33: /* reduce ANodeComparisonexprPartPart */
		    {
			ArrayList list = new33();
			push(goTo(16), list);
		    }
		    break;
                    case 34: /* reduce AArangeexpr1Rangeexpr */
		    {
			ArrayList list = new34();
			push(goTo(17), list);
		    }
		    break;
                    case 35: /* reduce AArangeexpr2Rangeexpr */
		    {
			ArrayList list = new35();
			push(goTo(17), list);
		    }
		    break;
                    case 36: /* reduce ARangeexprPart */
		    {
			ArrayList list = new36();
			push(goTo(18), list);
		    }
		    break;
                    case 37: /* reduce AAadditiveexpr1Additiveexpr */
		    {
			ArrayList list = new37();
			push(goTo(19), list);
		    }
		    break;
                    case 38: /* reduce AAadditiveexpr2Additiveexpr */
		    {
			ArrayList list = new38();
			push(goTo(19), list);
		    }
		    break;
                    case 39: /* reduce AAdditiveexprPart */
		    {
			ArrayList list = new39();
			push(goTo(20), list);
		    }
		    break;
                    case 40: /* reduce APlusAdditiveexprPartPart */
		    {
			ArrayList list = new40();
			push(goTo(21), list);
		    }
		    break;
                    case 41: /* reduce AMinusAdditiveexprPartPart */
		    {
			ArrayList list = new41();
			push(goTo(21), list);
		    }
		    break;
                    case 42: /* reduce AAmultiplicativeexpr1Multiplicativeexpr */
		    {
			ArrayList list = new42();
			push(goTo(22), list);
		    }
		    break;
                    case 43: /* reduce AAmultiplicativeexpr2Multiplicativeexpr */
		    {
			ArrayList list = new43();
			push(goTo(22), list);
		    }
		    break;
                    case 44: /* reduce AMultiplicativeexprPart */
		    {
			ArrayList list = new44();
			push(goTo(23), list);
		    }
		    break;
                    case 45: /* reduce AStarMultiplicativeexprPartPart */
		    {
			ArrayList list = new45();
			push(goTo(24), list);
		    }
		    break;
                    case 46: /* reduce ADivMultiplicativeexprPartPart */
		    {
			ArrayList list = new46();
			push(goTo(24), list);
		    }
		    break;
                    case 47: /* reduce AIdivMultiplicativeexprPartPart */
		    {
			ArrayList list = new47();
			push(goTo(24), list);
		    }
		    break;
                    case 48: /* reduce AModMultiplicativeexprPartPart */
		    {
			ArrayList list = new48();
			push(goTo(24), list);
		    }
		    break;
                    case 49: /* reduce AAunionexpr1Unionexpr */
		    {
			ArrayList list = new49();
			push(goTo(25), list);
		    }
		    break;
                    case 50: /* reduce AAunionexpr2Unionexpr */
		    {
			ArrayList list = new50();
			push(goTo(25), list);
		    }
		    break;
                    case 51: /* reduce AUnionexprPart */
		    {
			ArrayList list = new51();
			push(goTo(26), list);
		    }
		    break;
                    case 52: /* reduce AUnionkeyUnionexprPartPart */
		    {
			ArrayList list = new52();
			push(goTo(27), list);
		    }
		    break;
                    case 53: /* reduce AUnionUnionexprPartPart */
		    {
			ArrayList list = new53();
			push(goTo(27), list);
		    }
		    break;
                    case 54: /* reduce AAintersectexceptexpr1Intersectexceptexpr */
		    {
			ArrayList list = new54();
			push(goTo(28), list);
		    }
		    break;
                    case 55: /* reduce AAintersectexceptexpr2Intersectexceptexpr */
		    {
			ArrayList list = new55();
			push(goTo(28), list);
		    }
		    break;
                    case 56: /* reduce AIntersectexceptexprPart */
		    {
			ArrayList list = new56();
			push(goTo(29), list);
		    }
		    break;
                    case 57: /* reduce AIntersectIntersectexceptexprPartPart */
		    {
			ArrayList list = new57();
			push(goTo(30), list);
		    }
		    break;
                    case 58: /* reduce AExceptIntersectexceptexprPartPart */
		    {
			ArrayList list = new58();
			push(goTo(30), list);
		    }
		    break;
                    case 59: /* reduce AAinstanceofexpr1Instanceofexpr */
		    {
			ArrayList list = new59();
			push(goTo(31), list);
		    }
		    break;
                    case 60: /* reduce AAinstanceofexpr2Instanceofexpr */
		    {
			ArrayList list = new60();
			push(goTo(31), list);
		    }
		    break;
                    case 61: /* reduce AInstanceofexprPart */
		    {
			ArrayList list = new61();
			push(goTo(32), list);
		    }
		    break;
                    case 62: /* reduce AAtreatexpr1Treatexpr */
		    {
			ArrayList list = new62();
			push(goTo(33), list);
		    }
		    break;
                    case 63: /* reduce AAtreatexpr2Treatexpr */
		    {
			ArrayList list = new63();
			push(goTo(33), list);
		    }
		    break;
                    case 64: /* reduce ATreatexprPart */
		    {
			ArrayList list = new64();
			push(goTo(34), list);
		    }
		    break;
                    case 65: /* reduce AAcastableexpr1Castableexpr */
		    {
			ArrayList list = new65();
			push(goTo(35), list);
		    }
		    break;
                    case 66: /* reduce AAcastableexpr2Castableexpr */
		    {
			ArrayList list = new66();
			push(goTo(35), list);
		    }
		    break;
                    case 67: /* reduce ACastableexprPart */
		    {
			ArrayList list = new67();
			push(goTo(36), list);
		    }
		    break;
                    case 68: /* reduce AAcastexpr1Castexpr */
		    {
			ArrayList list = new68();
			push(goTo(37), list);
		    }
		    break;
                    case 69: /* reduce AAcastexpr2Castexpr */
		    {
			ArrayList list = new69();
			push(goTo(37), list);
		    }
		    break;
                    case 70: /* reduce ACastexprPart */
		    {
			ArrayList list = new70();
			push(goTo(38), list);
		    }
		    break;
                    case 71: /* reduce AAunaryexpr1Unaryexpr */
		    {
			ArrayList list = new71();
			push(goTo(39), list);
		    }
		    break;
                    case 72: /* reduce AAunaryexpr2Unaryexpr */
		    {
			ArrayList list = new72();
			push(goTo(39), list);
		    }
		    break;
                    case 73: /* reduce AMinusUnaryexprPart */
		    {
			ArrayList list = new73();
			push(goTo(40), list);
		    }
		    break;
                    case 74: /* reduce APlusUnaryexprPart */
		    {
			ArrayList list = new74();
			push(goTo(40), list);
		    }
		    break;
                    case 75: /* reduce AValueexpr */
		    {
			ArrayList list = new75();
			push(goTo(41), list);
		    }
		    break;
                    case 76: /* reduce AEqGeneralcomp */
		    {
			ArrayList list = new76();
			push(goTo(42), list);
		    }
		    break;
                    case 77: /* reduce ANeGeneralcomp */
		    {
			ArrayList list = new77();
			push(goTo(42), list);
		    }
		    break;
                    case 78: /* reduce ALtGeneralcomp */
		    {
			ArrayList list = new78();
			push(goTo(42), list);
		    }
		    break;
                    case 79: /* reduce ALeGeneralcomp */
		    {
			ArrayList list = new79();
			push(goTo(42), list);
		    }
		    break;
                    case 80: /* reduce AGtGeneralcomp */
		    {
			ArrayList list = new80();
			push(goTo(42), list);
		    }
		    break;
                    case 81: /* reduce AGeGeneralcomp */
		    {
			ArrayList list = new81();
			push(goTo(42), list);
		    }
		    break;
                    case 82: /* reduce AEqValuecomp */
		    {
			ArrayList list = new82();
			push(goTo(43), list);
		    }
		    break;
                    case 83: /* reduce ANeValuecomp */
		    {
			ArrayList list = new83();
			push(goTo(43), list);
		    }
		    break;
                    case 84: /* reduce ALtValuecomp */
		    {
			ArrayList list = new84();
			push(goTo(43), list);
		    }
		    break;
                    case 85: /* reduce ALeValuecomp */
		    {
			ArrayList list = new85();
			push(goTo(43), list);
		    }
		    break;
                    case 86: /* reduce AGtValuecomp */
		    {
			ArrayList list = new86();
			push(goTo(43), list);
		    }
		    break;
                    case 87: /* reduce AGeValuecomp */
		    {
			ArrayList list = new87();
			push(goTo(43), list);
		    }
		    break;
                    case 88: /* reduce AIsNodecomp */
		    {
			ArrayList list = new88();
			push(goTo(44), list);
		    }
		    break;
                    case 89: /* reduce ANcomppreNodecomp */
		    {
			ArrayList list = new89();
			push(goTo(44), list);
		    }
		    break;
                    case 90: /* reduce ANcompfolNodecomp */
		    {
			ArrayList list = new90();
			push(goTo(44), list);
		    }
		    break;
                    case 91: /* reduce APath1Pathexpr */
		    {
			ArrayList list = new91();
			push(goTo(45), list);
		    }
		    break;
                    case 92: /* reduce APath2Pathexpr */
		    {
			ArrayList list = new92();
			push(goTo(45), list);
		    }
		    break;
                    case 93: /* reduce ARelpathPathexpr */
		    {
			ArrayList list = new93();
			push(goTo(45), list);
		    }
		    break;
                    case 94: /* reduce AApathexprpartone1PathexprPartOne */
		    {
			ArrayList list = new94();
			push(goTo(46), list);
		    }
		    break;
                    case 95: /* reduce AApathexprpartone2PathexprPartOne */
		    {
			ArrayList list = new95();
			push(goTo(46), list);
		    }
		    break;
                    case 96: /* reduce APathexprPartTwo */
		    {
			ArrayList list = new96();
			push(goTo(47), list);
		    }
		    break;
                    case 97: /* reduce AArelativepathexpr1Relativepathexpr */
		    {
			ArrayList list = new97();
			push(goTo(48), list);
		    }
		    break;
                    case 98: /* reduce AArelativepathexpr2Relativepathexpr */
		    {
			ArrayList list = new98();
			push(goTo(48), list);
		    }
		    break;
                    case 99: /* reduce ARelativepathexprPart */
		    {
			ArrayList list = new99();
			push(goTo(49), list);
		    }
		    break;
                    case 100: /* reduce ARootRelativepathexprPartPart */
		    {
			ArrayList list = new100();
			push(goTo(50), list);
		    }
		    break;
                    case 101: /* reduce ARootdescRelativepathexprPartPart */
		    {
			ArrayList list = new101();
			push(goTo(50), list);
		    }
		    break;
                    case 102: /* reduce AFilterStepexpr */
		    {
			ArrayList list = new102();
			push(goTo(51), list);
		    }
		    break;
                    case 103: /* reduce AAxisStepexpr */
		    {
			ArrayList list = new103();
			push(goTo(51), list);
		    }
		    break;
                    case 104: /* reduce AAxisstep */
		    {
			ArrayList list = new104();
			push(goTo(52), list);
		    }
		    break;
                    case 105: /* reduce AReverseAxisstepPart */
		    {
			ArrayList list = new105();
			push(goTo(53), list);
		    }
		    break;
                    case 106: /* reduce AForwardAxisstepPart */
		    {
			ArrayList list = new106();
			push(goTo(53), list);
		    }
		    break;
                    case 107: /* reduce AForwardForwardstep */
		    {
			ArrayList list = new107();
			push(goTo(54), list);
		    }
		    break;
                    case 108: /* reduce AAbbrevforwardForwardstep */
		    {
			ArrayList list = new108();
			push(goTo(54), list);
		    }
		    break;
                    case 109: /* reduce AForwardstepPart */
		    {
			ArrayList list = new109();
			push(goTo(55), list);
		    }
		    break;
                    case 110: /* reduce AForward1Forwardaxis */
		    {
			ArrayList list = new110();
			push(goTo(56), list);
		    }
		    break;
                    case 111: /* reduce AForward2Forwardaxis */
		    {
			ArrayList list = new111();
			push(goTo(56), list);
		    }
		    break;
                    case 112: /* reduce AForward3Forwardaxis */
		    {
			ArrayList list = new112();
			push(goTo(56), list);
		    }
		    break;
                    case 113: /* reduce AForward4Forwardaxis */
		    {
			ArrayList list = new113();
			push(goTo(56), list);
		    }
		    break;
                    case 114: /* reduce AForward5Forwardaxis */
		    {
			ArrayList list = new114();
			push(goTo(56), list);
		    }
		    break;
                    case 115: /* reduce AForward6Forwardaxis */
		    {
			ArrayList list = new115();
			push(goTo(56), list);
		    }
		    break;
                    case 116: /* reduce AForward7Forwardaxis */
		    {
			ArrayList list = new116();
			push(goTo(56), list);
		    }
		    break;
                    case 117: /* reduce AForward8Forwardaxis */
		    {
			ArrayList list = new117();
			push(goTo(56), list);
		    }
		    break;
                    case 118: /* reduce AForwardaxisPartOne */
		    {
			ArrayList list = new118();
			push(goTo(57), list);
		    }
		    break;
                    case 119: /* reduce AForwardaxisPartTwo */
		    {
			ArrayList list = new119();
			push(goTo(58), list);
		    }
		    break;
                    case 120: /* reduce AForwardaxisPartThree */
		    {
			ArrayList list = new120();
			push(goTo(59), list);
		    }
		    break;
                    case 121: /* reduce AForwardaxisPartFour */
		    {
			ArrayList list = new121();
			push(goTo(60), list);
		    }
		    break;
                    case 122: /* reduce AForwardaxisPartFive */
		    {
			ArrayList list = new122();
			push(goTo(61), list);
		    }
		    break;
                    case 123: /* reduce AForwardaxisPartSix */
		    {
			ArrayList list = new123();
			push(goTo(62), list);
		    }
		    break;
                    case 124: /* reduce AForwardaxisPartSeven */
		    {
			ArrayList list = new124();
			push(goTo(63), list);
		    }
		    break;
                    case 125: /* reduce AForwardaxisPartEight */
		    {
			ArrayList list = new125();
			push(goTo(64), list);
		    }
		    break;
                    case 126: /* reduce AAabbrevforwardstep1Abbrevforwardstep */
		    {
			ArrayList list = new126();
			push(goTo(65), list);
		    }
		    break;
                    case 127: /* reduce AAabbrevforwardstep2Abbrevforwardstep */
		    {
			ArrayList list = new127();
			push(goTo(65), list);
		    }
		    break;
                    case 128: /* reduce AReverseReversestep */
		    {
			ArrayList list = new128();
			push(goTo(66), list);
		    }
		    break;
                    case 129: /* reduce AAbbrevreverseReversestep */
		    {
			ArrayList list = new129();
			push(goTo(66), list);
		    }
		    break;
                    case 130: /* reduce AReversestepPart */
		    {
			ArrayList list = new130();
			push(goTo(67), list);
		    }
		    break;
                    case 131: /* reduce AReverse1Reverseaxis */
		    {
			ArrayList list = new131();
			push(goTo(68), list);
		    }
		    break;
                    case 132: /* reduce AReverse2Reverseaxis */
		    {
			ArrayList list = new132();
			push(goTo(68), list);
		    }
		    break;
                    case 133: /* reduce AReverse3Reverseaxis */
		    {
			ArrayList list = new133();
			push(goTo(68), list);
		    }
		    break;
                    case 134: /* reduce AReverse4Reverseaxis */
		    {
			ArrayList list = new134();
			push(goTo(68), list);
		    }
		    break;
                    case 135: /* reduce AReverse5Reverseaxis */
		    {
			ArrayList list = new135();
			push(goTo(68), list);
		    }
		    break;
                    case 136: /* reduce AReverseaxisPartOne */
		    {
			ArrayList list = new136();
			push(goTo(69), list);
		    }
		    break;
                    case 137: /* reduce AReverseaxisPartTwo */
		    {
			ArrayList list = new137();
			push(goTo(70), list);
		    }
		    break;
                    case 138: /* reduce AReverseaxisPartThree */
		    {
			ArrayList list = new138();
			push(goTo(71), list);
		    }
		    break;
                    case 139: /* reduce AReverseaxisPartFour */
		    {
			ArrayList list = new139();
			push(goTo(72), list);
		    }
		    break;
                    case 140: /* reduce AReverseaxisPartFive */
		    {
			ArrayList list = new140();
			push(goTo(73), list);
		    }
		    break;
                    case 141: /* reduce AAbbrevreversestep */
		    {
			ArrayList list = new141();
			push(goTo(74), list);
		    }
		    break;
                    case 142: /* reduce AKindNodetest */
		    {
			ArrayList list = new142();
			push(goTo(75), list);
		    }
		    break;
                    case 143: /* reduce ANameNodetest */
		    {
			ArrayList list = new143();
			push(goTo(75), list);
		    }
		    break;
                    case 144: /* reduce AQnameNametest */
		    {
			ArrayList list = new144();
			push(goTo(76), list);
		    }
		    break;
                    case 145: /* reduce AWildcNametest */
		    {
			ArrayList list = new145();
			push(goTo(76), list);
		    }
		    break;
                    case 146: /* reduce AStarWildcard */
		    {
			ArrayList list = new146();
			push(goTo(77), list);
		    }
		    break;
                    case 147: /* reduce AWild1Wildcard */
		    {
			ArrayList list = new147();
			push(goTo(77), list);
		    }
		    break;
                    case 148: /* reduce AWild2Wildcard */
		    {
			ArrayList list = new148();
			push(goTo(77), list);
		    }
		    break;
                    case 149: /* reduce AWildcardPartOne */
		    {
			ArrayList list = new149();
			push(goTo(78), list);
		    }
		    break;
                    case 150: /* reduce AWildcardPartTwo */
		    {
			ArrayList list = new150();
			push(goTo(79), list);
		    }
		    break;
                    case 151: /* reduce AFilterexpr */
		    {
			ArrayList list = new151();
			push(goTo(80), list);
		    }
		    break;
                    case 152: /* reduce AApredicatelist1Predicatelist */
		    {
			ArrayList list = new152();
			push(goTo(81), list);
		    }
		    break;
                    case 153: /* reduce AApredicatelist2Predicatelist */
		    {
			ArrayList list = new153();
			push(goTo(81), list);
		    }
		    break;
                    case 154: /* reduce AAexpr11Predicate */
		    {
			ArrayList list = new154();
			push(goTo(82), list);
		    }
		    break;
                    case 155: /* reduce AAexpr21Predicate */
		    {
			ArrayList list = new155();
			push(goTo(82), list);
		    }
		    break;
                    case 156: /* reduce AAexpr31Predicate */
		    {
			ArrayList list = new156();
			push(goTo(82), list);
		    }
		    break;
                    case 157: /* reduce AAexpr41Predicate */
		    {
			ArrayList list = new157();
			push(goTo(82), list);
		    }
		    break;
                    case 158: /* reduce ALiteralPrimaryexpr */
		    {
			ArrayList list = new158();
			push(goTo(83), list);
		    }
		    break;
                    case 159: /* reduce AVarrefPrimaryexpr */
		    {
			ArrayList list = new159();
			push(goTo(83), list);
		    }
		    break;
                    case 160: /* reduce AParenthexPrimaryexpr */
		    {
			ArrayList list = new160();
			push(goTo(83), list);
		    }
		    break;
                    case 161: /* reduce AContextexPrimaryexpr */
		    {
			ArrayList list = new161();
			push(goTo(83), list);
		    }
		    break;
                    case 162: /* reduce AFunctionPrimaryexpr */
		    {
			ArrayList list = new162();
			push(goTo(83), list);
		    }
		    break;
                    case 163: /* reduce ANumericLiteral */
		    {
			ArrayList list = new163();
			push(goTo(84), list);
		    }
		    break;
                    case 164: /* reduce AStringLiteral */
		    {
			ArrayList list = new164();
			push(goTo(84), list);
		    }
		    break;
                    case 165: /* reduce AIntegerNumericliteral */
		    {
			ArrayList list = new165();
			push(goTo(85), list);
		    }
		    break;
                    case 166: /* reduce ADecimalNumericliteral */
		    {
			ArrayList list = new166();
			push(goTo(85), list);
		    }
		    break;
                    case 167: /* reduce ADoubleNumericliteral */
		    {
			ArrayList list = new167();
			push(goTo(85), list);
		    }
		    break;
                    case 168: /* reduce AVarref */
		    {
			ArrayList list = new168();
			push(goTo(86), list);
		    }
		    break;
                    case 169: /* reduce AVarname */
		    {
			ArrayList list = new169();
			push(goTo(87), list);
		    }
		    break;
                    case 170: /* reduce AAparenthesizedexpr2$Aexpr11Parenthesizedexpr */
		    {
			ArrayList list = new170();
			push(goTo(88), list);
		    }
		    break;
                    case 171: /* reduce AAparenthesizedexpr2$Aexpr21Parenthesizedexpr */
		    {
			ArrayList list = new171();
			push(goTo(88), list);
		    }
		    break;
                    case 172: /* reduce AAparenthesizedexpr2$Aexpr31Parenthesizedexpr */
		    {
			ArrayList list = new172();
			push(goTo(88), list);
		    }
		    break;
                    case 173: /* reduce AAparenthesizedexpr2$Aexpr41Parenthesizedexpr */
		    {
			ArrayList list = new173();
			push(goTo(88), list);
		    }
		    break;
                    case 174: /* reduce AContextitemexpr */
		    {
			ArrayList list = new174();
			push(goTo(89), list);
		    }
		    break;
                    case 175: /* reduce AAfunctioncall1Functioncall */
		    {
			ArrayList list = new175();
			push(goTo(90), list);
		    }
		    break;
                    case 176: /* reduce AAfunctioncall2Functioncall */
		    {
			ArrayList list = new176();
			push(goTo(90), list);
		    }
		    break;
                    case 177: /* reduce AAfunctioncallpart1FunctioncallPart */
		    {
			ArrayList list = new177();
			push(goTo(91), list);
		    }
		    break;
                    case 178: /* reduce AAfunctioncallpart2FunctioncallPart */
		    {
			ArrayList list = new178();
			push(goTo(91), list);
		    }
		    break;
                    case 179: /* reduce AFunctioncallPartPart */
		    {
			ArrayList list = new179();
			push(goTo(92), list);
		    }
		    break;
                    case 180: /* reduce AAsingletype1Singletype */
		    {
			ArrayList list = new180();
			push(goTo(93), list);
		    }
		    break;
                    case 181: /* reduce AAsingletype2Singletype */
		    {
			ArrayList list = new181();
			push(goTo(93), list);
		    }
		    break;
                    case 182: /* reduce ASequencetype1Sequencetype */
		    {
			ArrayList list = new182();
			push(goTo(94), list);
		    }
		    break;
                    case 183: /* reduce ASequencetype2Sequencetype */
		    {
			ArrayList list = new183();
			push(goTo(94), list);
		    }
		    break;
                    case 184: /* reduce ASequencetypePartOne */
		    {
			ArrayList list = new184();
			push(goTo(95), list);
		    }
		    break;
                    case 185: /* reduce AAsequencetypeparttwo1SequencetypePartTwo */
		    {
			ArrayList list = new185();
			push(goTo(96), list);
		    }
		    break;
                    case 186: /* reduce AAsequencetypeparttwo2SequencetypePartTwo */
		    {
			ArrayList list = new186();
			push(goTo(96), list);
		    }
		    break;
                    case 187: /* reduce AQuestionOccurrenceindicator */
		    {
			ArrayList list = new187();
			push(goTo(97), list);
		    }
		    break;
                    case 188: /* reduce AStarOccurrenceindicator */
		    {
			ArrayList list = new188();
			push(goTo(97), list);
		    }
		    break;
                    case 189: /* reduce APlusOccurrenceindicator */
		    {
			ArrayList list = new189();
			push(goTo(97), list);
		    }
		    break;
                    case 190: /* reduce AKindItemtype */
		    {
			ArrayList list = new190();
			push(goTo(98), list);
		    }
		    break;
                    case 191: /* reduce AItemItemtype */
		    {
			ArrayList list = new191();
			push(goTo(98), list);
		    }
		    break;
                    case 192: /* reduce AAtomicItemtype */
		    {
			ArrayList list = new192();
			push(goTo(98), list);
		    }
		    break;
                    case 193: /* reduce AItemtypePart */
		    {
			ArrayList list = new193();
			push(goTo(99), list);
		    }
		    break;
                    case 194: /* reduce AAtomictype */
		    {
			ArrayList list = new194();
			push(goTo(100), list);
		    }
		    break;
                    case 195: /* reduce ADocumentKindtest */
		    {
			ArrayList list = new195();
			push(goTo(101), list);
		    }
		    break;
                    case 196: /* reduce AElementKindtest */
		    {
			ArrayList list = new196();
			push(goTo(101), list);
		    }
		    break;
                    case 197: /* reduce AAttributeKindtest */
		    {
			ArrayList list = new197();
			push(goTo(101), list);
		    }
		    break;
                    case 198: /* reduce ASchemaelemKindtest */
		    {
			ArrayList list = new198();
			push(goTo(101), list);
		    }
		    break;
                    case 199: /* reduce ASchemaattrKindtest */
		    {
			ArrayList list = new199();
			push(goTo(101), list);
		    }
		    break;
                    case 200: /* reduce APiKindtest */
		    {
			ArrayList list = new200();
			push(goTo(101), list);
		    }
		    break;
                    case 201: /* reduce ACommentKindtest */
		    {
			ArrayList list = new201();
			push(goTo(101), list);
		    }
		    break;
                    case 202: /* reduce ATextKindtest */
		    {
			ArrayList list = new202();
			push(goTo(101), list);
		    }
		    break;
                    case 203: /* reduce AAnyKindtest */
		    {
			ArrayList list = new203();
			push(goTo(101), list);
		    }
		    break;
                    case 204: /* reduce AAkindtest */
		    {
			ArrayList list = new204();
			push(goTo(102), list);
		    }
		    break;
                    case 205: /* reduce AAdocumenttest1Documenttest */
		    {
			ArrayList list = new205();
			push(goTo(103), list);
		    }
		    break;
                    case 206: /* reduce AAdocumenttest2Documenttest */
		    {
			ArrayList list = new206();
			push(goTo(103), list);
		    }
		    break;
                    case 207: /* reduce AElementDocumenttestPart */
		    {
			ArrayList list = new207();
			push(goTo(104), list);
		    }
		    break;
                    case 208: /* reduce ASchemaelemDocumenttestPart */
		    {
			ArrayList list = new208();
			push(goTo(104), list);
		    }
		    break;
                    case 209: /* reduce ATexttest */
		    {
			ArrayList list = new209();
			push(goTo(105), list);
		    }
		    break;
                    case 210: /* reduce ACommenttest */
		    {
			ArrayList list = new210();
			push(goTo(106), list);
		    }
		    break;
                    case 211: /* reduce AApitest1Pitest */
		    {
			ArrayList list = new211();
			push(goTo(107), list);
		    }
		    break;
                    case 212: /* reduce AApitest2Pitest */
		    {
			ArrayList list = new212();
			push(goTo(107), list);
		    }
		    break;
                    case 213: /* reduce ANcnamePitestPart */
		    {
			ArrayList list = new213();
			push(goTo(108), list);
		    }
		    break;
                    case 214: /* reduce AStringlitPitestPart */
		    {
			ArrayList list = new214();
			push(goTo(108), list);
		    }
		    break;
                    case 215: /* reduce AAattributetest1Attributetest */
		    {
			ArrayList list = new215();
			push(goTo(109), list);
		    }
		    break;
                    case 216: /* reduce AAattributetest2Attributetest */
		    {
			ArrayList list = new216();
			push(goTo(109), list);
		    }
		    break;
                    case 217: /* reduce AAattributetestpart1AttributetestPart */
		    {
			ArrayList list = new217();
			push(goTo(110), list);
		    }
		    break;
                    case 218: /* reduce AAattributetestpart2AttributetestPart */
		    {
			ArrayList list = new218();
			push(goTo(110), list);
		    }
		    break;
                    case 219: /* reduce AAttributetestPartPart */
		    {
			ArrayList list = new219();
			push(goTo(111), list);
		    }
		    break;
                    case 220: /* reduce AAttribAttribnameorwildcard */
		    {
			ArrayList list = new220();
			push(goTo(112), list);
		    }
		    break;
                    case 221: /* reduce AStarAttribnameorwildcard */
		    {
			ArrayList list = new221();
			push(goTo(112), list);
		    }
		    break;
                    case 222: /* reduce ASchemaattributetest */
		    {
			ArrayList list = new222();
			push(goTo(113), list);
		    }
		    break;
                    case 223: /* reduce AAttributedeclaration */
		    {
			ArrayList list = new223();
			push(goTo(114), list);
		    }
		    break;
                    case 224: /* reduce AAelementtest1Elementtest */
		    {
			ArrayList list = new224();
			push(goTo(115), list);
		    }
		    break;
                    case 225: /* reduce AAelementtest2Elementtest */
		    {
			ArrayList list = new225();
			push(goTo(115), list);
		    }
		    break;
                    case 226: /* reduce AAelementtestpart1ElementtestPart */
		    {
			ArrayList list = new226();
			push(goTo(116), list);
		    }
		    break;
                    case 227: /* reduce AAelementtestpart2ElementtestPart */
		    {
			ArrayList list = new227();
			push(goTo(116), list);
		    }
		    break;
                    case 228: /* reduce AAelementtestpartpart1ElementtestPartPart */
		    {
			ArrayList list = new228();
			push(goTo(117), list);
		    }
		    break;
                    case 229: /* reduce AAelementtestpartpart2ElementtestPartPart */
		    {
			ArrayList list = new229();
			push(goTo(117), list);
		    }
		    break;
                    case 230: /* reduce AElementElementnameorwildcard */
		    {
			ArrayList list = new230();
			push(goTo(118), list);
		    }
		    break;
                    case 231: /* reduce AStarElementnameorwildcard */
		    {
			ArrayList list = new231();
			push(goTo(118), list);
		    }
		    break;
                    case 232: /* reduce ASchemaelementtest */
		    {
			ArrayList list = new232();
			push(goTo(119), list);
		    }
		    break;
                    case 233: /* reduce AElementdeclaration */
		    {
			ArrayList list = new233();
			push(goTo(120), list);
		    }
		    break;
                    case 234: /* reduce AAttributename */
		    {
			ArrayList list = new234();
			push(goTo(121), list);
		    }
		    break;
                    case 235: /* reduce AElementname */
		    {
			ArrayList list = new235();
			push(goTo(122), list);
		    }
		    break;
                    case 236: /* reduce ATypename */
		    {
			ArrayList list = new236();
			push(goTo(123), list);
		    }
		    break;
                    case 237: /* reduce APrefixedQname */
		    {
			ArrayList list = new237();
			push(goTo(124), list);
		    }
		    break;
                    case 238: /* reduce AUnprefixedQname */
		    {
			ArrayList list = new238();
			push(goTo(124), list);
		    }
		    break;
                    case 239: /* reduce A1Prefixedname */
		    {
			ArrayList list = new239();
			push(goTo(125), list);
		    }
		    break;
                    case 240: /* reduce AUnprefixedname */
		    {
			ArrayList list = new240();
			push(goTo(126), list);
		    }
		    break;
                    case 241: /* reduce ALocalpart */
		    {
			ArrayList list = new241();
			push(goTo(127), list);
		    }
		    break;
                    case 242: /* reduce APrefixedNsattname */
		    {
			ArrayList list = new242();
			push(goTo(128), list);
		    }
		    break;
                    case 243: /* reduce ADefaultNsattname */
		    {
			ArrayList list = new243();
			push(goTo(128), list);
		    }
		    break;
                    case 244: /* reduce APrefixedattname */
		    {
			ArrayList list = new244();
			push(goTo(129), list);
		    }
		    break;
                    case 245: /* reduce ADefaultattname */
		    {
			ArrayList list = new245();
			push(goTo(130), list);
		    }
		    break;
                    case 246: /* reduce AAncname1Ncname */
		    {
			ArrayList list = new246();
			push(goTo(131), list);
		    }
		    break;
                    case 247: /* reduce AAncname2Ncname */
		    {
			ArrayList list = new247();
			push(goTo(131), list);
		    }
		    break;
                    case 248: /* reduce ALetterNcnamestartchar */
		    {
			ArrayList list = new248();
			push(goTo(132), list);
		    }
		    break;
                    case 249: /* reduce AUnderscoreNcnamestartchar */
		    {
			ArrayList list = new249();
			push(goTo(132), list);
		    }
		    break;
                    case 250: /* reduce ATerminal$ExprPart */
		    {
			ArrayList list = new250();
			push(goTo(133), list);
		    }
		    break;
                    case 251: /* reduce ANonTerminal$ExprPart */
		    {
			ArrayList list = new251();
			push(goTo(133), list);
		    }
		    break;
                    case 252: /* reduce ATerminal$SimpleforclausePart */
		    {
			ArrayList list = new252();
			push(goTo(134), list);
		    }
		    break;
                    case 253: /* reduce ANonTerminal$SimpleforclausePart */
		    {
			ArrayList list = new253();
			push(goTo(134), list);
		    }
		    break;
                    case 254: /* reduce ATerminal$QuantifiedexprPart */
		    {
			ArrayList list = new254();
			push(goTo(135), list);
		    }
		    break;
                    case 255: /* reduce ANonTerminal$QuantifiedexprPart */
		    {
			ArrayList list = new255();
			push(goTo(135), list);
		    }
		    break;
                    case 256: /* reduce ATerminal$OrexprPart */
		    {
			ArrayList list = new256();
			push(goTo(136), list);
		    }
		    break;
                    case 257: /* reduce ANonTerminal$OrexprPart */
		    {
			ArrayList list = new257();
			push(goTo(136), list);
		    }
		    break;
                    case 258: /* reduce ATerminal$AndexprPart */
		    {
			ArrayList list = new258();
			push(goTo(137), list);
		    }
		    break;
                    case 259: /* reduce ANonTerminal$AndexprPart */
		    {
			ArrayList list = new259();
			push(goTo(137), list);
		    }
		    break;
                    case 260: /* reduce ATerminal$AdditiveexprPart */
		    {
			ArrayList list = new260();
			push(goTo(138), list);
		    }
		    break;
                    case 261: /* reduce ANonTerminal$AdditiveexprPart */
		    {
			ArrayList list = new261();
			push(goTo(138), list);
		    }
		    break;
                    case 262: /* reduce ATerminal$MultiplicativeexprPart */
		    {
			ArrayList list = new262();
			push(goTo(139), list);
		    }
		    break;
                    case 263: /* reduce ANonTerminal$MultiplicativeexprPart */
		    {
			ArrayList list = new263();
			push(goTo(139), list);
		    }
		    break;
                    case 264: /* reduce ATerminal$UnionexprPart */
		    {
			ArrayList list = new264();
			push(goTo(140), list);
		    }
		    break;
                    case 265: /* reduce ANonTerminal$UnionexprPart */
		    {
			ArrayList list = new265();
			push(goTo(140), list);
		    }
		    break;
                    case 266: /* reduce ATerminal$IntersectexceptexprPart */
		    {
			ArrayList list = new266();
			push(goTo(141), list);
		    }
		    break;
                    case 267: /* reduce ANonTerminal$IntersectexceptexprPart */
		    {
			ArrayList list = new267();
			push(goTo(141), list);
		    }
		    break;
                    case 268: /* reduce ATerminal$UnaryexprPart */
		    {
			ArrayList list = new268();
			push(goTo(142), list);
		    }
		    break;
                    case 269: /* reduce ANonTerminal$UnaryexprPart */
		    {
			ArrayList list = new269();
			push(goTo(142), list);
		    }
		    break;
                    case 270: /* reduce ATerminal$RelativepathexprPart */
		    {
			ArrayList list = new270();
			push(goTo(143), list);
		    }
		    break;
                    case 271: /* reduce ANonTerminal$RelativepathexprPart */
		    {
			ArrayList list = new271();
			push(goTo(143), list);
		    }
		    break;
                    case 272: /* reduce ATerminal$Predicate */
		    {
			ArrayList list = new272();
			push(goTo(144), list);
		    }
		    break;
                    case 273: /* reduce ANonTerminal$Predicate */
		    {
			ArrayList list = new273();
			push(goTo(144), list);
		    }
		    break;
                    case 274: /* reduce ATerminal$FunctioncallPartPart */
		    {
			ArrayList list = new274();
			push(goTo(145), list);
		    }
		    break;
                    case 275: /* reduce ANonTerminal$FunctioncallPartPart */
		    {
			ArrayList list = new275();
			push(goTo(145), list);
		    }
		    break;
                    case 276: /* reduce ATerminal$Ncnamechar */
		    {
			ArrayList list = new276();
			push(goTo(146), list);
		    }
		    break;
                    case 277: /* reduce ANonTerminal$Ncnamechar */
		    {
			ArrayList list = new277();
			push(goTo(146), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PXpath node1 = (PXpath) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAexpr11Xpath */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PXpath pxpathNode1;
        {
            // Block
        PExpr pexprNode2;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        }

        pexprNode2 = new AExpr(null, listNode4);
        }

        pxpathNode1 = new AXpath(pexprNode2);
        }
	nodeList.add(pxpathNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAexpr21Xpath */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PXpath pxpathNode1;
        {
            // Block
        PExpr pexprNode2;
        {
            // Block
        PExprsingle pexprsingleNode3;
        LinkedList listNode4 = new LinkedList();
        pexprsingleNode3 = (PExprsingle)nodeArrayList1.get(0);
        {
            // Block
        }

        pexprNode2 = new AExpr(pexprsingleNode3, listNode4);
        }

        pxpathNode1 = new AXpath(pexprNode2);
        }
	nodeList.add(pxpathNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAexpr31Xpath */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PXpath pxpathNode1;
        {
            // Block
        PExpr pexprNode2;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList1.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexprNode2 = new AExpr(null, listNode5);
        }

        pxpathNode1 = new AXpath(pexprNode2);
        }
	nodeList.add(pxpathNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAexpr41Xpath */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PXpath pxpathNode1;
        {
            // Block
        PExpr pexprNode2;
        {
            // Block
        PExprsingle pexprsingleNode3;
        LinkedList listNode5 = new LinkedList();
        pexprsingleNode3 = (PExprsingle)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexprNode2 = new AExpr(pexprsingleNode3, listNode5);
        }

        pxpathNode1 = new AXpath(pexprNode2);
        }
	nodeList.add(pxpathNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AExprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprPart pexprpartNode1;
        {
            // Block
        TComma tcommaNode2;
        PExprsingle pexprsingleNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprsingleNode3 = (PExprsingle)nodeArrayList2.get(0);

        pexprpartNode1 = new AExprPart(tcommaNode2, pexprsingleNode3);
        }
	nodeList.add(pexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AForExprsingle */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprsingle pexprsingleNode1;
        {
            // Block
        PForexpr pforexprNode2;
        pforexprNode2 = (PForexpr)nodeArrayList1.get(0);

        pexprsingleNode1 = new AForExprsingle(pforexprNode2);
        }
	nodeList.add(pexprsingleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AQuantifExprsingle */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprsingle pexprsingleNode1;
        {
            // Block
        PQuantifiedexpr pquantifiedexprNode2;
        pquantifiedexprNode2 = (PQuantifiedexpr)nodeArrayList1.get(0);

        pexprsingleNode1 = new AQuantifExprsingle(pquantifiedexprNode2);
        }
	nodeList.add(pexprsingleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AIfExprsingle */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprsingle pexprsingleNode1;
        {
            // Block
        PIfexpr pifexprNode2;
        pifexprNode2 = (PIfexpr)nodeArrayList1.get(0);

        pexprsingleNode1 = new AIfExprsingle(pifexprNode2);
        }
	nodeList.add(pexprsingleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AOrExprsingle */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprsingle pexprsingleNode1;
        {
            // Block
        POrexpr porexprNode2;
        porexprNode2 = (POrexpr)nodeArrayList1.get(0);

        pexprsingleNode1 = new AOrExprsingle(porexprNode2);
        }
	nodeList.add(pexprsingleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AForexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForexpr pforexprNode1;
        {
            // Block
        PSimpleforclause psimpleforclauseNode2;
        TKeywordReturn tkeywordreturnNode3;
        PExprsingle pexprsingleNode4;
        psimpleforclauseNode2 = (PSimpleforclause)nodeArrayList1.get(0);
        tkeywordreturnNode3 = (TKeywordReturn)nodeArrayList2.get(0);
        pexprsingleNode4 = (PExprsingle)nodeArrayList3.get(0);

        pforexprNode1 = new AForexpr(psimpleforclauseNode2, tkeywordreturnNode3, pexprsingleNode4);
        }
	nodeList.add(pforexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAsimpleforclause1Simpleforclause */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleforclause psimpleforclauseNode1;
        {
            // Block
        TKeywordFor tkeywordforNode2;
        TDollar tdollarNode3;
        PVarname pvarnameNode4;
        TKeywordIn tkeywordinNode5;
        PExprsingle pexprsingleNode6;
        LinkedList listNode7 = new LinkedList();
        tkeywordforNode2 = (TKeywordFor)nodeArrayList1.get(0);
        tdollarNode3 = (TDollar)nodeArrayList2.get(0);
        pvarnameNode4 = (PVarname)nodeArrayList3.get(0);
        tkeywordinNode5 = (TKeywordIn)nodeArrayList4.get(0);
        pexprsingleNode6 = (PExprsingle)nodeArrayList5.get(0);
        {
            // Block
        }

        psimpleforclauseNode1 = new ASimpleforclause(tkeywordforNode2, tdollarNode3, pvarnameNode4, tkeywordinNode5, pexprsingleNode6, listNode7);
        }
	nodeList.add(psimpleforclauseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAsimpleforclause2Simpleforclause */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleforclause psimpleforclauseNode1;
        {
            // Block
        TKeywordFor tkeywordforNode2;
        TDollar tdollarNode3;
        PVarname pvarnameNode4;
        TKeywordIn tkeywordinNode5;
        PExprsingle pexprsingleNode6;
        LinkedList listNode8 = new LinkedList();
        tkeywordforNode2 = (TKeywordFor)nodeArrayList1.get(0);
        tdollarNode3 = (TDollar)nodeArrayList2.get(0);
        pvarnameNode4 = (PVarname)nodeArrayList3.get(0);
        tkeywordinNode5 = (TKeywordIn)nodeArrayList4.get(0);
        pexprsingleNode6 = (PExprsingle)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        psimpleforclauseNode1 = new ASimpleforclause(tkeywordforNode2, tdollarNode3, pvarnameNode4, tkeywordinNode5, pexprsingleNode6, listNode8);
        }
	nodeList.add(psimpleforclauseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce ASimpleforclausePart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleforclausePart psimpleforclausepartNode1;
        {
            // Block
        TComma tcommaNode2;
        TDollar tdollarNode3;
        PVarname pvarnameNode4;
        TKeywordIn tkeywordinNode5;
        PExprsingle pexprsingleNode6;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tdollarNode3 = (TDollar)nodeArrayList2.get(0);
        pvarnameNode4 = (PVarname)nodeArrayList3.get(0);
        tkeywordinNode5 = (TKeywordIn)nodeArrayList4.get(0);
        pexprsingleNode6 = (PExprsingle)nodeArrayList5.get(0);

        psimpleforclausepartNode1 = new ASimpleforclausePart(tcommaNode2, tdollarNode3, pvarnameNode4, tkeywordinNode5, pexprsingleNode6);
        }
	nodeList.add(psimpleforclausepartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAquantifiedexpr1Quantifiedexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PQuantifiedexpr pquantifiedexprNode1;
        {
            // Block
        PSomeEveryPart psomeeverypartNode2;
        TDollar tdollarNode3;
        PVarname pvarnameNode4;
        TKeywordIn tkeywordinNode5;
        PExprsingle pexprsingleNode6;
        LinkedList listNode7 = new LinkedList();
        TKeywordSatisfies tkeywordsatisfiesNode8;
        PExprsingle pexprsingleNode9;
        psomeeverypartNode2 = (PSomeEveryPart)nodeArrayList1.get(0);
        tdollarNode3 = (TDollar)nodeArrayList2.get(0);
        pvarnameNode4 = (PVarname)nodeArrayList3.get(0);
        tkeywordinNode5 = (TKeywordIn)nodeArrayList4.get(0);
        pexprsingleNode6 = (PExprsingle)nodeArrayList5.get(0);
        {
            // Block
        }
        tkeywordsatisfiesNode8 = (TKeywordSatisfies)nodeArrayList6.get(0);
        pexprsingleNode9 = (PExprsingle)nodeArrayList7.get(0);

        pquantifiedexprNode1 = new AQuantifiedexpr(psomeeverypartNode2, tdollarNode3, pvarnameNode4, tkeywordinNode5, pexprsingleNode6, listNode7, tkeywordsatisfiesNode8, pexprsingleNode9);
        }
	nodeList.add(pquantifiedexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAquantifiedexpr2Quantifiedexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PQuantifiedexpr pquantifiedexprNode1;
        {
            // Block
        PSomeEveryPart psomeeverypartNode2;
        TDollar tdollarNode3;
        PVarname pvarnameNode4;
        TKeywordIn tkeywordinNode5;
        PExprsingle pexprsingleNode6;
        LinkedList listNode8 = new LinkedList();
        TKeywordSatisfies tkeywordsatisfiesNode9;
        PExprsingle pexprsingleNode10;
        psomeeverypartNode2 = (PSomeEveryPart)nodeArrayList1.get(0);
        tdollarNode3 = (TDollar)nodeArrayList2.get(0);
        pvarnameNode4 = (PVarname)nodeArrayList3.get(0);
        tkeywordinNode5 = (TKeywordIn)nodeArrayList4.get(0);
        pexprsingleNode6 = (PExprsingle)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tkeywordsatisfiesNode9 = (TKeywordSatisfies)nodeArrayList7.get(0);
        pexprsingleNode10 = (PExprsingle)nodeArrayList8.get(0);

        pquantifiedexprNode1 = new AQuantifiedexpr(psomeeverypartNode2, tdollarNode3, pvarnameNode4, tkeywordinNode5, pexprsingleNode6, listNode8, tkeywordsatisfiesNode9, pexprsingleNode10);
        }
	nodeList.add(pquantifiedexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ASomeSomeEveryPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSomeEveryPart psomeeverypartNode1;
        {
            // Block
        TKeywordSome tkeywordsomeNode2;
        tkeywordsomeNode2 = (TKeywordSome)nodeArrayList1.get(0);

        psomeeverypartNode1 = new ASomeSomeEveryPart(tkeywordsomeNode2);
        }
	nodeList.add(psomeeverypartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AEverySomeEveryPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSomeEveryPart psomeeverypartNode1;
        {
            // Block
        TKeywordEvery tkeywordeveryNode2;
        tkeywordeveryNode2 = (TKeywordEvery)nodeArrayList1.get(0);

        psomeeverypartNode1 = new AEverySomeEveryPart(tkeywordeveryNode2);
        }
	nodeList.add(psomeeverypartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AQuantifiedexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PQuantifiedexprPart pquantifiedexprpartNode1;
        {
            // Block
        TComma tcommaNode2;
        TDollar tdollarNode3;
        PVarname pvarnameNode4;
        TKeywordIn tkeywordinNode5;
        PExprsingle pexprsingleNode6;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tdollarNode3 = (TDollar)nodeArrayList2.get(0);
        pvarnameNode4 = (PVarname)nodeArrayList3.get(0);
        tkeywordinNode5 = (TKeywordIn)nodeArrayList4.get(0);
        pexprsingleNode6 = (PExprsingle)nodeArrayList5.get(0);

        pquantifiedexprpartNode1 = new AQuantifiedexprPart(tcommaNode2, tdollarNode3, pvarnameNode4, tkeywordinNode5, pexprsingleNode6);
        }
	nodeList.add(pquantifiedexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAexpr11Ifexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfexpr pifexprNode1;
        {
            // Block
        TKeywordIf tkeywordifNode2;
        TLparenth tlparenthNode3;
        PExpr pexprNode4;
        TRparenth trparenthNode7;
        TKeywordThen tkeywordthenNode8;
        PExprsingle pexprsingleNode9;
        TKeywordElse tkeywordelseNode10;
        PExprsingle pexprsingleNode11;
        tkeywordifNode2 = (TKeywordIf)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        {
            // Block
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList listNode6 = new LinkedList();
        {
            // Block
        }

        pexprNode4 = new AExpr(null, listNode6);
        }
        trparenthNode7 = (TRparenth)nodeArrayList3.get(0);
        tkeywordthenNode8 = (TKeywordThen)nodeArrayList4.get(0);
        pexprsingleNode9 = (PExprsingle)nodeArrayList5.get(0);
        tkeywordelseNode10 = (TKeywordElse)nodeArrayList6.get(0);
        pexprsingleNode11 = (PExprsingle)nodeArrayList7.get(0);

        pifexprNode1 = new AIfexpr(tkeywordifNode2, tlparenthNode3, pexprNode4, trparenthNode7, tkeywordthenNode8, pexprsingleNode9, tkeywordelseNode10, pexprsingleNode11);
        }
	nodeList.add(pifexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAexpr21Ifexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfexpr pifexprNode1;
        {
            // Block
        TKeywordIf tkeywordifNode2;
        TLparenth tlparenthNode3;
        PExpr pexprNode4;
        TRparenth trparenthNode7;
        TKeywordThen tkeywordthenNode8;
        PExprsingle pexprsingleNode9;
        TKeywordElse tkeywordelseNode10;
        PExprsingle pexprsingleNode11;
        tkeywordifNode2 = (TKeywordIf)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        {
            // Block
        PExprsingle pexprsingleNode5;
        LinkedList listNode6 = new LinkedList();
        pexprsingleNode5 = (PExprsingle)nodeArrayList3.get(0);
        {
            // Block
        }

        pexprNode4 = new AExpr(pexprsingleNode5, listNode6);
        }
        trparenthNode7 = (TRparenth)nodeArrayList4.get(0);
        tkeywordthenNode8 = (TKeywordThen)nodeArrayList5.get(0);
        pexprsingleNode9 = (PExprsingle)nodeArrayList6.get(0);
        tkeywordelseNode10 = (TKeywordElse)nodeArrayList7.get(0);
        pexprsingleNode11 = (PExprsingle)nodeArrayList8.get(0);

        pifexprNode1 = new AIfexpr(tkeywordifNode2, tlparenthNode3, pexprNode4, trparenthNode7, tkeywordthenNode8, pexprsingleNode9, tkeywordelseNode10, pexprsingleNode11);
        }
	nodeList.add(pifexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAexpr31Ifexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfexpr pifexprNode1;
        {
            // Block
        TKeywordIf tkeywordifNode2;
        TLparenth tlparenthNode3;
        PExpr pexprNode4;
        TRparenth trparenthNode8;
        TKeywordThen tkeywordthenNode9;
        PExprsingle pexprsingleNode10;
        TKeywordElse tkeywordelseNode11;
        PExprsingle pexprsingleNode12;
        tkeywordifNode2 = (TKeywordIf)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        {
            // Block
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList listNode7 = new LinkedList();
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pexprNode4 = new AExpr(null, listNode7);
        }
        trparenthNode8 = (TRparenth)nodeArrayList4.get(0);
        tkeywordthenNode9 = (TKeywordThen)nodeArrayList5.get(0);
        pexprsingleNode10 = (PExprsingle)nodeArrayList6.get(0);
        tkeywordelseNode11 = (TKeywordElse)nodeArrayList7.get(0);
        pexprsingleNode12 = (PExprsingle)nodeArrayList8.get(0);

        pifexprNode1 = new AIfexpr(tkeywordifNode2, tlparenthNode3, pexprNode4, trparenthNode8, tkeywordthenNode9, pexprsingleNode10, tkeywordelseNode11, pexprsingleNode12);
        }
	nodeList.add(pifexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAexpr41Ifexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfexpr pifexprNode1;
        {
            // Block
        TKeywordIf tkeywordifNode2;
        TLparenth tlparenthNode3;
        PExpr pexprNode4;
        TRparenth trparenthNode8;
        TKeywordThen tkeywordthenNode9;
        PExprsingle pexprsingleNode10;
        TKeywordElse tkeywordelseNode11;
        PExprsingle pexprsingleNode12;
        tkeywordifNode2 = (TKeywordIf)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        {
            // Block
        PExprsingle pexprsingleNode5;
        LinkedList listNode7 = new LinkedList();
        pexprsingleNode5 = (PExprsingle)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pexprNode4 = new AExpr(pexprsingleNode5, listNode7);
        }
        trparenthNode8 = (TRparenth)nodeArrayList5.get(0);
        tkeywordthenNode9 = (TKeywordThen)nodeArrayList6.get(0);
        pexprsingleNode10 = (PExprsingle)nodeArrayList7.get(0);
        tkeywordelseNode11 = (TKeywordElse)nodeArrayList8.get(0);
        pexprsingleNode12 = (PExprsingle)nodeArrayList9.get(0);

        pifexprNode1 = new AIfexpr(tkeywordifNode2, tlparenthNode3, pexprNode4, trparenthNode8, tkeywordthenNode9, pexprsingleNode10, tkeywordelseNode11, pexprsingleNode12);
        }
	nodeList.add(pifexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAorexpr1Orexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POrexpr porexprNode1;
        {
            // Block
        PAndexpr pandexprNode2;
        LinkedList listNode3 = new LinkedList();
        pandexprNode2 = (PAndexpr)nodeArrayList1.get(0);
        {
            // Block
        }

        porexprNode1 = new AOrexpr(pandexprNode2, listNode3);
        }
	nodeList.add(porexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAorexpr2Orexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POrexpr porexprNode1;
        {
            // Block
        PAndexpr pandexprNode2;
        LinkedList listNode4 = new LinkedList();
        pandexprNode2 = (PAndexpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        porexprNode1 = new AOrexpr(pandexprNode2, listNode4);
        }
	nodeList.add(porexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AOrexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POrexprPart porexprpartNode1;
        {
            // Block
        TKeywordOr tkeywordorNode2;
        PAndexpr pandexprNode3;
        tkeywordorNode2 = (TKeywordOr)nodeArrayList1.get(0);
        pandexprNode3 = (PAndexpr)nodeArrayList2.get(0);

        porexprpartNode1 = new AOrexprPart(tkeywordorNode2, pandexprNode3);
        }
	nodeList.add(porexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AAandexpr1Andexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndexpr pandexprNode1;
        {
            // Block
        PComparisonexpr pcomparisonexprNode2;
        LinkedList listNode3 = new LinkedList();
        pcomparisonexprNode2 = (PComparisonexpr)nodeArrayList1.get(0);
        {
            // Block
        }

        pandexprNode1 = new AAndexpr(pcomparisonexprNode2, listNode3);
        }
	nodeList.add(pandexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAandexpr2Andexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndexpr pandexprNode1;
        {
            // Block
        PComparisonexpr pcomparisonexprNode2;
        LinkedList listNode4 = new LinkedList();
        pcomparisonexprNode2 = (PComparisonexpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pandexprNode1 = new AAndexpr(pcomparisonexprNode2, listNode4);
        }
	nodeList.add(pandexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AAndexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndexprPart pandexprpartNode1;
        {
            // Block
        TKeywordAnd tkeywordandNode2;
        PComparisonexpr pcomparisonexprNode3;
        tkeywordandNode2 = (TKeywordAnd)nodeArrayList1.get(0);
        pcomparisonexprNode3 = (PComparisonexpr)nodeArrayList2.get(0);

        pandexprpartNode1 = new AAndexprPart(tkeywordandNode2, pcomparisonexprNode3);
        }
	nodeList.add(pandexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AAcomparisonexpr1Comparisonexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComparisonexpr pcomparisonexprNode1;
        {
            // Block
        PRangeexpr prangeexprNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        prangeexprNode2 = (PRangeexpr)nodeArrayList1.get(0);

        pcomparisonexprNode1 = new AComparisonexpr(prangeexprNode2, null);
        }
	nodeList.add(pcomparisonexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAcomparisonexpr2Comparisonexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComparisonexpr pcomparisonexprNode1;
        {
            // Block
        PRangeexpr prangeexprNode2;
        PComparisonexprPart pcomparisonexprpartNode3;
        prangeexprNode2 = (PRangeexpr)nodeArrayList1.get(0);
        pcomparisonexprpartNode3 = (PComparisonexprPart)nodeArrayList2.get(0);

        pcomparisonexprNode1 = new AComparisonexpr(prangeexprNode2, pcomparisonexprpartNode3);
        }
	nodeList.add(pcomparisonexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AComparisonexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComparisonexprPart pcomparisonexprpartNode1;
        {
            // Block
        PComparisonexprPartPart pcomparisonexprpartpartNode2;
        PRangeexpr prangeexprNode3;
        pcomparisonexprpartpartNode2 = (PComparisonexprPartPart)nodeArrayList1.get(0);
        prangeexprNode3 = (PRangeexpr)nodeArrayList2.get(0);

        pcomparisonexprpartNode1 = new AComparisonexprPart(pcomparisonexprpartpartNode2, prangeexprNode3);
        }
	nodeList.add(pcomparisonexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AValueComparisonexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComparisonexprPartPart pcomparisonexprpartpartNode1;
        {
            // Block
        PValuecomp pvaluecompNode2;
        pvaluecompNode2 = (PValuecomp)nodeArrayList1.get(0);

        pcomparisonexprpartpartNode1 = new AValueComparisonexprPartPart(pvaluecompNode2);
        }
	nodeList.add(pcomparisonexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AGeneralComparisonexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComparisonexprPartPart pcomparisonexprpartpartNode1;
        {
            // Block
        PGeneralcomp pgeneralcompNode2;
        pgeneralcompNode2 = (PGeneralcomp)nodeArrayList1.get(0);

        pcomparisonexprpartpartNode1 = new AGeneralComparisonexprPartPart(pgeneralcompNode2);
        }
	nodeList.add(pcomparisonexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ANodeComparisonexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComparisonexprPartPart pcomparisonexprpartpartNode1;
        {
            // Block
        PNodecomp pnodecompNode2;
        pnodecompNode2 = (PNodecomp)nodeArrayList1.get(0);

        pcomparisonexprpartpartNode1 = new ANodeComparisonexprPartPart(pnodecompNode2);
        }
	nodeList.add(pcomparisonexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AArangeexpr1Rangeexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRangeexpr prangeexprNode1;
        {
            // Block
        PAdditiveexpr padditiveexprNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        padditiveexprNode2 = (PAdditiveexpr)nodeArrayList1.get(0);

        prangeexprNode1 = new ARangeexpr(padditiveexprNode2, null);
        }
	nodeList.add(prangeexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AArangeexpr2Rangeexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRangeexpr prangeexprNode1;
        {
            // Block
        PAdditiveexpr padditiveexprNode2;
        PRangeexprPart prangeexprpartNode3;
        padditiveexprNode2 = (PAdditiveexpr)nodeArrayList1.get(0);
        prangeexprpartNode3 = (PRangeexprPart)nodeArrayList2.get(0);

        prangeexprNode1 = new ARangeexpr(padditiveexprNode2, prangeexprpartNode3);
        }
	nodeList.add(prangeexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ARangeexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRangeexprPart prangeexprpartNode1;
        {
            // Block
        TKeywordTo tkeywordtoNode2;
        PAdditiveexpr padditiveexprNode3;
        tkeywordtoNode2 = (TKeywordTo)nodeArrayList1.get(0);
        padditiveexprNode3 = (PAdditiveexpr)nodeArrayList2.get(0);

        prangeexprpartNode1 = new ARangeexprPart(tkeywordtoNode2, padditiveexprNode3);
        }
	nodeList.add(prangeexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AAadditiveexpr1Additiveexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditiveexpr padditiveexprNode1;
        {
            // Block
        PMultiplicativeexpr pmultiplicativeexprNode2;
        LinkedList listNode3 = new LinkedList();
        pmultiplicativeexprNode2 = (PMultiplicativeexpr)nodeArrayList1.get(0);
        {
            // Block
        }

        padditiveexprNode1 = new AAdditiveexpr(pmultiplicativeexprNode2, listNode3);
        }
	nodeList.add(padditiveexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AAadditiveexpr2Additiveexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditiveexpr padditiveexprNode1;
        {
            // Block
        PMultiplicativeexpr pmultiplicativeexprNode2;
        LinkedList listNode4 = new LinkedList();
        pmultiplicativeexprNode2 = (PMultiplicativeexpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        padditiveexprNode1 = new AAdditiveexpr(pmultiplicativeexprNode2, listNode4);
        }
	nodeList.add(padditiveexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAdditiveexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditiveexprPart padditiveexprpartNode1;
        {
            // Block
        PAdditiveexprPartPart padditiveexprpartpartNode2;
        PMultiplicativeexpr pmultiplicativeexprNode3;
        padditiveexprpartpartNode2 = (PAdditiveexprPartPart)nodeArrayList1.get(0);
        pmultiplicativeexprNode3 = (PMultiplicativeexpr)nodeArrayList2.get(0);

        padditiveexprpartNode1 = new AAdditiveexprPart(padditiveexprpartpartNode2, pmultiplicativeexprNode3);
        }
	nodeList.add(padditiveexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce APlusAdditiveexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditiveexprPartPart padditiveexprpartpartNode1;
        {
            // Block
        TPlus2 tplus2Node2;
        tplus2Node2 = (TPlus2)nodeArrayList1.get(0);

        padditiveexprpartpartNode1 = new APlusAdditiveexprPartPart(tplus2Node2);
        }
	nodeList.add(padditiveexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AMinusAdditiveexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAdditiveexprPartPart padditiveexprpartpartNode1;
        {
            // Block
        TMinus2 tminus2Node2;
        tminus2Node2 = (TMinus2)nodeArrayList1.get(0);

        padditiveexprpartpartNode1 = new AMinusAdditiveexprPartPart(tminus2Node2);
        }
	nodeList.add(padditiveexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAmultiplicativeexpr1Multiplicativeexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeexpr pmultiplicativeexprNode1;
        {
            // Block
        PUnionexpr punionexprNode2;
        LinkedList listNode3 = new LinkedList();
        punionexprNode2 = (PUnionexpr)nodeArrayList1.get(0);
        {
            // Block
        }

        pmultiplicativeexprNode1 = new AMultiplicativeexpr(punionexprNode2, listNode3);
        }
	nodeList.add(pmultiplicativeexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AAmultiplicativeexpr2Multiplicativeexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeexpr pmultiplicativeexprNode1;
        {
            // Block
        PUnionexpr punionexprNode2;
        LinkedList listNode4 = new LinkedList();
        punionexprNode2 = (PUnionexpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pmultiplicativeexprNode1 = new AMultiplicativeexpr(punionexprNode2, listNode4);
        }
	nodeList.add(pmultiplicativeexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AMultiplicativeexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeexprPart pmultiplicativeexprpartNode1;
        {
            // Block
        PMultiplicativeexprPartPart pmultiplicativeexprpartpartNode2;
        PUnionexpr punionexprNode3;
        pmultiplicativeexprpartpartNode2 = (PMultiplicativeexprPartPart)nodeArrayList1.get(0);
        punionexprNode3 = (PUnionexpr)nodeArrayList2.get(0);

        pmultiplicativeexprpartNode1 = new AMultiplicativeexprPart(pmultiplicativeexprpartpartNode2, punionexprNode3);
        }
	nodeList.add(pmultiplicativeexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AStarMultiplicativeexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeexprPartPart pmultiplicativeexprpartpartNode1;
        {
            // Block
        TStar2 tstar2Node2;
        tstar2Node2 = (TStar2)nodeArrayList1.get(0);

        pmultiplicativeexprpartpartNode1 = new AStarMultiplicativeexprPartPart(tstar2Node2);
        }
	nodeList.add(pmultiplicativeexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ADivMultiplicativeexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeexprPartPart pmultiplicativeexprpartpartNode1;
        {
            // Block
        TKeywordDiv tkeyworddivNode2;
        tkeyworddivNode2 = (TKeywordDiv)nodeArrayList1.get(0);

        pmultiplicativeexprpartpartNode1 = new ADivMultiplicativeexprPartPart(tkeyworddivNode2);
        }
	nodeList.add(pmultiplicativeexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AIdivMultiplicativeexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeexprPartPart pmultiplicativeexprpartpartNode1;
        {
            // Block
        TKeywordIdiv tkeywordidivNode2;
        tkeywordidivNode2 = (TKeywordIdiv)nodeArrayList1.get(0);

        pmultiplicativeexprpartpartNode1 = new AIdivMultiplicativeexprPartPart(tkeywordidivNode2);
        }
	nodeList.add(pmultiplicativeexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AModMultiplicativeexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiplicativeexprPartPart pmultiplicativeexprpartpartNode1;
        {
            // Block
        TKeywordMod tkeywordmodNode2;
        tkeywordmodNode2 = (TKeywordMod)nodeArrayList1.get(0);

        pmultiplicativeexprpartpartNode1 = new AModMultiplicativeexprPartPart(tkeywordmodNode2);
        }
	nodeList.add(pmultiplicativeexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AAunionexpr1Unionexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnionexpr punionexprNode1;
        {
            // Block
        PIntersectexceptexpr pintersectexceptexprNode2;
        LinkedList listNode3 = new LinkedList();
        pintersectexceptexprNode2 = (PIntersectexceptexpr)nodeArrayList1.get(0);
        {
            // Block
        }

        punionexprNode1 = new AUnionexpr(pintersectexceptexprNode2, listNode3);
        }
	nodeList.add(punionexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AAunionexpr2Unionexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnionexpr punionexprNode1;
        {
            // Block
        PIntersectexceptexpr pintersectexceptexprNode2;
        LinkedList listNode4 = new LinkedList();
        pintersectexceptexprNode2 = (PIntersectexceptexpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        punionexprNode1 = new AUnionexpr(pintersectexceptexprNode2, listNode4);
        }
	nodeList.add(punionexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AUnionexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnionexprPart punionexprpartNode1;
        {
            // Block
        PUnionexprPartPart punionexprpartpartNode2;
        PIntersectexceptexpr pintersectexceptexprNode3;
        punionexprpartpartNode2 = (PUnionexprPartPart)nodeArrayList1.get(0);
        pintersectexceptexprNode3 = (PIntersectexceptexpr)nodeArrayList2.get(0);

        punionexprpartNode1 = new AUnionexprPart(punionexprpartpartNode2, pintersectexceptexprNode3);
        }
	nodeList.add(punionexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AUnionkeyUnionexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnionexprPartPart punionexprpartpartNode1;
        {
            // Block
        TKeywordUnion tkeywordunionNode2;
        tkeywordunionNode2 = (TKeywordUnion)nodeArrayList1.get(0);

        punionexprpartpartNode1 = new AUnionkeyUnionexprPartPart(tkeywordunionNode2);
        }
	nodeList.add(punionexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AUnionUnionexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnionexprPartPart punionexprpartpartNode1;
        {
            // Block
        TUnion tunionNode2;
        tunionNode2 = (TUnion)nodeArrayList1.get(0);

        punionexprpartpartNode1 = new AUnionUnionexprPartPart(tunionNode2);
        }
	nodeList.add(punionexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AAintersectexceptexpr1Intersectexceptexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIntersectexceptexpr pintersectexceptexprNode1;
        {
            // Block
        PInstanceofexpr pinstanceofexprNode2;
        LinkedList listNode3 = new LinkedList();
        pinstanceofexprNode2 = (PInstanceofexpr)nodeArrayList1.get(0);
        {
            // Block
        }

        pintersectexceptexprNode1 = new AIntersectexceptexpr(pinstanceofexprNode2, listNode3);
        }
	nodeList.add(pintersectexceptexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AAintersectexceptexpr2Intersectexceptexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIntersectexceptexpr pintersectexceptexprNode1;
        {
            // Block
        PInstanceofexpr pinstanceofexprNode2;
        LinkedList listNode4 = new LinkedList();
        pinstanceofexprNode2 = (PInstanceofexpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pintersectexceptexprNode1 = new AIntersectexceptexpr(pinstanceofexprNode2, listNode4);
        }
	nodeList.add(pintersectexceptexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AIntersectexceptexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIntersectexceptexprPart pintersectexceptexprpartNode1;
        {
            // Block
        PIntersectexceptexprPartPart pintersectexceptexprpartpartNode2;
        PInstanceofexpr pinstanceofexprNode3;
        pintersectexceptexprpartpartNode2 = (PIntersectexceptexprPartPart)nodeArrayList1.get(0);
        pinstanceofexprNode3 = (PInstanceofexpr)nodeArrayList2.get(0);

        pintersectexceptexprpartNode1 = new AIntersectexceptexprPart(pintersectexceptexprpartpartNode2, pinstanceofexprNode3);
        }
	nodeList.add(pintersectexceptexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AIntersectIntersectexceptexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIntersectexceptexprPartPart pintersectexceptexprpartpartNode1;
        {
            // Block
        TKeywordIntersect tkeywordintersectNode2;
        tkeywordintersectNode2 = (TKeywordIntersect)nodeArrayList1.get(0);

        pintersectexceptexprpartpartNode1 = new AIntersectIntersectexceptexprPartPart(tkeywordintersectNode2);
        }
	nodeList.add(pintersectexceptexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AExceptIntersectexceptexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIntersectexceptexprPartPart pintersectexceptexprpartpartNode1;
        {
            // Block
        TKeywordExcept tkeywordexceptNode2;
        tkeywordexceptNode2 = (TKeywordExcept)nodeArrayList1.get(0);

        pintersectexceptexprpartpartNode1 = new AExceptIntersectexceptexprPartPart(tkeywordexceptNode2);
        }
	nodeList.add(pintersectexceptexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AAinstanceofexpr1Instanceofexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInstanceofexpr pinstanceofexprNode1;
        {
            // Block
        PTreatexpr ptreatexprNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        ptreatexprNode2 = (PTreatexpr)nodeArrayList1.get(0);

        pinstanceofexprNode1 = new AInstanceofexpr(ptreatexprNode2, null);
        }
	nodeList.add(pinstanceofexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AAinstanceofexpr2Instanceofexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInstanceofexpr pinstanceofexprNode1;
        {
            // Block
        PTreatexpr ptreatexprNode2;
        PInstanceofexprPart pinstanceofexprpartNode3;
        ptreatexprNode2 = (PTreatexpr)nodeArrayList1.get(0);
        pinstanceofexprpartNode3 = (PInstanceofexprPart)nodeArrayList2.get(0);

        pinstanceofexprNode1 = new AInstanceofexpr(ptreatexprNode2, pinstanceofexprpartNode3);
        }
	nodeList.add(pinstanceofexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AInstanceofexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInstanceofexprPart pinstanceofexprpartNode1;
        {
            // Block
        TKeywordInstance tkeywordinstanceNode2;
        TKeywordOf tkeywordofNode3;
        PSequencetype psequencetypeNode4;
        tkeywordinstanceNode2 = (TKeywordInstance)nodeArrayList1.get(0);
        tkeywordofNode3 = (TKeywordOf)nodeArrayList2.get(0);
        psequencetypeNode4 = (PSequencetype)nodeArrayList3.get(0);

        pinstanceofexprpartNode1 = new AInstanceofexprPart(tkeywordinstanceNode2, tkeywordofNode3, psequencetypeNode4);
        }
	nodeList.add(pinstanceofexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AAtreatexpr1Treatexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTreatexpr ptreatexprNode1;
        {
            // Block
        PCastableexpr pcastableexprNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pcastableexprNode2 = (PCastableexpr)nodeArrayList1.get(0);

        ptreatexprNode1 = new ATreatexpr(pcastableexprNode2, null);
        }
	nodeList.add(ptreatexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AAtreatexpr2Treatexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTreatexpr ptreatexprNode1;
        {
            // Block
        PCastableexpr pcastableexprNode2;
        PTreatexprPart ptreatexprpartNode3;
        pcastableexprNode2 = (PCastableexpr)nodeArrayList1.get(0);
        ptreatexprpartNode3 = (PTreatexprPart)nodeArrayList2.get(0);

        ptreatexprNode1 = new ATreatexpr(pcastableexprNode2, ptreatexprpartNode3);
        }
	nodeList.add(ptreatexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ATreatexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTreatexprPart ptreatexprpartNode1;
        {
            // Block
        TKeywordTreat tkeywordtreatNode2;
        TKeywordAs tkeywordasNode3;
        PSequencetype psequencetypeNode4;
        tkeywordtreatNode2 = (TKeywordTreat)nodeArrayList1.get(0);
        tkeywordasNode3 = (TKeywordAs)nodeArrayList2.get(0);
        psequencetypeNode4 = (PSequencetype)nodeArrayList3.get(0);

        ptreatexprpartNode1 = new ATreatexprPart(tkeywordtreatNode2, tkeywordasNode3, psequencetypeNode4);
        }
	nodeList.add(ptreatexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AAcastableexpr1Castableexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCastableexpr pcastableexprNode1;
        {
            // Block
        PCastexpr pcastexprNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pcastexprNode2 = (PCastexpr)nodeArrayList1.get(0);

        pcastableexprNode1 = new ACastableexpr(pcastexprNode2, null);
        }
	nodeList.add(pcastableexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AAcastableexpr2Castableexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCastableexpr pcastableexprNode1;
        {
            // Block
        PCastexpr pcastexprNode2;
        PCastableexprPart pcastableexprpartNode3;
        pcastexprNode2 = (PCastexpr)nodeArrayList1.get(0);
        pcastableexprpartNode3 = (PCastableexprPart)nodeArrayList2.get(0);

        pcastableexprNode1 = new ACastableexpr(pcastexprNode2, pcastableexprpartNode3);
        }
	nodeList.add(pcastableexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce ACastableexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCastableexprPart pcastableexprpartNode1;
        {
            // Block
        TKeywordCastable tkeywordcastableNode2;
        TKeywordAs tkeywordasNode3;
        PSingletype psingletypeNode4;
        tkeywordcastableNode2 = (TKeywordCastable)nodeArrayList1.get(0);
        tkeywordasNode3 = (TKeywordAs)nodeArrayList2.get(0);
        psingletypeNode4 = (PSingletype)nodeArrayList3.get(0);

        pcastableexprpartNode1 = new ACastableexprPart(tkeywordcastableNode2, tkeywordasNode3, psingletypeNode4);
        }
	nodeList.add(pcastableexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AAcastexpr1Castexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCastexpr pcastexprNode1;
        {
            // Block
        PUnaryexpr punaryexprNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        punaryexprNode2 = (PUnaryexpr)nodeArrayList1.get(0);

        pcastexprNode1 = new ACastexpr(punaryexprNode2, null);
        }
	nodeList.add(pcastexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AAcastexpr2Castexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCastexpr pcastexprNode1;
        {
            // Block
        PUnaryexpr punaryexprNode2;
        PCastexprPart pcastexprpartNode3;
        punaryexprNode2 = (PUnaryexpr)nodeArrayList1.get(0);
        pcastexprpartNode3 = (PCastexprPart)nodeArrayList2.get(0);

        pcastexprNode1 = new ACastexpr(punaryexprNode2, pcastexprpartNode3);
        }
	nodeList.add(pcastexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ACastexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCastexprPart pcastexprpartNode1;
        {
            // Block
        TKeywordCast tkeywordcastNode2;
        TKeywordAs tkeywordasNode3;
        PSingletype psingletypeNode4;
        tkeywordcastNode2 = (TKeywordCast)nodeArrayList1.get(0);
        tkeywordasNode3 = (TKeywordAs)nodeArrayList2.get(0);
        psingletypeNode4 = (PSingletype)nodeArrayList3.get(0);

        pcastexprpartNode1 = new ACastexprPart(tkeywordcastNode2, tkeywordasNode3, psingletypeNode4);
        }
	nodeList.add(pcastexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce AAunaryexpr1Unaryexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnaryexpr punaryexprNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        PValueexpr pvalueexprNode3;
        {
            // Block
        }
        pvalueexprNode3 = (PValueexpr)nodeArrayList1.get(0);

        punaryexprNode1 = new AUnaryexpr(listNode2, pvalueexprNode3);
        }
	nodeList.add(punaryexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AAunaryexpr2Unaryexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnaryexpr punaryexprNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PValueexpr pvalueexprNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pvalueexprNode4 = (PValueexpr)nodeArrayList2.get(0);

        punaryexprNode1 = new AUnaryexpr(listNode3, pvalueexprNode4);
        }
	nodeList.add(punaryexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AMinusUnaryexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnaryexprPart punaryexprpartNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        punaryexprpartNode1 = new AMinusUnaryexprPart(tminusNode2);
        }
	nodeList.add(punaryexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce APlusUnaryexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnaryexprPart punaryexprpartNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        punaryexprpartNode1 = new APlusUnaryexprPart(tplusNode2);
        }
	nodeList.add(punaryexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AValueexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValueexpr pvalueexprNode1;
        {
            // Block
        PPathexpr ppathexprNode2;
        ppathexprNode2 = (PPathexpr)nodeArrayList1.get(0);

        pvalueexprNode1 = new AValueexpr(ppathexprNode2);
        }
	nodeList.add(pvalueexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AEqGeneralcomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeneralcomp pgeneralcompNode1;
        {
            // Block
        TEquals tequalsNode2;
        tequalsNode2 = (TEquals)nodeArrayList1.get(0);

        pgeneralcompNode1 = new AEqGeneralcomp(tequalsNode2);
        }
	nodeList.add(pgeneralcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ANeGeneralcomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeneralcomp pgeneralcompNode1;
        {
            // Block
        TNeAbbrev tneabbrevNode2;
        tneabbrevNode2 = (TNeAbbrev)nodeArrayList1.get(0);

        pgeneralcompNode1 = new ANeGeneralcomp(tneabbrevNode2);
        }
	nodeList.add(pgeneralcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce ALtGeneralcomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeneralcomp pgeneralcompNode1;
        {
            // Block
        TLtAbbrev tltabbrevNode2;
        tltabbrevNode2 = (TLtAbbrev)nodeArrayList1.get(0);

        pgeneralcompNode1 = new ALtGeneralcomp(tltabbrevNode2);
        }
	nodeList.add(pgeneralcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ALeGeneralcomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeneralcomp pgeneralcompNode1;
        {
            // Block
        TLeAbbrev tleabbrevNode2;
        tleabbrevNode2 = (TLeAbbrev)nodeArrayList1.get(0);

        pgeneralcompNode1 = new ALeGeneralcomp(tleabbrevNode2);
        }
	nodeList.add(pgeneralcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce AGtGeneralcomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeneralcomp pgeneralcompNode1;
        {
            // Block
        TGtAbbrev tgtabbrevNode2;
        tgtabbrevNode2 = (TGtAbbrev)nodeArrayList1.get(0);

        pgeneralcompNode1 = new AGtGeneralcomp(tgtabbrevNode2);
        }
	nodeList.add(pgeneralcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AGeGeneralcomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeneralcomp pgeneralcompNode1;
        {
            // Block
        TGeAbbrev tgeabbrevNode2;
        tgeabbrevNode2 = (TGeAbbrev)nodeArrayList1.get(0);

        pgeneralcompNode1 = new AGeGeneralcomp(tgeabbrevNode2);
        }
	nodeList.add(pgeneralcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce AEqValuecomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValuecomp pvaluecompNode1;
        {
            // Block
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        pvaluecompNode1 = new AEqValuecomp(teqNode2);
        }
	nodeList.add(pvaluecompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce ANeValuecomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValuecomp pvaluecompNode1;
        {
            // Block
        TNe tneNode2;
        tneNode2 = (TNe)nodeArrayList1.get(0);

        pvaluecompNode1 = new ANeValuecomp(tneNode2);
        }
	nodeList.add(pvaluecompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce ALtValuecomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValuecomp pvaluecompNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        pvaluecompNode1 = new ALtValuecomp(tltNode2);
        }
	nodeList.add(pvaluecompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce ALeValuecomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValuecomp pvaluecompNode1;
        {
            // Block
        TLe tleNode2;
        tleNode2 = (TLe)nodeArrayList1.get(0);

        pvaluecompNode1 = new ALeValuecomp(tleNode2);
        }
	nodeList.add(pvaluecompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AGtValuecomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValuecomp pvaluecompNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        pvaluecompNode1 = new AGtValuecomp(tgtNode2);
        }
	nodeList.add(pvaluecompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce AGeValuecomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValuecomp pvaluecompNode1;
        {
            // Block
        TGe tgeNode2;
        tgeNode2 = (TGe)nodeArrayList1.get(0);

        pvaluecompNode1 = new AGeValuecomp(tgeNode2);
        }
	nodeList.add(pvaluecompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AIsNodecomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNodecomp pnodecompNode1;
        {
            // Block
        TKeywordIs tkeywordisNode2;
        tkeywordisNode2 = (TKeywordIs)nodeArrayList1.get(0);

        pnodecompNode1 = new AIsNodecomp(tkeywordisNode2);
        }
	nodeList.add(pnodecompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce ANcomppreNodecomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNodecomp pnodecompNode1;
        {
            // Block
        TNcompPrecedes tncompprecedesNode2;
        tncompprecedesNode2 = (TNcompPrecedes)nodeArrayList1.get(0);

        pnodecompNode1 = new ANcomppreNodecomp(tncompprecedesNode2);
        }
	nodeList.add(pnodecompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce ANcompfolNodecomp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNodecomp pnodecompNode1;
        {
            // Block
        TNcompFollows tncompfollowsNode2;
        tncompfollowsNode2 = (TNcompFollows)nodeArrayList1.get(0);

        pnodecompNode1 = new ANcompfolNodecomp(tncompfollowsNode2);
        }
	nodeList.add(pnodecompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce APath1Pathexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathexpr ppathexprNode1;
        {
            // Block
        PPathexprPartOne ppathexprpartoneNode2;
        ppathexprpartoneNode2 = (PPathexprPartOne)nodeArrayList1.get(0);

        ppathexprNode1 = new APath1Pathexpr(ppathexprpartoneNode2);
        }
	nodeList.add(ppathexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce APath2Pathexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathexpr ppathexprNode1;
        {
            // Block
        PPathexprPartTwo ppathexprparttwoNode2;
        ppathexprparttwoNode2 = (PPathexprPartTwo)nodeArrayList1.get(0);

        ppathexprNode1 = new APath2Pathexpr(ppathexprparttwoNode2);
        }
	nodeList.add(ppathexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce ARelpathPathexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathexpr ppathexprNode1;
        {
            // Block
        PRelativepathexpr prelativepathexprNode2;
        prelativepathexprNode2 = (PRelativepathexpr)nodeArrayList1.get(0);

        ppathexprNode1 = new ARelpathPathexpr(prelativepathexprNode2);
        }
	nodeList.add(ppathexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce AApathexprpartone1PathexprPartOne */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathexprPartOne ppathexprpartoneNode1;
        {
            // Block
        TAbbrevRoot tabbrevrootNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tabbrevrootNode2 = (TAbbrevRoot)nodeArrayList1.get(0);

        ppathexprpartoneNode1 = new APathexprPartOne(tabbrevrootNode2, null);
        }
	nodeList.add(ppathexprpartoneNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce AApathexprpartone2PathexprPartOne */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathexprPartOne ppathexprpartoneNode1;
        {
            // Block
        TAbbrevRoot tabbrevrootNode2;
        PRelativepathexpr prelativepathexprNode3;
        tabbrevrootNode2 = (TAbbrevRoot)nodeArrayList1.get(0);
        prelativepathexprNode3 = (PRelativepathexpr)nodeArrayList2.get(0);

        ppathexprpartoneNode1 = new APathexprPartOne(tabbrevrootNode2, prelativepathexprNode3);
        }
	nodeList.add(ppathexprpartoneNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce APathexprPartTwo */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathexprPartTwo ppathexprparttwoNode1;
        {
            // Block
        TAbbrevRootDesc tabbrevrootdescNode2;
        PRelativepathexpr prelativepathexprNode3;
        tabbrevrootdescNode2 = (TAbbrevRootDesc)nodeArrayList1.get(0);
        prelativepathexprNode3 = (PRelativepathexpr)nodeArrayList2.get(0);

        ppathexprparttwoNode1 = new APathexprPartTwo(tabbrevrootdescNode2, prelativepathexprNode3);
        }
	nodeList.add(ppathexprparttwoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce AArelativepathexpr1Relativepathexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelativepathexpr prelativepathexprNode1;
        {
            // Block
        PStepexpr pstepexprNode2;
        LinkedList listNode3 = new LinkedList();
        pstepexprNode2 = (PStepexpr)nodeArrayList1.get(0);
        {
            // Block
        }

        prelativepathexprNode1 = new ARelativepathexpr(pstepexprNode2, listNode3);
        }
	nodeList.add(prelativepathexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce AArelativepathexpr2Relativepathexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelativepathexpr prelativepathexprNode1;
        {
            // Block
        PStepexpr pstepexprNode2;
        LinkedList listNode4 = new LinkedList();
        pstepexprNode2 = (PStepexpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        prelativepathexprNode1 = new ARelativepathexpr(pstepexprNode2, listNode4);
        }
	nodeList.add(prelativepathexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce ARelativepathexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelativepathexprPart prelativepathexprpartNode1;
        {
            // Block
        PRelativepathexprPartPart prelativepathexprpartpartNode2;
        PStepexpr pstepexprNode3;
        prelativepathexprpartpartNode2 = (PRelativepathexprPartPart)nodeArrayList1.get(0);
        pstepexprNode3 = (PStepexpr)nodeArrayList2.get(0);

        prelativepathexprpartNode1 = new ARelativepathexprPart(prelativepathexprpartpartNode2, pstepexprNode3);
        }
	nodeList.add(prelativepathexprpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce ARootRelativepathexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelativepathexprPartPart prelativepathexprpartpartNode1;
        {
            // Block
        TAbbrevRoot tabbrevrootNode2;
        tabbrevrootNode2 = (TAbbrevRoot)nodeArrayList1.get(0);

        prelativepathexprpartpartNode1 = new ARootRelativepathexprPartPart(tabbrevrootNode2);
        }
	nodeList.add(prelativepathexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce ARootdescRelativepathexprPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelativepathexprPartPart prelativepathexprpartpartNode1;
        {
            // Block
        TAbbrevRootDesc tabbrevrootdescNode2;
        tabbrevrootdescNode2 = (TAbbrevRootDesc)nodeArrayList1.get(0);

        prelativepathexprpartpartNode1 = new ARootdescRelativepathexprPartPart(tabbrevrootdescNode2);
        }
	nodeList.add(prelativepathexprpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce AFilterStepexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStepexpr pstepexprNode1;
        {
            // Block
        PFilterexpr pfilterexprNode2;
        pfilterexprNode2 = (PFilterexpr)nodeArrayList1.get(0);

        pstepexprNode1 = new AFilterStepexpr(pfilterexprNode2);
        }
	nodeList.add(pstepexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce AAxisStepexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStepexpr pstepexprNode1;
        {
            // Block
        PAxisstep paxisstepNode2;
        paxisstepNode2 = (PAxisstep)nodeArrayList1.get(0);

        pstepexprNode1 = new AAxisStepexpr(paxisstepNode2);
        }
	nodeList.add(pstepexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce AAxisstep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAxisstep paxisstepNode1;
        {
            // Block
        PAxisstepPart paxissteppartNode2;
        PPredicatelist ppredicatelistNode3;
        paxissteppartNode2 = (PAxisstepPart)nodeArrayList1.get(0);
        ppredicatelistNode3 = (PPredicatelist)nodeArrayList2.get(0);

        paxisstepNode1 = new AAxisstep(paxissteppartNode2, ppredicatelistNode3);
        }
	nodeList.add(paxisstepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new105() /* reduce AReverseAxisstepPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAxisstepPart paxissteppartNode1;
        {
            // Block
        PReversestep preversestepNode2;
        preversestepNode2 = (PReversestep)nodeArrayList1.get(0);

        paxissteppartNode1 = new AReverseAxisstepPart(preversestepNode2);
        }
	nodeList.add(paxissteppartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new106() /* reduce AForwardAxisstepPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAxisstepPart paxissteppartNode1;
        {
            // Block
        PForwardstep pforwardstepNode2;
        pforwardstepNode2 = (PForwardstep)nodeArrayList1.get(0);

        paxissteppartNode1 = new AForwardAxisstepPart(pforwardstepNode2);
        }
	nodeList.add(paxissteppartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new107() /* reduce AForwardForwardstep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardstep pforwardstepNode1;
        {
            // Block
        PForwardstepPart pforwardsteppartNode2;
        pforwardsteppartNode2 = (PForwardstepPart)nodeArrayList1.get(0);

        pforwardstepNode1 = new AForwardForwardstep(pforwardsteppartNode2);
        }
	nodeList.add(pforwardstepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new108() /* reduce AAbbrevforwardForwardstep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardstep pforwardstepNode1;
        {
            // Block
        PAbbrevforwardstep pabbrevforwardstepNode2;
        pabbrevforwardstepNode2 = (PAbbrevforwardstep)nodeArrayList1.get(0);

        pforwardstepNode1 = new AAbbrevforwardForwardstep(pabbrevforwardstepNode2);
        }
	nodeList.add(pforwardstepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new109() /* reduce AForwardstepPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardstepPart pforwardsteppartNode1;
        {
            // Block
        PForwardaxis pforwardaxisNode2;
        PNodetest pnodetestNode3;
        pforwardaxisNode2 = (PForwardaxis)nodeArrayList1.get(0);
        pnodetestNode3 = (PNodetest)nodeArrayList2.get(0);

        pforwardsteppartNode1 = new AForwardstepPart(pforwardaxisNode2, pnodetestNode3);
        }
	nodeList.add(pforwardsteppartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new110() /* reduce AForward1Forwardaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxis pforwardaxisNode1;
        {
            // Block
        PForwardaxisPartOne pforwardaxispartoneNode2;
        pforwardaxispartoneNode2 = (PForwardaxisPartOne)nodeArrayList1.get(0);

        pforwardaxisNode1 = new AForward1Forwardaxis(pforwardaxispartoneNode2);
        }
	nodeList.add(pforwardaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new111() /* reduce AForward2Forwardaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxis pforwardaxisNode1;
        {
            // Block
        PForwardaxisPartTwo pforwardaxisparttwoNode2;
        pforwardaxisparttwoNode2 = (PForwardaxisPartTwo)nodeArrayList1.get(0);

        pforwardaxisNode1 = new AForward2Forwardaxis(pforwardaxisparttwoNode2);
        }
	nodeList.add(pforwardaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new112() /* reduce AForward3Forwardaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxis pforwardaxisNode1;
        {
            // Block
        PForwardaxisPartThree pforwardaxispartthreeNode2;
        pforwardaxispartthreeNode2 = (PForwardaxisPartThree)nodeArrayList1.get(0);

        pforwardaxisNode1 = new AForward3Forwardaxis(pforwardaxispartthreeNode2);
        }
	nodeList.add(pforwardaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new113() /* reduce AForward4Forwardaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxis pforwardaxisNode1;
        {
            // Block
        PForwardaxisPartFour pforwardaxispartfourNode2;
        pforwardaxispartfourNode2 = (PForwardaxisPartFour)nodeArrayList1.get(0);

        pforwardaxisNode1 = new AForward4Forwardaxis(pforwardaxispartfourNode2);
        }
	nodeList.add(pforwardaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new114() /* reduce AForward5Forwardaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxis pforwardaxisNode1;
        {
            // Block
        PForwardaxisPartFive pforwardaxispartfiveNode2;
        pforwardaxispartfiveNode2 = (PForwardaxisPartFive)nodeArrayList1.get(0);

        pforwardaxisNode1 = new AForward5Forwardaxis(pforwardaxispartfiveNode2);
        }
	nodeList.add(pforwardaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new115() /* reduce AForward6Forwardaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxis pforwardaxisNode1;
        {
            // Block
        PForwardaxisPartSix pforwardaxispartsixNode2;
        pforwardaxispartsixNode2 = (PForwardaxisPartSix)nodeArrayList1.get(0);

        pforwardaxisNode1 = new AForward6Forwardaxis(pforwardaxispartsixNode2);
        }
	nodeList.add(pforwardaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new116() /* reduce AForward7Forwardaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxis pforwardaxisNode1;
        {
            // Block
        PForwardaxisPartSeven pforwardaxispartsevenNode2;
        pforwardaxispartsevenNode2 = (PForwardaxisPartSeven)nodeArrayList1.get(0);

        pforwardaxisNode1 = new AForward7Forwardaxis(pforwardaxispartsevenNode2);
        }
	nodeList.add(pforwardaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new117() /* reduce AForward8Forwardaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxis pforwardaxisNode1;
        {
            // Block
        PForwardaxisPartEight pforwardaxisparteightNode2;
        pforwardaxisparteightNode2 = (PForwardaxisPartEight)nodeArrayList1.get(0);

        pforwardaxisNode1 = new AForward8Forwardaxis(pforwardaxisparteightNode2);
        }
	nodeList.add(pforwardaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new118() /* reduce AForwardaxisPartOne */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxisPartOne pforwardaxispartoneNode1;
        {
            // Block
        TAxisChild taxischildNode2;
        TAxisDelim taxisdelimNode3;
        taxischildNode2 = (TAxisChild)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        pforwardaxispartoneNode1 = new AForwardaxisPartOne(taxischildNode2, taxisdelimNode3);
        }
	nodeList.add(pforwardaxispartoneNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new119() /* reduce AForwardaxisPartTwo */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxisPartTwo pforwardaxisparttwoNode1;
        {
            // Block
        TAxisDescendant taxisdescendantNode2;
        TAxisDelim taxisdelimNode3;
        taxisdescendantNode2 = (TAxisDescendant)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        pforwardaxisparttwoNode1 = new AForwardaxisPartTwo(taxisdescendantNode2, taxisdelimNode3);
        }
	nodeList.add(pforwardaxisparttwoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new120() /* reduce AForwardaxisPartThree */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxisPartThree pforwardaxispartthreeNode1;
        {
            // Block
        TAxisAttribute taxisattributeNode2;
        TAxisDelim taxisdelimNode3;
        taxisattributeNode2 = (TAxisAttribute)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        pforwardaxispartthreeNode1 = new AForwardaxisPartThree(taxisattributeNode2, taxisdelimNode3);
        }
	nodeList.add(pforwardaxispartthreeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new121() /* reduce AForwardaxisPartFour */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxisPartFour pforwardaxispartfourNode1;
        {
            // Block
        TAxisSelf taxisselfNode2;
        TAxisDelim taxisdelimNode3;
        taxisselfNode2 = (TAxisSelf)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        pforwardaxispartfourNode1 = new AForwardaxisPartFour(taxisselfNode2, taxisdelimNode3);
        }
	nodeList.add(pforwardaxispartfourNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new122() /* reduce AForwardaxisPartFive */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxisPartFive pforwardaxispartfiveNode1;
        {
            // Block
        TAxisDescendantOrSelf taxisdescendantorselfNode2;
        TAxisDelim taxisdelimNode3;
        taxisdescendantorselfNode2 = (TAxisDescendantOrSelf)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        pforwardaxispartfiveNode1 = new AForwardaxisPartFive(taxisdescendantorselfNode2, taxisdelimNode3);
        }
	nodeList.add(pforwardaxispartfiveNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new123() /* reduce AForwardaxisPartSix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxisPartSix pforwardaxispartsixNode1;
        {
            // Block
        TAxisFollowingSibling taxisfollowingsiblingNode2;
        TAxisDelim taxisdelimNode3;
        taxisfollowingsiblingNode2 = (TAxisFollowingSibling)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        pforwardaxispartsixNode1 = new AForwardaxisPartSix(taxisfollowingsiblingNode2, taxisdelimNode3);
        }
	nodeList.add(pforwardaxispartsixNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new124() /* reduce AForwardaxisPartSeven */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxisPartSeven pforwardaxispartsevenNode1;
        {
            // Block
        TAxisFollowing taxisfollowingNode2;
        TAxisDelim taxisdelimNode3;
        taxisfollowingNode2 = (TAxisFollowing)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        pforwardaxispartsevenNode1 = new AForwardaxisPartSeven(taxisfollowingNode2, taxisdelimNode3);
        }
	nodeList.add(pforwardaxispartsevenNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new125() /* reduce AForwardaxisPartEight */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PForwardaxisPartEight pforwardaxisparteightNode1;
        {
            // Block
        TAxisNamespace taxisnamespaceNode2;
        TAxisDelim taxisdelimNode3;
        taxisnamespaceNode2 = (TAxisNamespace)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        pforwardaxisparteightNode1 = new AForwardaxisPartEight(taxisnamespaceNode2, taxisdelimNode3);
        }
	nodeList.add(pforwardaxisparteightNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new126() /* reduce AAabbrevforwardstep1Abbrevforwardstep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAbbrevforwardstep pabbrevforwardstepNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PNodetest pnodetestNode3;
        pnodetestNode3 = (PNodetest)nodeArrayList1.get(0);

        pabbrevforwardstepNode1 = new AAbbrevforwardstep(null, pnodetestNode3);
        }
	nodeList.add(pabbrevforwardstepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new127() /* reduce AAabbrevforwardstep2Abbrevforwardstep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAbbrevforwardstep pabbrevforwardstepNode1;
        {
            // Block
        TAbbrevAttrib tabbrevattribNode2;
        PNodetest pnodetestNode3;
        tabbrevattribNode2 = (TAbbrevAttrib)nodeArrayList1.get(0);
        pnodetestNode3 = (PNodetest)nodeArrayList2.get(0);

        pabbrevforwardstepNode1 = new AAbbrevforwardstep(tabbrevattribNode2, pnodetestNode3);
        }
	nodeList.add(pabbrevforwardstepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new128() /* reduce AReverseReversestep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReversestep preversestepNode1;
        {
            // Block
        PReversestepPart preversesteppartNode2;
        preversesteppartNode2 = (PReversestepPart)nodeArrayList1.get(0);

        preversestepNode1 = new AReverseReversestep(preversesteppartNode2);
        }
	nodeList.add(preversestepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new129() /* reduce AAbbrevreverseReversestep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReversestep preversestepNode1;
        {
            // Block
        PAbbrevreversestep pabbrevreversestepNode2;
        pabbrevreversestepNode2 = (PAbbrevreversestep)nodeArrayList1.get(0);

        preversestepNode1 = new AAbbrevreverseReversestep(pabbrevreversestepNode2);
        }
	nodeList.add(preversestepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new130() /* reduce AReversestepPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReversestepPart preversesteppartNode1;
        {
            // Block
        PReverseaxis preverseaxisNode2;
        PNodetest pnodetestNode3;
        preverseaxisNode2 = (PReverseaxis)nodeArrayList1.get(0);
        pnodetestNode3 = (PNodetest)nodeArrayList2.get(0);

        preversesteppartNode1 = new AReversestepPart(preverseaxisNode2, pnodetestNode3);
        }
	nodeList.add(preversesteppartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new131() /* reduce AReverse1Reverseaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReverseaxis preverseaxisNode1;
        {
            // Block
        PReverseaxisPartOne preverseaxispartoneNode2;
        preverseaxispartoneNode2 = (PReverseaxisPartOne)nodeArrayList1.get(0);

        preverseaxisNode1 = new AReverse1Reverseaxis(preverseaxispartoneNode2);
        }
	nodeList.add(preverseaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new132() /* reduce AReverse2Reverseaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReverseaxis preverseaxisNode1;
        {
            // Block
        PReverseaxisPartTwo preverseaxisparttwoNode2;
        preverseaxisparttwoNode2 = (PReverseaxisPartTwo)nodeArrayList1.get(0);

        preverseaxisNode1 = new AReverse2Reverseaxis(preverseaxisparttwoNode2);
        }
	nodeList.add(preverseaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new133() /* reduce AReverse3Reverseaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReverseaxis preverseaxisNode1;
        {
            // Block
        PReverseaxisPartThree preverseaxispartthreeNode2;
        preverseaxispartthreeNode2 = (PReverseaxisPartThree)nodeArrayList1.get(0);

        preverseaxisNode1 = new AReverse3Reverseaxis(preverseaxispartthreeNode2);
        }
	nodeList.add(preverseaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new134() /* reduce AReverse4Reverseaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReverseaxis preverseaxisNode1;
        {
            // Block
        PReverseaxisPartFour preverseaxispartfourNode2;
        preverseaxispartfourNode2 = (PReverseaxisPartFour)nodeArrayList1.get(0);

        preverseaxisNode1 = new AReverse4Reverseaxis(preverseaxispartfourNode2);
        }
	nodeList.add(preverseaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new135() /* reduce AReverse5Reverseaxis */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReverseaxis preverseaxisNode1;
        {
            // Block
        PReverseaxisPartFive preverseaxispartfiveNode2;
        preverseaxispartfiveNode2 = (PReverseaxisPartFive)nodeArrayList1.get(0);

        preverseaxisNode1 = new AReverse5Reverseaxis(preverseaxispartfiveNode2);
        }
	nodeList.add(preverseaxisNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new136() /* reduce AReverseaxisPartOne */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReverseaxisPartOne preverseaxispartoneNode1;
        {
            // Block
        TAxisParent taxisparentNode2;
        TAxisDelim taxisdelimNode3;
        taxisparentNode2 = (TAxisParent)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        preverseaxispartoneNode1 = new AReverseaxisPartOne(taxisparentNode2, taxisdelimNode3);
        }
	nodeList.add(preverseaxispartoneNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new137() /* reduce AReverseaxisPartTwo */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReverseaxisPartTwo preverseaxisparttwoNode1;
        {
            // Block
        TAxisAncestor taxisancestorNode2;
        TAxisDelim taxisdelimNode3;
        taxisancestorNode2 = (TAxisAncestor)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        preverseaxisparttwoNode1 = new AReverseaxisPartTwo(taxisancestorNode2, taxisdelimNode3);
        }
	nodeList.add(preverseaxisparttwoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new138() /* reduce AReverseaxisPartThree */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReverseaxisPartThree preverseaxispartthreeNode1;
        {
            // Block
        TAxisPrecedingSibling taxisprecedingsiblingNode2;
        TAxisDelim taxisdelimNode3;
        taxisprecedingsiblingNode2 = (TAxisPrecedingSibling)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        preverseaxispartthreeNode1 = new AReverseaxisPartThree(taxisprecedingsiblingNode2, taxisdelimNode3);
        }
	nodeList.add(preverseaxispartthreeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new139() /* reduce AReverseaxisPartFour */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReverseaxisPartFour preverseaxispartfourNode1;
        {
            // Block
        TAxisPreceding taxisprecedingNode2;
        TAxisDelim taxisdelimNode3;
        taxisprecedingNode2 = (TAxisPreceding)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        preverseaxispartfourNode1 = new AReverseaxisPartFour(taxisprecedingNode2, taxisdelimNode3);
        }
	nodeList.add(preverseaxispartfourNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new140() /* reduce AReverseaxisPartFive */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReverseaxisPartFive preverseaxispartfiveNode1;
        {
            // Block
        TAxisAncestorOrSelf taxisancestororselfNode2;
        TAxisDelim taxisdelimNode3;
        taxisancestororselfNode2 = (TAxisAncestorOrSelf)nodeArrayList1.get(0);
        taxisdelimNode3 = (TAxisDelim)nodeArrayList2.get(0);

        preverseaxispartfiveNode1 = new AReverseaxisPartFive(taxisancestororselfNode2, taxisdelimNode3);
        }
	nodeList.add(preverseaxispartfiveNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new141() /* reduce AAbbrevreversestep */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAbbrevreversestep pabbrevreversestepNode1;
        {
            // Block
        TAbbrevReversestep tabbrevreversestepNode2;
        tabbrevreversestepNode2 = (TAbbrevReversestep)nodeArrayList1.get(0);

        pabbrevreversestepNode1 = new AAbbrevreversestep(tabbrevreversestepNode2);
        }
	nodeList.add(pabbrevreversestepNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new142() /* reduce AKindNodetest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNodetest pnodetestNode1;
        {
            // Block
        PKindtest pkindtestNode2;
        pkindtestNode2 = (PKindtest)nodeArrayList1.get(0);

        pnodetestNode1 = new AKindNodetest(pkindtestNode2);
        }
	nodeList.add(pnodetestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new143() /* reduce ANameNodetest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNodetest pnodetestNode1;
        {
            // Block
        PNametest pnametestNode2;
        pnametestNode2 = (PNametest)nodeArrayList1.get(0);

        pnodetestNode1 = new ANameNodetest(pnametestNode2);
        }
	nodeList.add(pnodetestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new144() /* reduce AQnameNametest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNametest pnametestNode1;
        {
            // Block
        PQname pqnameNode2;
        pqnameNode2 = (PQname)nodeArrayList1.get(0);

        pnametestNode1 = new AQnameNametest(pqnameNode2);
        }
	nodeList.add(pnametestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new145() /* reduce AWildcNametest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNametest pnametestNode1;
        {
            // Block
        PWildcard pwildcardNode2;
        pwildcardNode2 = (PWildcard)nodeArrayList1.get(0);

        pnametestNode1 = new AWildcNametest(pwildcardNode2);
        }
	nodeList.add(pnametestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new146() /* reduce AStarWildcard */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWildcard pwildcardNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        pwildcardNode1 = new AStarWildcard(tstarNode2);
        }
	nodeList.add(pwildcardNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new147() /* reduce AWild1Wildcard */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWildcard pwildcardNode1;
        {
            // Block
        PWildcardPartOne pwildcardpartoneNode2;
        pwildcardpartoneNode2 = (PWildcardPartOne)nodeArrayList1.get(0);

        pwildcardNode1 = new AWild1Wildcard(pwildcardpartoneNode2);
        }
	nodeList.add(pwildcardNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new148() /* reduce AWild2Wildcard */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWildcard pwildcardNode1;
        {
            // Block
        PWildcardPartTwo pwildcardparttwoNode2;
        pwildcardparttwoNode2 = (PWildcardPartTwo)nodeArrayList1.get(0);

        pwildcardNode1 = new AWild2Wildcard(pwildcardparttwoNode2);
        }
	nodeList.add(pwildcardNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new149() /* reduce AWildcardPartOne */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWildcardPartOne pwildcardpartoneNode1;
        {
            // Block
        PNcname pncnameNode2;
        TColon tcolonNode3;
        TStar tstarNode4;
        pncnameNode2 = (PNcname)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        tstarNode4 = (TStar)nodeArrayList3.get(0);

        pwildcardpartoneNode1 = new AWildcardPartOne(pncnameNode2, tcolonNode3, tstarNode4);
        }
	nodeList.add(pwildcardpartoneNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new150() /* reduce AWildcardPartTwo */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWildcardPartTwo pwildcardparttwoNode1;
        {
            // Block
        TStar tstarNode2;
        TColon tcolonNode3;
        PNcname pncnameNode4;
        tstarNode2 = (TStar)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pncnameNode4 = (PNcname)nodeArrayList3.get(0);

        pwildcardparttwoNode1 = new AWildcardPartTwo(tstarNode2, tcolonNode3, pncnameNode4);
        }
	nodeList.add(pwildcardparttwoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new151() /* reduce AFilterexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFilterexpr pfilterexprNode1;
        {
            // Block
        PPrimaryexpr pprimaryexprNode2;
        PPredicatelist ppredicatelistNode3;
        pprimaryexprNode2 = (PPrimaryexpr)nodeArrayList1.get(0);
        ppredicatelistNode3 = (PPredicatelist)nodeArrayList2.get(0);

        pfilterexprNode1 = new AFilterexpr(pprimaryexprNode2, ppredicatelistNode3);
        }
	nodeList.add(pfilterexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new152() /* reduce AApredicatelist1Predicatelist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PPredicatelist ppredicatelistNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        ppredicatelistNode1 = new APredicatelist(listNode2);
        }
	nodeList.add(ppredicatelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new153() /* reduce AApredicatelist2Predicatelist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicatelist ppredicatelistNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        ppredicatelistNode1 = new APredicatelist(listNode3);
        }
	nodeList.add(ppredicatelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new154() /* reduce AAexpr11Predicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        TLbracket tlbracketNode2;
        PExpr pexprNode3;
        TRbracket trbracketNode6;
        tlbracketNode2 = (TLbracket)nodeArrayList1.get(0);
        {
            // Block
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        }

        pexprNode3 = new AExpr(null, listNode5);
        }
        trbracketNode6 = (TRbracket)nodeArrayList2.get(0);

        ppredicateNode1 = new APredicate(tlbracketNode2, pexprNode3, trbracketNode6);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new155() /* reduce AAexpr21Predicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        TLbracket tlbracketNode2;
        PExpr pexprNode3;
        TRbracket trbracketNode6;
        tlbracketNode2 = (TLbracket)nodeArrayList1.get(0);
        {
            // Block
        PExprsingle pexprsingleNode4;
        LinkedList listNode5 = new LinkedList();
        pexprsingleNode4 = (PExprsingle)nodeArrayList2.get(0);
        {
            // Block
        }

        pexprNode3 = new AExpr(pexprsingleNode4, listNode5);
        }
        trbracketNode6 = (TRbracket)nodeArrayList3.get(0);

        ppredicateNode1 = new APredicate(tlbracketNode2, pexprNode3, trbracketNode6);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new156() /* reduce AAexpr31Predicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        TLbracket tlbracketNode2;
        PExpr pexprNode3;
        TRbracket trbracketNode7;
        tlbracketNode2 = (TLbracket)nodeArrayList1.get(0);
        {
            // Block
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode6 = new LinkedList();
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pexprNode3 = new AExpr(null, listNode6);
        }
        trbracketNode7 = (TRbracket)nodeArrayList3.get(0);

        ppredicateNode1 = new APredicate(tlbracketNode2, pexprNode3, trbracketNode7);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new157() /* reduce AAexpr41Predicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        TLbracket tlbracketNode2;
        PExpr pexprNode3;
        TRbracket trbracketNode7;
        tlbracketNode2 = (TLbracket)nodeArrayList1.get(0);
        {
            // Block
        PExprsingle pexprsingleNode4;
        LinkedList listNode6 = new LinkedList();
        pexprsingleNode4 = (PExprsingle)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pexprNode3 = new AExpr(pexprsingleNode4, listNode6);
        }
        trbracketNode7 = (TRbracket)nodeArrayList4.get(0);

        ppredicateNode1 = new APredicate(tlbracketNode2, pexprNode3, trbracketNode7);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new158() /* reduce ALiteralPrimaryexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryexpr pprimaryexprNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pprimaryexprNode1 = new ALiteralPrimaryexpr(pliteralNode2);
        }
	nodeList.add(pprimaryexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new159() /* reduce AVarrefPrimaryexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryexpr pprimaryexprNode1;
        {
            // Block
        PVarref pvarrefNode2;
        pvarrefNode2 = (PVarref)nodeArrayList1.get(0);

        pprimaryexprNode1 = new AVarrefPrimaryexpr(pvarrefNode2);
        }
	nodeList.add(pprimaryexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new160() /* reduce AParenthexPrimaryexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryexpr pprimaryexprNode1;
        {
            // Block
        PParenthesizedexpr pparenthesizedexprNode2;
        pparenthesizedexprNode2 = (PParenthesizedexpr)nodeArrayList1.get(0);

        pprimaryexprNode1 = new AParenthexPrimaryexpr(pparenthesizedexprNode2);
        }
	nodeList.add(pprimaryexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new161() /* reduce AContextexPrimaryexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryexpr pprimaryexprNode1;
        {
            // Block
        PContextitemexpr pcontextitemexprNode2;
        pcontextitemexprNode2 = (PContextitemexpr)nodeArrayList1.get(0);

        pprimaryexprNode1 = new AContextexPrimaryexpr(pcontextitemexprNode2);
        }
	nodeList.add(pprimaryexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new162() /* reduce AFunctionPrimaryexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrimaryexpr pprimaryexprNode1;
        {
            // Block
        PFunctioncall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctioncall)nodeArrayList1.get(0);

        pprimaryexprNode1 = new AFunctionPrimaryexpr(pfunctioncallNode2);
        }
	nodeList.add(pprimaryexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new163() /* reduce ANumericLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PNumericliteral pnumericliteralNode2;
        pnumericliteralNode2 = (PNumericliteral)nodeArrayList1.get(0);

        pliteralNode1 = new ANumericLiteral(pnumericliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new164() /* reduce AStringLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TStringliteral tstringliteralNode2;
        tstringliteralNode2 = (TStringliteral)nodeArrayList1.get(0);

        pliteralNode1 = new AStringLiteral(tstringliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new165() /* reduce AIntegerNumericliteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumericliteral pnumericliteralNode1;
        {
            // Block
        TIntegerliteral tintegerliteralNode2;
        tintegerliteralNode2 = (TIntegerliteral)nodeArrayList1.get(0);

        pnumericliteralNode1 = new AIntegerNumericliteral(tintegerliteralNode2);
        }
	nodeList.add(pnumericliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new166() /* reduce ADecimalNumericliteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumericliteral pnumericliteralNode1;
        {
            // Block
        TDecimalliteral tdecimalliteralNode2;
        tdecimalliteralNode2 = (TDecimalliteral)nodeArrayList1.get(0);

        pnumericliteralNode1 = new ADecimalNumericliteral(tdecimalliteralNode2);
        }
	nodeList.add(pnumericliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new167() /* reduce ADoubleNumericliteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumericliteral pnumericliteralNode1;
        {
            // Block
        TDoubleliteral tdoubleliteralNode2;
        tdoubleliteralNode2 = (TDoubleliteral)nodeArrayList1.get(0);

        pnumericliteralNode1 = new ADoubleNumericliteral(tdoubleliteralNode2);
        }
	nodeList.add(pnumericliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new168() /* reduce AVarref */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarref pvarrefNode1;
        {
            // Block
        TDollar tdollarNode2;
        PVarname pvarnameNode3;
        tdollarNode2 = (TDollar)nodeArrayList1.get(0);
        pvarnameNode3 = (PVarname)nodeArrayList2.get(0);

        pvarrefNode1 = new AVarref(tdollarNode2, pvarnameNode3);
        }
	nodeList.add(pvarrefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new169() /* reduce AVarname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarname pvarnameNode1;
        {
            // Block
        PQname pqnameNode2;
        pqnameNode2 = (PQname)nodeArrayList1.get(0);

        pvarnameNode1 = new AVarname(pqnameNode2);
        }
	nodeList.add(pvarnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new170() /* reduce AAparenthesizedexpr2$Aexpr11Parenthesizedexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParenthesizedexpr pparenthesizedexprNode1;
        {
            // Block
        TLparenth tlparenthNode2;
        PExpr pexprNode3;
        TRparenth trparenthNode6;
        tlparenthNode2 = (TLparenth)nodeArrayList1.get(0);
        {
            // Block
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        }

        pexprNode3 = new AExpr(null, listNode5);
        }
        trparenthNode6 = (TRparenth)nodeArrayList2.get(0);

        pparenthesizedexprNode1 = new AParenthesizedexpr(tlparenthNode2, pexprNode3, trparenthNode6);
        }
	nodeList.add(pparenthesizedexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new171() /* reduce AAparenthesizedexpr2$Aexpr21Parenthesizedexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParenthesizedexpr pparenthesizedexprNode1;
        {
            // Block
        TLparenth tlparenthNode2;
        PExpr pexprNode3;
        TRparenth trparenthNode6;
        tlparenthNode2 = (TLparenth)nodeArrayList1.get(0);
        {
            // Block
        PExprsingle pexprsingleNode4;
        LinkedList listNode5 = new LinkedList();
        pexprsingleNode4 = (PExprsingle)nodeArrayList2.get(0);
        {
            // Block
        }

        pexprNode3 = new AExpr(pexprsingleNode4, listNode5);
        }
        trparenthNode6 = (TRparenth)nodeArrayList3.get(0);

        pparenthesizedexprNode1 = new AParenthesizedexpr(tlparenthNode2, pexprNode3, trparenthNode6);
        }
	nodeList.add(pparenthesizedexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new172() /* reduce AAparenthesizedexpr2$Aexpr31Parenthesizedexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParenthesizedexpr pparenthesizedexprNode1;
        {
            // Block
        TLparenth tlparenthNode2;
        PExpr pexprNode3;
        TRparenth trparenthNode7;
        tlparenthNode2 = (TLparenth)nodeArrayList1.get(0);
        {
            // Block
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode6 = new LinkedList();
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pexprNode3 = new AExpr(null, listNode6);
        }
        trparenthNode7 = (TRparenth)nodeArrayList3.get(0);

        pparenthesizedexprNode1 = new AParenthesizedexpr(tlparenthNode2, pexprNode3, trparenthNode7);
        }
	nodeList.add(pparenthesizedexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new173() /* reduce AAparenthesizedexpr2$Aexpr41Parenthesizedexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParenthesizedexpr pparenthesizedexprNode1;
        {
            // Block
        TLparenth tlparenthNode2;
        PExpr pexprNode3;
        TRparenth trparenthNode7;
        tlparenthNode2 = (TLparenth)nodeArrayList1.get(0);
        {
            // Block
        PExprsingle pexprsingleNode4;
        LinkedList listNode6 = new LinkedList();
        pexprsingleNode4 = (PExprsingle)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pexprNode3 = new AExpr(pexprsingleNode4, listNode6);
        }
        trparenthNode7 = (TRparenth)nodeArrayList4.get(0);

        pparenthesizedexprNode1 = new AParenthesizedexpr(tlparenthNode2, pexprNode3, trparenthNode7);
        }
	nodeList.add(pparenthesizedexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new174() /* reduce AContextitemexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PContextitemexpr pcontextitemexprNode1;
        {
            // Block
        TAbbrevContext tabbrevcontextNode2;
        tabbrevcontextNode2 = (TAbbrevContext)nodeArrayList1.get(0);

        pcontextitemexprNode1 = new AContextitemexpr(tabbrevcontextNode2);
        }
	nodeList.add(pcontextitemexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new175() /* reduce AAfunctioncall1Functioncall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctioncall pfunctioncallNode1;
        {
            // Block
        PQname pqnameNode2;
        TLparenth tlparenthNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparenth trparenthNode5;
        pqnameNode2 = (PQname)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctioncall(pqnameNode2, tlparenthNode3, null, trparenthNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new176() /* reduce AAfunctioncall2Functioncall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctioncall pfunctioncallNode1;
        {
            // Block
        PQname pqnameNode2;
        TLparenth tlparenthNode3;
        PFunctioncallPart pfunctioncallpartNode4;
        TRparenth trparenthNode5;
        pqnameNode2 = (PQname)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        pfunctioncallpartNode4 = (PFunctioncallPart)nodeArrayList3.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctioncall(pqnameNode2, tlparenthNode3, pfunctioncallpartNode4, trparenthNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new177() /* reduce AAfunctioncallpart1FunctioncallPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctioncallPart pfunctioncallpartNode1;
        {
            // Block
        PExprsingle pexprsingleNode2;
        LinkedList listNode3 = new LinkedList();
        pexprsingleNode2 = (PExprsingle)nodeArrayList1.get(0);
        {
            // Block
        }

        pfunctioncallpartNode1 = new AFunctioncallPart(pexprsingleNode2, listNode3);
        }
	nodeList.add(pfunctioncallpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new178() /* reduce AAfunctioncallpart2FunctioncallPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctioncallPart pfunctioncallpartNode1;
        {
            // Block
        PExprsingle pexprsingleNode2;
        LinkedList listNode4 = new LinkedList();
        pexprsingleNode2 = (PExprsingle)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfunctioncallpartNode1 = new AFunctioncallPart(pexprsingleNode2, listNode4);
        }
	nodeList.add(pfunctioncallpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new179() /* reduce AFunctioncallPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctioncallPartPart pfunctioncallpartpartNode1;
        {
            // Block
        TComma tcommaNode2;
        PExprsingle pexprsingleNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprsingleNode3 = (PExprsingle)nodeArrayList2.get(0);

        pfunctioncallpartpartNode1 = new AFunctioncallPartPart(tcommaNode2, pexprsingleNode3);
        }
	nodeList.add(pfunctioncallpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new180() /* reduce AAsingletype1Singletype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSingletype psingletypeNode1;
        {
            // Block
        PAtomictype patomictypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        patomictypeNode2 = (PAtomictype)nodeArrayList1.get(0);

        psingletypeNode1 = new ASingletype(patomictypeNode2, null);
        }
	nodeList.add(psingletypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new181() /* reduce AAsingletype2Singletype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSingletype psingletypeNode1;
        {
            // Block
        PAtomictype patomictypeNode2;
        TQuestion tquestionNode3;
        patomictypeNode2 = (PAtomictype)nodeArrayList1.get(0);
        tquestionNode3 = (TQuestion)nodeArrayList2.get(0);

        psingletypeNode1 = new ASingletype(patomictypeNode2, tquestionNode3);
        }
	nodeList.add(psingletypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new182() /* reduce ASequencetype1Sequencetype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSequencetype psequencetypeNode1;
        {
            // Block
        PSequencetypePartOne psequencetypepartoneNode2;
        psequencetypepartoneNode2 = (PSequencetypePartOne)nodeArrayList1.get(0);

        psequencetypeNode1 = new ASequencetype1Sequencetype(psequencetypepartoneNode2);
        }
	nodeList.add(psequencetypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new183() /* reduce ASequencetype2Sequencetype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSequencetype psequencetypeNode1;
        {
            // Block
        PSequencetypePartTwo psequencetypeparttwoNode2;
        psequencetypeparttwoNode2 = (PSequencetypePartTwo)nodeArrayList1.get(0);

        psequencetypeNode1 = new ASequencetype2Sequencetype(psequencetypeparttwoNode2);
        }
	nodeList.add(psequencetypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new184() /* reduce ASequencetypePartOne */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSequencetypePartOne psequencetypepartoneNode1;
        {
            // Block
        TFnEmptySequence tfnemptysequenceNode2;
        TLparenth tlparenthNode3;
        TRparenth trparenthNode4;
        tfnemptysequenceNode2 = (TFnEmptySequence)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        trparenthNode4 = (TRparenth)nodeArrayList3.get(0);

        psequencetypepartoneNode1 = new ASequencetypePartOne(tfnemptysequenceNode2, tlparenthNode3, trparenthNode4);
        }
	nodeList.add(psequencetypepartoneNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new185() /* reduce AAsequencetypeparttwo1SequencetypePartTwo */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSequencetypePartTwo psequencetypeparttwoNode1;
        {
            // Block
        PItemtype pitemtypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pitemtypeNode2 = (PItemtype)nodeArrayList1.get(0);

        psequencetypeparttwoNode1 = new ASequencetypePartTwo(pitemtypeNode2, null);
        }
	nodeList.add(psequencetypeparttwoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new186() /* reduce AAsequencetypeparttwo2SequencetypePartTwo */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSequencetypePartTwo psequencetypeparttwoNode1;
        {
            // Block
        PItemtype pitemtypeNode2;
        POccurrenceindicator poccurrenceindicatorNode3;
        pitemtypeNode2 = (PItemtype)nodeArrayList1.get(0);
        poccurrenceindicatorNode3 = (POccurrenceindicator)nodeArrayList2.get(0);

        psequencetypeparttwoNode1 = new ASequencetypePartTwo(pitemtypeNode2, poccurrenceindicatorNode3);
        }
	nodeList.add(psequencetypeparttwoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new187() /* reduce AQuestionOccurrenceindicator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POccurrenceindicator poccurrenceindicatorNode1;
        {
            // Block
        TQuestion tquestionNode2;
        tquestionNode2 = (TQuestion)nodeArrayList1.get(0);

        poccurrenceindicatorNode1 = new AQuestionOccurrenceindicator(tquestionNode2);
        }
	nodeList.add(poccurrenceindicatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new188() /* reduce AStarOccurrenceindicator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POccurrenceindicator poccurrenceindicatorNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        poccurrenceindicatorNode1 = new AStarOccurrenceindicator(tstarNode2);
        }
	nodeList.add(poccurrenceindicatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new189() /* reduce APlusOccurrenceindicator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POccurrenceindicator poccurrenceindicatorNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        poccurrenceindicatorNode1 = new APlusOccurrenceindicator(tplusNode2);
        }
	nodeList.add(poccurrenceindicatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new190() /* reduce AKindItemtype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PItemtype pitemtypeNode1;
        {
            // Block
        PKindtest pkindtestNode2;
        pkindtestNode2 = (PKindtest)nodeArrayList1.get(0);

        pitemtypeNode1 = new AKindItemtype(pkindtestNode2);
        }
	nodeList.add(pitemtypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new191() /* reduce AItemItemtype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PItemtype pitemtypeNode1;
        {
            // Block
        PItemtypePart pitemtypepartNode2;
        pitemtypepartNode2 = (PItemtypePart)nodeArrayList1.get(0);

        pitemtypeNode1 = new AItemItemtype(pitemtypepartNode2);
        }
	nodeList.add(pitemtypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new192() /* reduce AAtomicItemtype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PItemtype pitemtypeNode1;
        {
            // Block
        PAtomictype patomictypeNode2;
        patomictypeNode2 = (PAtomictype)nodeArrayList1.get(0);

        pitemtypeNode1 = new AAtomicItemtype(patomictypeNode2);
        }
	nodeList.add(pitemtypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new193() /* reduce AItemtypePart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PItemtypePart pitemtypepartNode1;
        {
            // Block
        TFnItem tfnitemNode2;
        TLparenth tlparenthNode3;
        TRparenth trparenthNode4;
        tfnitemNode2 = (TFnItem)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        trparenthNode4 = (TRparenth)nodeArrayList3.get(0);

        pitemtypepartNode1 = new AItemtypePart(tfnitemNode2, tlparenthNode3, trparenthNode4);
        }
	nodeList.add(pitemtypepartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new194() /* reduce AAtomictype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomictype patomictypeNode1;
        {
            // Block
        PQname pqnameNode2;
        pqnameNode2 = (PQname)nodeArrayList1.get(0);

        patomictypeNode1 = new AAtomictype(pqnameNode2);
        }
	nodeList.add(patomictypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new195() /* reduce ADocumentKindtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKindtest pkindtestNode1;
        {
            // Block
        PDocumenttest pdocumenttestNode2;
        pdocumenttestNode2 = (PDocumenttest)nodeArrayList1.get(0);

        pkindtestNode1 = new ADocumentKindtest(pdocumenttestNode2);
        }
	nodeList.add(pkindtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new196() /* reduce AElementKindtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKindtest pkindtestNode1;
        {
            // Block
        PElementtest pelementtestNode2;
        pelementtestNode2 = (PElementtest)nodeArrayList1.get(0);

        pkindtestNode1 = new AElementKindtest(pelementtestNode2);
        }
	nodeList.add(pkindtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new197() /* reduce AAttributeKindtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKindtest pkindtestNode1;
        {
            // Block
        PAttributetest pattributetestNode2;
        pattributetestNode2 = (PAttributetest)nodeArrayList1.get(0);

        pkindtestNode1 = new AAttributeKindtest(pattributetestNode2);
        }
	nodeList.add(pkindtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new198() /* reduce ASchemaelemKindtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKindtest pkindtestNode1;
        {
            // Block
        PSchemaelementtest pschemaelementtestNode2;
        pschemaelementtestNode2 = (PSchemaelementtest)nodeArrayList1.get(0);

        pkindtestNode1 = new ASchemaelemKindtest(pschemaelementtestNode2);
        }
	nodeList.add(pkindtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new199() /* reduce ASchemaattrKindtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKindtest pkindtestNode1;
        {
            // Block
        PSchemaattributetest pschemaattributetestNode2;
        pschemaattributetestNode2 = (PSchemaattributetest)nodeArrayList1.get(0);

        pkindtestNode1 = new ASchemaattrKindtest(pschemaattributetestNode2);
        }
	nodeList.add(pkindtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new200() /* reduce APiKindtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKindtest pkindtestNode1;
        {
            // Block
        PPitest ppitestNode2;
        ppitestNode2 = (PPitest)nodeArrayList1.get(0);

        pkindtestNode1 = new APiKindtest(ppitestNode2);
        }
	nodeList.add(pkindtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new201() /* reduce ACommentKindtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKindtest pkindtestNode1;
        {
            // Block
        PCommenttest pcommenttestNode2;
        pcommenttestNode2 = (PCommenttest)nodeArrayList1.get(0);

        pkindtestNode1 = new ACommentKindtest(pcommenttestNode2);
        }
	nodeList.add(pkindtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new202() /* reduce ATextKindtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKindtest pkindtestNode1;
        {
            // Block
        PTexttest ptexttestNode2;
        ptexttestNode2 = (PTexttest)nodeArrayList1.get(0);

        pkindtestNode1 = new ATextKindtest(ptexttestNode2);
        }
	nodeList.add(pkindtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new203() /* reduce AAnyKindtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKindtest pkindtestNode1;
        {
            // Block
        PAkindtest pakindtestNode2;
        pakindtestNode2 = (PAkindtest)nodeArrayList1.get(0);

        pkindtestNode1 = new AAnyKindtest(pakindtestNode2);
        }
	nodeList.add(pkindtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new204() /* reduce AAkindtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAkindtest pakindtestNode1;
        {
            // Block
        TFnNode tfnnodeNode2;
        TLparenth tlparenthNode3;
        TRparenth trparenthNode4;
        tfnnodeNode2 = (TFnNode)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        trparenthNode4 = (TRparenth)nodeArrayList3.get(0);

        pakindtestNode1 = new AAkindtest(tfnnodeNode2, tlparenthNode3, trparenthNode4);
        }
	nodeList.add(pakindtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new205() /* reduce AAdocumenttest1Documenttest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDocumenttest pdocumenttestNode1;
        {
            // Block
        TFnDocumentNode tfndocumentnodeNode2;
        TLparenth tlparenthNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparenth trparenthNode5;
        tfndocumentnodeNode2 = (TFnDocumentNode)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList3.get(0);

        pdocumenttestNode1 = new ADocumenttest(tfndocumentnodeNode2, tlparenthNode3, null, trparenthNode5);
        }
	nodeList.add(pdocumenttestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new206() /* reduce AAdocumenttest2Documenttest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDocumenttest pdocumenttestNode1;
        {
            // Block
        TFnDocumentNode tfndocumentnodeNode2;
        TLparenth tlparenthNode3;
        PDocumenttestPart pdocumenttestpartNode4;
        TRparenth trparenthNode5;
        tfndocumentnodeNode2 = (TFnDocumentNode)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        pdocumenttestpartNode4 = (PDocumenttestPart)nodeArrayList3.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList4.get(0);

        pdocumenttestNode1 = new ADocumenttest(tfndocumentnodeNode2, tlparenthNode3, pdocumenttestpartNode4, trparenthNode5);
        }
	nodeList.add(pdocumenttestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new207() /* reduce AElementDocumenttestPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDocumenttestPart pdocumenttestpartNode1;
        {
            // Block
        PElementtest pelementtestNode2;
        pelementtestNode2 = (PElementtest)nodeArrayList1.get(0);

        pdocumenttestpartNode1 = new AElementDocumenttestPart(pelementtestNode2);
        }
	nodeList.add(pdocumenttestpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new208() /* reduce ASchemaelemDocumenttestPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDocumenttestPart pdocumenttestpartNode1;
        {
            // Block
        PSchemaelementtest pschemaelementtestNode2;
        pschemaelementtestNode2 = (PSchemaelementtest)nodeArrayList1.get(0);

        pdocumenttestpartNode1 = new ASchemaelemDocumenttestPart(pschemaelementtestNode2);
        }
	nodeList.add(pdocumenttestpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new209() /* reduce ATexttest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTexttest ptexttestNode1;
        {
            // Block
        TFnText tfntextNode2;
        TLparenth tlparenthNode3;
        TRparenth trparenthNode4;
        tfntextNode2 = (TFnText)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        trparenthNode4 = (TRparenth)nodeArrayList3.get(0);

        ptexttestNode1 = new ATexttest(tfntextNode2, tlparenthNode3, trparenthNode4);
        }
	nodeList.add(ptexttestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new210() /* reduce ACommenttest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCommenttest pcommenttestNode1;
        {
            // Block
        TFnComment tfncommentNode2;
        TLparenth tlparenthNode3;
        TRparenth trparenthNode4;
        tfncommentNode2 = (TFnComment)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        trparenthNode4 = (TRparenth)nodeArrayList3.get(0);

        pcommenttestNode1 = new ACommenttest(tfncommentNode2, tlparenthNode3, trparenthNode4);
        }
	nodeList.add(pcommenttestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new211() /* reduce AApitest1Pitest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPitest ppitestNode1;
        {
            // Block
        TFnProcessingInstruction tfnprocessinginstructionNode2;
        TLparenth tlparenthNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparenth trparenthNode5;
        tfnprocessinginstructionNode2 = (TFnProcessingInstruction)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList3.get(0);

        ppitestNode1 = new APitest(tfnprocessinginstructionNode2, tlparenthNode3, null, trparenthNode5);
        }
	nodeList.add(ppitestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new212() /* reduce AApitest2Pitest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPitest ppitestNode1;
        {
            // Block
        TFnProcessingInstruction tfnprocessinginstructionNode2;
        TLparenth tlparenthNode3;
        PPitestPart ppitestpartNode4;
        TRparenth trparenthNode5;
        tfnprocessinginstructionNode2 = (TFnProcessingInstruction)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        ppitestpartNode4 = (PPitestPart)nodeArrayList3.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList4.get(0);

        ppitestNode1 = new APitest(tfnprocessinginstructionNode2, tlparenthNode3, ppitestpartNode4, trparenthNode5);
        }
	nodeList.add(ppitestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new213() /* reduce ANcnamePitestPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPitestPart ppitestpartNode1;
        {
            // Block
        PNcname pncnameNode2;
        pncnameNode2 = (PNcname)nodeArrayList1.get(0);

        ppitestpartNode1 = new ANcnamePitestPart(pncnameNode2);
        }
	nodeList.add(ppitestpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new214() /* reduce AStringlitPitestPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPitestPart ppitestpartNode1;
        {
            // Block
        TStringliteral tstringliteralNode2;
        tstringliteralNode2 = (TStringliteral)nodeArrayList1.get(0);

        ppitestpartNode1 = new AStringlitPitestPart(tstringliteralNode2);
        }
	nodeList.add(ppitestpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new215() /* reduce AAattributetest1Attributetest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributetest pattributetestNode1;
        {
            // Block
        TAxisAttribute taxisattributeNode2;
        TLparenth tlparenthNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparenth trparenthNode5;
        taxisattributeNode2 = (TAxisAttribute)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList3.get(0);

        pattributetestNode1 = new AAttributetest(taxisattributeNode2, tlparenthNode3, null, trparenthNode5);
        }
	nodeList.add(pattributetestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new216() /* reduce AAattributetest2Attributetest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributetest pattributetestNode1;
        {
            // Block
        TAxisAttribute taxisattributeNode2;
        TLparenth tlparenthNode3;
        PAttributetestPart pattributetestpartNode4;
        TRparenth trparenthNode5;
        taxisattributeNode2 = (TAxisAttribute)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        pattributetestpartNode4 = (PAttributetestPart)nodeArrayList3.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList4.get(0);

        pattributetestNode1 = new AAttributetest(taxisattributeNode2, tlparenthNode3, pattributetestpartNode4, trparenthNode5);
        }
	nodeList.add(pattributetestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new217() /* reduce AAattributetestpart1AttributetestPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributetestPart pattributetestpartNode1;
        {
            // Block
        PAttribnameorwildcard pattribnameorwildcardNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pattribnameorwildcardNode2 = (PAttribnameorwildcard)nodeArrayList1.get(0);

        pattributetestpartNode1 = new AAttributetestPart(pattribnameorwildcardNode2, null);
        }
	nodeList.add(pattributetestpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new218() /* reduce AAattributetestpart2AttributetestPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributetestPart pattributetestpartNode1;
        {
            // Block
        PAttribnameorwildcard pattribnameorwildcardNode2;
        PAttributetestPartPart pattributetestpartpartNode3;
        pattribnameorwildcardNode2 = (PAttribnameorwildcard)nodeArrayList1.get(0);
        pattributetestpartpartNode3 = (PAttributetestPartPart)nodeArrayList2.get(0);

        pattributetestpartNode1 = new AAttributetestPart(pattribnameorwildcardNode2, pattributetestpartpartNode3);
        }
	nodeList.add(pattributetestpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new219() /* reduce AAttributetestPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributetestPartPart pattributetestpartpartNode1;
        {
            // Block
        TComma tcommaNode2;
        PTypename ptypenameNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        ptypenameNode3 = (PTypename)nodeArrayList2.get(0);

        pattributetestpartpartNode1 = new AAttributetestPartPart(tcommaNode2, ptypenameNode3);
        }
	nodeList.add(pattributetestpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new220() /* reduce AAttribAttribnameorwildcard */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribnameorwildcard pattribnameorwildcardNode1;
        {
            // Block
        PAttributename pattributenameNode2;
        pattributenameNode2 = (PAttributename)nodeArrayList1.get(0);

        pattribnameorwildcardNode1 = new AAttribAttribnameorwildcard(pattributenameNode2);
        }
	nodeList.add(pattribnameorwildcardNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new221() /* reduce AStarAttribnameorwildcard */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribnameorwildcard pattribnameorwildcardNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        pattribnameorwildcardNode1 = new AStarAttribnameorwildcard(tstarNode2);
        }
	nodeList.add(pattribnameorwildcardNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new222() /* reduce ASchemaattributetest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSchemaattributetest pschemaattributetestNode1;
        {
            // Block
        TFnSchemaAttribute tfnschemaattributeNode2;
        TLparenth tlparenthNode3;
        PAttributedeclaration pattributedeclarationNode4;
        TRparenth trparenthNode5;
        tfnschemaattributeNode2 = (TFnSchemaAttribute)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        pattributedeclarationNode4 = (PAttributedeclaration)nodeArrayList3.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList4.get(0);

        pschemaattributetestNode1 = new ASchemaattributetest(tfnschemaattributeNode2, tlparenthNode3, pattributedeclarationNode4, trparenthNode5);
        }
	nodeList.add(pschemaattributetestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new223() /* reduce AAttributedeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributedeclaration pattributedeclarationNode1;
        {
            // Block
        PAttributename pattributenameNode2;
        pattributenameNode2 = (PAttributename)nodeArrayList1.get(0);

        pattributedeclarationNode1 = new AAttributedeclaration(pattributenameNode2);
        }
	nodeList.add(pattributedeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new224() /* reduce AAelementtest1Elementtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElementtest pelementtestNode1;
        {
            // Block
        TFnElement tfnelementNode2;
        TLparenth tlparenthNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRparenth trparenthNode5;
        tfnelementNode2 = (TFnElement)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList3.get(0);

        pelementtestNode1 = new AElementtest(tfnelementNode2, tlparenthNode3, null, trparenthNode5);
        }
	nodeList.add(pelementtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new225() /* reduce AAelementtest2Elementtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElementtest pelementtestNode1;
        {
            // Block
        TFnElement tfnelementNode2;
        TLparenth tlparenthNode3;
        PElementtestPart pelementtestpartNode4;
        TRparenth trparenthNode5;
        tfnelementNode2 = (TFnElement)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        pelementtestpartNode4 = (PElementtestPart)nodeArrayList3.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList4.get(0);

        pelementtestNode1 = new AElementtest(tfnelementNode2, tlparenthNode3, pelementtestpartNode4, trparenthNode5);
        }
	nodeList.add(pelementtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new226() /* reduce AAelementtestpart1ElementtestPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElementtestPart pelementtestpartNode1;
        {
            // Block
        PElementnameorwildcard pelementnameorwildcardNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pelementnameorwildcardNode2 = (PElementnameorwildcard)nodeArrayList1.get(0);

        pelementtestpartNode1 = new AElementtestPart(pelementnameorwildcardNode2, null);
        }
	nodeList.add(pelementtestpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new227() /* reduce AAelementtestpart2ElementtestPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElementtestPart pelementtestpartNode1;
        {
            // Block
        PElementnameorwildcard pelementnameorwildcardNode2;
        PElementtestPartPart pelementtestpartpartNode3;
        pelementnameorwildcardNode2 = (PElementnameorwildcard)nodeArrayList1.get(0);
        pelementtestpartpartNode3 = (PElementtestPartPart)nodeArrayList2.get(0);

        pelementtestpartNode1 = new AElementtestPart(pelementnameorwildcardNode2, pelementtestpartpartNode3);
        }
	nodeList.add(pelementtestpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new228() /* reduce AAelementtestpartpart1ElementtestPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElementtestPartPart pelementtestpartpartNode1;
        {
            // Block
        TComma tcommaNode2;
        PTypename ptypenameNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        ptypenameNode3 = (PTypename)nodeArrayList2.get(0);

        pelementtestpartpartNode1 = new AElementtestPartPart(tcommaNode2, ptypenameNode3, null);
        }
	nodeList.add(pelementtestpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new229() /* reduce AAelementtestpartpart2ElementtestPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElementtestPartPart pelementtestpartpartNode1;
        {
            // Block
        TComma tcommaNode2;
        PTypename ptypenameNode3;
        TQuestion tquestionNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        ptypenameNode3 = (PTypename)nodeArrayList2.get(0);
        tquestionNode4 = (TQuestion)nodeArrayList3.get(0);

        pelementtestpartpartNode1 = new AElementtestPartPart(tcommaNode2, ptypenameNode3, tquestionNode4);
        }
	nodeList.add(pelementtestpartpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new230() /* reduce AElementElementnameorwildcard */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElementnameorwildcard pelementnameorwildcardNode1;
        {
            // Block
        PElementname pelementnameNode2;
        pelementnameNode2 = (PElementname)nodeArrayList1.get(0);

        pelementnameorwildcardNode1 = new AElementElementnameorwildcard(pelementnameNode2);
        }
	nodeList.add(pelementnameorwildcardNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new231() /* reduce AStarElementnameorwildcard */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElementnameorwildcard pelementnameorwildcardNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        pelementnameorwildcardNode1 = new AStarElementnameorwildcard(tstarNode2);
        }
	nodeList.add(pelementnameorwildcardNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new232() /* reduce ASchemaelementtest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSchemaelementtest pschemaelementtestNode1;
        {
            // Block
        TFnSchemaElement tfnschemaelementNode2;
        TLparenth tlparenthNode3;
        PElementdeclaration pelementdeclarationNode4;
        TRparenth trparenthNode5;
        tfnschemaelementNode2 = (TFnSchemaElement)nodeArrayList1.get(0);
        tlparenthNode3 = (TLparenth)nodeArrayList2.get(0);
        pelementdeclarationNode4 = (PElementdeclaration)nodeArrayList3.get(0);
        trparenthNode5 = (TRparenth)nodeArrayList4.get(0);

        pschemaelementtestNode1 = new ASchemaelementtest(tfnschemaelementNode2, tlparenthNode3, pelementdeclarationNode4, trparenthNode5);
        }
	nodeList.add(pschemaelementtestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new233() /* reduce AElementdeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElementdeclaration pelementdeclarationNode1;
        {
            // Block
        PElementname pelementnameNode2;
        pelementnameNode2 = (PElementname)nodeArrayList1.get(0);

        pelementdeclarationNode1 = new AElementdeclaration(pelementnameNode2);
        }
	nodeList.add(pelementdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new234() /* reduce AAttributename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributename pattributenameNode1;
        {
            // Block
        PQname pqnameNode2;
        pqnameNode2 = (PQname)nodeArrayList1.get(0);

        pattributenameNode1 = new AAttributename(pqnameNode2);
        }
	nodeList.add(pattributenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new235() /* reduce AElementname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElementname pelementnameNode1;
        {
            // Block
        PQname pqnameNode2;
        pqnameNode2 = (PQname)nodeArrayList1.get(0);

        pelementnameNode1 = new AElementname(pqnameNode2);
        }
	nodeList.add(pelementnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new236() /* reduce ATypename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypename ptypenameNode1;
        {
            // Block
        PQname pqnameNode2;
        pqnameNode2 = (PQname)nodeArrayList1.get(0);

        ptypenameNode1 = new ATypename(pqnameNode2);
        }
	nodeList.add(ptypenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new237() /* reduce APrefixedQname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PQname pqnameNode1;
        {
            // Block
        PPrefixedname pprefixednameNode2;
        pprefixednameNode2 = (PPrefixedname)nodeArrayList1.get(0);

        pqnameNode1 = new APrefixedQname(pprefixednameNode2);
        }
	nodeList.add(pqnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new238() /* reduce AUnprefixedQname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PQname pqnameNode1;
        {
            // Block
        PUnprefixedname punprefixednameNode2;
        punprefixednameNode2 = (PUnprefixedname)nodeArrayList1.get(0);

        pqnameNode1 = new AUnprefixedQname(punprefixednameNode2);
        }
	nodeList.add(pqnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new239() /* reduce A1Prefixedname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrefixedname pprefixednameNode1;
        {
            // Block
        PPrefix pprefixNode2;
        TColon tcolonNode4;
        PLocalpart plocalpartNode5;
        {
            // Block
        PNcname pncnameNode3;
        pncnameNode3 = (PNcname)nodeArrayList1.get(0);

        pprefixNode2 = new APrefix(pncnameNode3);
        }
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        plocalpartNode5 = (PLocalpart)nodeArrayList3.get(0);

        pprefixednameNode1 = new APrefixedname(pprefixNode2, tcolonNode4, plocalpartNode5);
        }
	nodeList.add(pprefixednameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new240() /* reduce AUnprefixedname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnprefixedname punprefixednameNode1;
        {
            // Block
        PLocalpart plocalpartNode2;
        plocalpartNode2 = (PLocalpart)nodeArrayList1.get(0);

        punprefixednameNode1 = new AUnprefixedname(plocalpartNode2);
        }
	nodeList.add(punprefixednameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new241() /* reduce ALocalpart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalpart plocalpartNode1;
        {
            // Block
        PNcname pncnameNode2;
        pncnameNode2 = (PNcname)nodeArrayList1.get(0);

        plocalpartNode1 = new ALocalpart(pncnameNode2);
        }
	nodeList.add(plocalpartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new242() /* reduce APrefixedNsattname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNsattname pnsattnameNode1;
        {
            // Block
        PPrefixedattname pprefixedattnameNode2;
        pprefixedattnameNode2 = (PPrefixedattname)nodeArrayList1.get(0);

        pnsattnameNode1 = new APrefixedNsattname(pprefixedattnameNode2);
        }
	nodeList.add(pnsattnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new243() /* reduce ADefaultNsattname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNsattname pnsattnameNode1;
        {
            // Block
        PDefaultattname pdefaultattnameNode2;
        pdefaultattnameNode2 = (PDefaultattname)nodeArrayList1.get(0);

        pnsattnameNode1 = new ADefaultNsattname(pdefaultattnameNode2);
        }
	nodeList.add(pnsattnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new244() /* reduce APrefixedattname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPrefixedattname pprefixedattnameNode1;
        {
            // Block
        TXmlns txmlnsNode2;
        TColon tcolonNode3;
        PNcname pncnameNode4;
        txmlnsNode2 = (TXmlns)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pncnameNode4 = (PNcname)nodeArrayList3.get(0);

        pprefixedattnameNode1 = new APrefixedattname(txmlnsNode2, tcolonNode3, pncnameNode4);
        }
	nodeList.add(pprefixedattnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new245() /* reduce ADefaultattname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDefaultattname pdefaultattnameNode1;
        {
            // Block
        TXmlns txmlnsNode2;
        txmlnsNode2 = (TXmlns)nodeArrayList1.get(0);

        pdefaultattnameNode1 = new ADefaultattname(txmlnsNode2);
        }
	nodeList.add(pdefaultattnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new246() /* reduce AAncname1Ncname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNcname pncnameNode1;
        {
            // Block
        PNcnamestartchar pncnamestartcharNode2;
        LinkedList listNode3 = new LinkedList();
        pncnamestartcharNode2 = (PNcnamestartchar)nodeArrayList1.get(0);
        {
            // Block
        }

        pncnameNode1 = new ANcname(pncnamestartcharNode2, listNode3);
        }
	nodeList.add(pncnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new247() /* reduce AAncname2Ncname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNcname pncnameNode1;
        {
            // Block
        PNcnamestartchar pncnamestartcharNode2;
        LinkedList listNode4 = new LinkedList();
        pncnamestartcharNode2 = (PNcnamestartchar)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pncnameNode1 = new ANcname(pncnamestartcharNode2, listNode4);
        }
	nodeList.add(pncnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new248() /* reduce ALetterNcnamestartchar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNcnamestartchar pncnamestartcharNode1;
        {
            // Block
        TLetter tletterNode2;
        tletterNode2 = (TLetter)nodeArrayList1.get(0);

        pncnamestartcharNode1 = new ALetterNcnamestartchar(tletterNode2);
        }
	nodeList.add(pncnamestartcharNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new249() /* reduce AUnderscoreNcnamestartchar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNcnamestartchar pncnamestartcharNode1;
        {
            // Block
        TUnderscore tunderscoreNode2;
        tunderscoreNode2 = (TUnderscore)nodeArrayList1.get(0);

        pncnamestartcharNode1 = new AUnderscoreNcnamestartchar(tunderscoreNode2);
        }
	nodeList.add(pncnamestartcharNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new250() /* reduce ATerminal$ExprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExprPart pexprpartNode1;
        pexprpartNode1 = (PExprPart)nodeArrayList1.get(0);
	if(pexprpartNode1 != null)
	{
	  listNode2.add(pexprpartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new251() /* reduce ANonTerminal$ExprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExprPart pexprpartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprpartNode2 = (PExprPart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprpartNode2 != null)
	{
	  listNode3.add(pexprpartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new252() /* reduce ATerminal$SimpleforclausePart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PSimpleforclausePart psimpleforclausepartNode1;
        psimpleforclausepartNode1 = (PSimpleforclausePart)nodeArrayList1.get(0);
	if(psimpleforclausepartNode1 != null)
	{
	  listNode2.add(psimpleforclausepartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new253() /* reduce ANonTerminal$SimpleforclausePart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PSimpleforclausePart psimpleforclausepartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psimpleforclausepartNode2 = (PSimpleforclausePart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psimpleforclausepartNode2 != null)
	{
	  listNode3.add(psimpleforclausepartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new254() /* reduce ATerminal$QuantifiedexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PQuantifiedexprPart pquantifiedexprpartNode1;
        pquantifiedexprpartNode1 = (PQuantifiedexprPart)nodeArrayList1.get(0);
	if(pquantifiedexprpartNode1 != null)
	{
	  listNode2.add(pquantifiedexprpartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new255() /* reduce ANonTerminal$QuantifiedexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PQuantifiedexprPart pquantifiedexprpartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pquantifiedexprpartNode2 = (PQuantifiedexprPart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pquantifiedexprpartNode2 != null)
	{
	  listNode3.add(pquantifiedexprpartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new256() /* reduce ATerminal$OrexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        POrexprPart porexprpartNode1;
        porexprpartNode1 = (POrexprPart)nodeArrayList1.get(0);
	if(porexprpartNode1 != null)
	{
	  listNode2.add(porexprpartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new257() /* reduce ANonTerminal$OrexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        POrexprPart porexprpartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        porexprpartNode2 = (POrexprPart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(porexprpartNode2 != null)
	{
	  listNode3.add(porexprpartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new258() /* reduce ATerminal$AndexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAndexprPart pandexprpartNode1;
        pandexprpartNode1 = (PAndexprPart)nodeArrayList1.get(0);
	if(pandexprpartNode1 != null)
	{
	  listNode2.add(pandexprpartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new259() /* reduce ANonTerminal$AndexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAndexprPart pandexprpartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pandexprpartNode2 = (PAndexprPart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pandexprpartNode2 != null)
	{
	  listNode3.add(pandexprpartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new260() /* reduce ATerminal$AdditiveexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAdditiveexprPart padditiveexprpartNode1;
        padditiveexprpartNode1 = (PAdditiveexprPart)nodeArrayList1.get(0);
	if(padditiveexprpartNode1 != null)
	{
	  listNode2.add(padditiveexprpartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new261() /* reduce ANonTerminal$AdditiveexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAdditiveexprPart padditiveexprpartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditiveexprpartNode2 = (PAdditiveexprPart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditiveexprpartNode2 != null)
	{
	  listNode3.add(padditiveexprpartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new262() /* reduce ATerminal$MultiplicativeexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMultiplicativeexprPart pmultiplicativeexprpartNode1;
        pmultiplicativeexprpartNode1 = (PMultiplicativeexprPart)nodeArrayList1.get(0);
	if(pmultiplicativeexprpartNode1 != null)
	{
	  listNode2.add(pmultiplicativeexprpartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new263() /* reduce ANonTerminal$MultiplicativeexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMultiplicativeexprPart pmultiplicativeexprpartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultiplicativeexprpartNode2 = (PMultiplicativeexprPart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultiplicativeexprpartNode2 != null)
	{
	  listNode3.add(pmultiplicativeexprpartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new264() /* reduce ATerminal$UnionexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PUnionexprPart punionexprpartNode1;
        punionexprpartNode1 = (PUnionexprPart)nodeArrayList1.get(0);
	if(punionexprpartNode1 != null)
	{
	  listNode2.add(punionexprpartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new265() /* reduce ANonTerminal$UnionexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PUnionexprPart punionexprpartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        punionexprpartNode2 = (PUnionexprPart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(punionexprpartNode2 != null)
	{
	  listNode3.add(punionexprpartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new266() /* reduce ATerminal$IntersectexceptexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PIntersectexceptexprPart pintersectexceptexprpartNode1;
        pintersectexceptexprpartNode1 = (PIntersectexceptexprPart)nodeArrayList1.get(0);
	if(pintersectexceptexprpartNode1 != null)
	{
	  listNode2.add(pintersectexceptexprpartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new267() /* reduce ANonTerminal$IntersectexceptexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PIntersectexceptexprPart pintersectexceptexprpartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pintersectexceptexprpartNode2 = (PIntersectexceptexprPart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pintersectexceptexprpartNode2 != null)
	{
	  listNode3.add(pintersectexceptexprpartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new268() /* reduce ATerminal$UnaryexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PUnaryexprPart punaryexprpartNode1;
        punaryexprpartNode1 = (PUnaryexprPart)nodeArrayList1.get(0);
	if(punaryexprpartNode1 != null)
	{
	  listNode2.add(punaryexprpartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new269() /* reduce ANonTerminal$UnaryexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PUnaryexprPart punaryexprpartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        punaryexprpartNode2 = (PUnaryexprPart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(punaryexprpartNode2 != null)
	{
	  listNode3.add(punaryexprpartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new270() /* reduce ATerminal$RelativepathexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PRelativepathexprPart prelativepathexprpartNode1;
        prelativepathexprpartNode1 = (PRelativepathexprPart)nodeArrayList1.get(0);
	if(prelativepathexprpartNode1 != null)
	{
	  listNode2.add(prelativepathexprpartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new271() /* reduce ANonTerminal$RelativepathexprPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PRelativepathexprPart prelativepathexprpartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        prelativepathexprpartNode2 = (PRelativepathexprPart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(prelativepathexprpartNode2 != null)
	{
	  listNode3.add(prelativepathexprpartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new272() /* reduce ATerminal$Predicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PPredicate ppredicateNode1;
        ppredicateNode1 = (PPredicate)nodeArrayList1.get(0);
	if(ppredicateNode1 != null)
	{
	  listNode2.add(ppredicateNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new273() /* reduce ANonTerminal$Predicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PPredicate ppredicateNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppredicateNode2 = (PPredicate)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppredicateNode2 != null)
	{
	  listNode3.add(ppredicateNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new274() /* reduce ATerminal$FunctioncallPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFunctioncallPartPart pfunctioncallpartpartNode1;
        pfunctioncallpartpartNode1 = (PFunctioncallPartPart)nodeArrayList1.get(0);
	if(pfunctioncallpartpartNode1 != null)
	{
	  listNode2.add(pfunctioncallpartpartNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new275() /* reduce ANonTerminal$FunctioncallPartPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFunctioncallPartPart pfunctioncallpartpartNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfunctioncallpartpartNode2 = (PFunctioncallPartPart)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunctioncallpartpartNode2 != null)
	{
	  listNode3.add(pfunctioncallpartpartNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new276() /* reduce ATerminal$Ncnamechar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TNcnamechar tncnamecharNode1;
        tncnamecharNode1 = (TNcnamechar)nodeArrayList1.get(0);
	if(tncnamecharNode1 != null)
	{
	  listNode2.add(tncnamecharNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new277() /* reduce ANonTerminal$Ncnamechar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TNcnamechar tncnamecharNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tncnamecharNode2 = (TNcnamechar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tncnamecharNode2 != null)
	{
	  listNode3.add(tncnamecharNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 1}, {26, SHIFT, 125}, },
			{{-1, ERROR, 2}, {28, SHIFT, 126}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 5}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 6}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, ERROR, 7}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {28, SHIFT, 7}, {29, SHIFT, 131}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 146}, {55, SHIFT, 134}, },
			{{-1, REDUCE, 94}, {26, SHIFT, 6}, {28, SHIFT, 7}, {37, SHIFT, 10}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 12}, {26, SHIFT, 6}, {28, SHIFT, 7}, {37, SHIFT, 10}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 13}, {37, SHIFT, 10}, {63, SHIFT, 137}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 174}, },
			{{-1, ERROR, 16}, {54, SHIFT, 140}, },
			{{-1, ERROR, 17}, {54, SHIFT, 141}, },
			{{-1, ERROR, 18}, {28, SHIFT, 142}, {54, SHIFT, 143}, },
			{{-1, ERROR, 19}, {54, SHIFT, 144}, },
			{{-1, ERROR, 20}, {54, SHIFT, 145}, },
			{{-1, ERROR, 21}, {54, SHIFT, 146}, },
			{{-1, ERROR, 22}, {54, SHIFT, 147}, },
			{{-1, ERROR, 23}, {54, SHIFT, 148}, },
			{{-1, ERROR, 24}, {54, SHIFT, 149}, },
			{{-1, ERROR, 25}, {54, SHIFT, 150}, },
			{{-1, ERROR, 26}, {54, SHIFT, 151}, },
			{{-1, ERROR, 27}, {54, SHIFT, 152}, },
			{{-1, ERROR, 28}, {54, SHIFT, 153}, },
			{{-1, ERROR, 29}, {28, SHIFT, 154}, },
			{{-1, ERROR, 30}, {28, SHIFT, 155}, },
			{{-1, ERROR, 31}, {28, SHIFT, 156}, },
			{{-1, ERROR, 32}, {28, SHIFT, 157}, },
			{{-1, ERROR, 33}, {28, SHIFT, 158}, },
			{{-1, ERROR, 34}, {28, SHIFT, 159}, },
			{{-1, ERROR, 35}, {28, SHIFT, 160}, },
			{{-1, ERROR, 36}, {28, SHIFT, 161}, },
			{{-1, REDUCE, 165}, },
			{{-1, REDUCE, 248}, },
			{{-1, REDUCE, 249}, },
			{{-1, REDUCE, 166}, },
			{{-1, REDUCE, 167}, },
			{{-1, REDUCE, 164}, },
			{{-1, ERROR, 43}, {93, ACCEPT, -1}, },
			{{-1, REDUCE, 250}, },
			{{-1, REDUCE, 1}, {25, SHIFT, 5}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 47}, {0, SHIFT, 163}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 49}, {26, SHIFT, 164}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 22}, {8, SHIFT, 165}, },
			{{-1, REDUCE, 25}, {9, SHIFT, 168}, },
			{{-1, REDUCE, 28}, {4, SHIFT, 171}, {39, SHIFT, 172}, {40, SHIFT, 173}, {41, SHIFT, 174}, {42, SHIFT, 175}, {43, SHIFT, 176}, {44, SHIFT, 177}, {45, SHIFT, 178}, {46, SHIFT, 179}, {47, SHIFT, 180}, {48, SHIFT, 181}, {49, SHIFT, 182}, {50, SHIFT, 183}, {52, SHIFT, 184}, {53, SHIFT, 185}, },
			{{-1, REDUCE, 34}, {10, SHIFT, 191}, },
			{{-1, REDUCE, 37}, {32, SHIFT, 193}, {35, SHIFT, 194}, },
			{{-1, REDUCE, 42}, {11, SHIFT, 198}, {12, SHIFT, 199}, {13, SHIFT, 200}, {36, SHIFT, 201}, },
			{{-1, REDUCE, 49}, {14, SHIFT, 205}, {38, SHIFT, 206}, },
			{{-1, REDUCE, 54}, {15, SHIFT, 210}, {16, SHIFT, 211}, },
			{{-1, REDUCE, 59}, {17, SHIFT, 215}, },
			{{-1, REDUCE, 62}, {19, SHIFT, 217}, },
			{{-1, REDUCE, 65}, {21, SHIFT, 219}, },
			{{-1, REDUCE, 68}, {22, SHIFT, 221}, },
			{{-1, REDUCE, 268}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 97}, {56, SHIFT, 223}, {57, SHIFT, 224}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 152}, {30, SHIFT, 228}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 107}, },
			{{-1, ERROR, 75}, {37, SHIFT, 10}, {63, SHIFT, 137}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 128}, },
			{{-1, ERROR, 87}, {37, SHIFT, 10}, {63, SHIFT, 137}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 152}, {30, SHIFT, 228}, },
			{{-1, REDUCE, 158}, },
			{{-1, REDUCE, 163}, },
			{{-1, REDUCE, 159}, },
			{{-1, REDUCE, 160}, },
			{{-1, REDUCE, 161}, },
			{{-1, REDUCE, 162}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 203}, },
			{{-1, REDUCE, 195}, },
			{{-1, REDUCE, 202}, },
			{{-1, REDUCE, 201}, },
			{{-1, REDUCE, 200}, },
			{{-1, REDUCE, 197}, },
			{{-1, REDUCE, 199}, },
			{{-1, REDUCE, 196}, },
			{{-1, REDUCE, 198}, },
			{{-1, REDUCE, 144}, {28, SHIFT, 235}, },
			{{-1, REDUCE, 237}, },
			{{-1, REDUCE, 238}, },
			{{-1, REDUCE, 240}, },
			{{-1, REDUCE, 241}, {55, SHIFT, 236}, },
			{{-1, REDUCE, 246}, {88, SHIFT, 237}, },
			{{-1, REDUCE, 2}, {25, SHIFT, 5}, },
			{{-1, ERROR, 124}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 125}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, ERROR, 126}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {28, SHIFT, 7}, {29, SHIFT, 243}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 168}, },
			{{-1, REDUCE, 169}, },
			{{-1, REDUCE, 241}, {55, SHIFT, 246}, },
			{{-1, REDUCE, 170}, },
			{{-1, ERROR, 132}, {25, SHIFT, 5}, {29, SHIFT, 247}, },
			{{-1, ERROR, 133}, {25, SHIFT, 5}, {29, SHIFT, 249}, },
			{{-1, ERROR, 134}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 137}, {28, SHIFT, 142}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 142}, {29, SHIFT, 251}, {37, SHIFT, 252}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 140}, },
			{{-1, ERROR, 154}, {29, SHIFT, 257}, },
			{{-1, ERROR, 155}, {29, SHIFT, 258}, {76, SHIFT, 31}, {82, SHIFT, 35}, },
			{{-1, ERROR, 156}, {29, SHIFT, 262}, {37, SHIFT, 263}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, ERROR, 157}, {29, SHIFT, 268}, },
			{{-1, ERROR, 158}, {29, SHIFT, 269}, {87, SHIFT, 38}, {89, SHIFT, 39}, {92, SHIFT, 270}, },
			{{-1, ERROR, 159}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, ERROR, 160}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, ERROR, 161}, {29, SHIFT, 277}, },
			{{-1, REDUCE, 3}, {25, SHIFT, 5}, },
			{{-1, ERROR, 163}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 164}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, ERROR, 165}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 256}, },
			{{-1, REDUCE, 23}, {8, SHIFT, 165}, },
			{{-1, ERROR, 168}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 258}, },
			{{-1, REDUCE, 26}, {9, SHIFT, 168}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 187}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 191}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 260}, },
			{{-1, ERROR, 196}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 38}, {32, SHIFT, 193}, {35, SHIFT, 194}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 262}, },
			{{-1, ERROR, 203}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 43}, {11, SHIFT, 198}, {12, SHIFT, 199}, {13, SHIFT, 200}, {36, SHIFT, 201}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 264}, },
			{{-1, ERROR, 208}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 50}, {14, SHIFT, 205}, {38, SHIFT, 206}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 266}, },
			{{-1, ERROR, 213}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 55}, {15, SHIFT, 210}, {16, SHIFT, 211}, },
			{{-1, ERROR, 215}, {18, SHIFT, 294}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 217}, {20, SHIFT, 295}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 219}, {20, SHIFT, 296}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 221}, {20, SHIFT, 297}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 270}, },
			{{-1, ERROR, 226}, {26, SHIFT, 6}, {28, SHIFT, 7}, {37, SHIFT, 10}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 98}, {56, SHIFT, 223}, {57, SHIFT, 224}, },
			{{-1, ERROR, 228}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {28, SHIFT, 7}, {31, SHIFT, 300}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 272}, },
			{{-1, REDUCE, 153}, {30, SHIFT, 228}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 151}, },
			{{-1, ERROR, 235}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {29, SHIFT, 304}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 236}, {37, SHIFT, 307}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, REDUCE, 276}, },
			{{-1, REDUCE, 247}, {88, SHIFT, 310}, },
			{{-1, REDUCE, 251}, },
			{{-1, REDUCE, 269}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 242}, {2, SHIFT, 311}, },
			{{-1, ERROR, 243}, {6, SHIFT, 312}, },
			{{-1, ERROR, 244}, {25, SHIFT, 5}, {29, SHIFT, 313}, },
			{{-1, ERROR, 245}, {25, SHIFT, 5}, {29, SHIFT, 315}, },
			{{-1, ERROR, 246}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, REDUCE, 171}, },
			{{-1, ERROR, 248}, {25, SHIFT, 5}, {29, SHIFT, 316}, },
			{{-1, REDUCE, 172}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 215}, },
			{{-1, REDUCE, 221}, },
			{{-1, ERROR, 253}, {29, SHIFT, 317}, },
			{{-1, REDUCE, 217}, {25, SHIFT, 318}, },
			{{-1, REDUCE, 220}, },
			{{-1, REDUCE, 234}, },
			{{-1, REDUCE, 210}, },
			{{-1, REDUCE, 205}, },
			{{-1, ERROR, 259}, {29, SHIFT, 320}, },
			{{-1, REDUCE, 207}, },
			{{-1, REDUCE, 208}, },
			{{-1, REDUCE, 224}, },
			{{-1, REDUCE, 231}, },
			{{-1, ERROR, 264}, {29, SHIFT, 321}, },
			{{-1, REDUCE, 226}, {25, SHIFT, 322}, },
			{{-1, REDUCE, 230}, },
			{{-1, REDUCE, 235}, },
			{{-1, REDUCE, 204}, },
			{{-1, REDUCE, 211}, },
			{{-1, REDUCE, 214}, },
			{{-1, ERROR, 271}, {29, SHIFT, 324}, },
			{{-1, REDUCE, 213}, },
			{{-1, ERROR, 273}, {29, SHIFT, 325}, },
			{{-1, REDUCE, 223}, },
			{{-1, ERROR, 275}, {29, SHIFT, 326}, },
			{{-1, REDUCE, 233}, },
			{{-1, REDUCE, 209}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 279}, {2, SHIFT, 327}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 257}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 259}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 261}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 263}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 265}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 267}, },
			{{-1, ERROR, 294}, {63, SHIFT, 137}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {77, SHIFT, 328}, {78, SHIFT, 329}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, ERROR, 295}, {63, SHIFT, 137}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {77, SHIFT, 328}, {78, SHIFT, 329}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, ERROR, 296}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, ERROR, 297}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 271}, },
			{{-1, REDUCE, 154}, },
			{{-1, ERROR, 301}, {25, SHIFT, 5}, {31, SHIFT, 342}, },
			{{-1, ERROR, 302}, {25, SHIFT, 5}, {31, SHIFT, 344}, },
			{{-1, REDUCE, 273}, },
			{{-1, REDUCE, 175}, },
			{{-1, REDUCE, 177}, {25, SHIFT, 345}, },
			{{-1, ERROR, 306}, {29, SHIFT, 348}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 239}, },
			{{-1, REDUCE, 241}, },
			{{-1, REDUCE, 277}, },
			{{-1, ERROR, 311}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 312}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 313}, {6, SHIFT, 351}, },
			{{-1, ERROR, 314}, {25, SHIFT, 5}, {29, SHIFT, 352}, },
			{{-1, ERROR, 315}, {6, SHIFT, 353}, },
			{{-1, REDUCE, 173}, },
			{{-1, REDUCE, 216}, },
			{{-1, ERROR, 318}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, REDUCE, 218}, },
			{{-1, REDUCE, 206}, },
			{{-1, REDUCE, 225}, },
			{{-1, ERROR, 322}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, REDUCE, 227}, },
			{{-1, REDUCE, 212}, },
			{{-1, REDUCE, 222}, },
			{{-1, REDUCE, 232}, },
			{{-1, ERROR, 327}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 328}, {28, SHIFT, 358}, },
			{{-1, ERROR, 329}, {28, SHIFT, 359}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 182}, },
			{{-1, REDUCE, 183}, },
			{{-1, REDUCE, 185}, {27, SHIFT, 360}, {33, SHIFT, 361}, {37, SHIFT, 362}, },
			{{-1, REDUCE, 191}, },
			{{-1, REDUCE, 192}, },
			{{-1, REDUCE, 190}, },
			{{-1, REDUCE, 194}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 180}, {27, SHIFT, 364}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 155}, },
			{{-1, ERROR, 343}, {25, SHIFT, 5}, {31, SHIFT, 365}, },
			{{-1, REDUCE, 156}, },
			{{-1, ERROR, 345}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 274}, },
			{{-1, REDUCE, 178}, {25, SHIFT, 345}, },
			{{-1, REDUCE, 176}, },
			{{-1, REDUCE, 10}, {25, SHIFT, 368}, },
			{{-1, ERROR, 350}, {7, SHIFT, 371}, },
			{{-1, ERROR, 351}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 352}, {6, SHIFT, 373}, },
			{{-1, ERROR, 353}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 219}, },
			{{-1, REDUCE, 236}, },
			{{-1, REDUCE, 228}, {27, SHIFT, 375}, },
			{{-1, ERROR, 357}, {5, SHIFT, 376}, {25, SHIFT, 377}, },
			{{-1, ERROR, 358}, {29, SHIFT, 380}, },
			{{-1, ERROR, 359}, {29, SHIFT, 381}, },
			{{-1, REDUCE, 187}, },
			{{-1, REDUCE, 189}, },
			{{-1, REDUCE, 188}, },
			{{-1, REDUCE, 186}, },
			{{-1, REDUCE, 181}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 179}, },
			{{-1, REDUCE, 275}, },
			{{-1, ERROR, 368}, {26, SHIFT, 382}, },
			{{-1, REDUCE, 252}, },
			{{-1, REDUCE, 11}, {25, SHIFT, 368}, },
			{{-1, ERROR, 371}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 372}, {7, SHIFT, 385}, },
			{{-1, ERROR, 373}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 374}, {7, SHIFT, 387}, },
			{{-1, REDUCE, 229}, },
			{{-1, ERROR, 376}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 377}, {26, SHIFT, 389}, },
			{{-1, REDUCE, 254}, },
			{{-1, ERROR, 379}, {5, SHIFT, 390}, {25, SHIFT, 377}, },
			{{-1, REDUCE, 184}, },
			{{-1, REDUCE, 193}, },
			{{-1, ERROR, 382}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, REDUCE, 253}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 385}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, ERROR, 386}, {7, SHIFT, 394}, },
			{{-1, ERROR, 387}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 389}, {87, SHIFT, 38}, {89, SHIFT, 39}, },
			{{-1, ERROR, 390}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 255}, },
			{{-1, ERROR, 392}, {2, SHIFT, 398}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 394}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 396}, {2, SHIFT, 400}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 398}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 400}, {1, SHIFT, 1}, {3, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {26, SHIFT, 6}, {28, SHIFT, 7}, {33, SHIFT, 8}, {34, SHIFT, 9}, {37, SHIFT, 10}, {56, SHIFT, 11}, {57, SHIFT, 12}, {58, SHIFT, 13}, {59, SHIFT, 14}, {60, SHIFT, 15}, {61, SHIFT, 16}, {62, SHIFT, 17}, {63, SHIFT, 18}, {64, SHIFT, 19}, {65, SHIFT, 20}, {66, SHIFT, 21}, {67, SHIFT, 22}, {68, SHIFT, 23}, {69, SHIFT, 24}, {70, SHIFT, 25}, {71, SHIFT, 26}, {72, SHIFT, 27}, {73, SHIFT, 28}, {74, SHIFT, 29}, {75, SHIFT, 30}, {76, SHIFT, 31}, {79, SHIFT, 32}, {80, SHIFT, 33}, {81, SHIFT, 34}, {82, SHIFT, 35}, {83, SHIFT, 36}, {86, SHIFT, 37}, {87, SHIFT, 38}, {89, SHIFT, 39}, {90, SHIFT, 40}, {91, SHIFT, 41}, {92, SHIFT, 42}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 17}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 43}, },
			{{-1, 44}, {123, 239}, {133, 239}, {162, 239}, {245, 239}, {248, 239}, {302, 239}, {314, 239}, {343, 239}, },
			{{-1, 45}, {5, 127}, {7, 132}, {126, 244}, {163, 278}, {228, 301}, {235, 305}, {311, 349}, {312, 350}, {327, 357}, {345, 366}, {351, 372}, {353, 374}, {371, 384}, {373, 386}, {376, 388}, {385, 393}, {387, 395}, {390, 397}, {394, 399}, {398, 401}, {400, 402}, },
			{{-1, 46}, },
			{{-1, 47}, },
			{{-1, 369}, {370, 383}, },
			{{-1, 48}, },
			{{-1, 49}, },
			{{-1, 378}, {379, 391}, },
			{{-1, 50}, },
			{{-1, 51}, },
			{{-1, 166}, {167, 281}, },
			{{-1, 52}, {165, 280}, },
			{{-1, 169}, {170, 283}, },
			{{-1, 53}, {168, 282}, },
			{{-1, 186}, },
			{{-1, 187}, },
			{{-1, 54}, {187, 284}, },
			{{-1, 192}, },
			{{-1, 55}, {191, 285}, },
			{{-1, 195}, {197, 287}, },
			{{-1, 196}, },
			{{-1, 56}, {196, 286}, },
			{{-1, 202}, {204, 289}, },
			{{-1, 203}, },
			{{-1, 57}, {203, 288}, },
			{{-1, 207}, {209, 291}, },
			{{-1, 208}, },
			{{-1, 58}, {208, 290}, },
			{{-1, 212}, {214, 293}, },
			{{-1, 213}, },
			{{-1, 59}, {213, 292}, },
			{{-1, 216}, },
			{{-1, 60}, },
			{{-1, 218}, },
			{{-1, 61}, },
			{{-1, 220}, },
			{{-1, 62}, },
			{{-1, 222}, },
			{{-1, 63}, },
			{{-1, 64}, {124, 240}, },
			{{-1, 65}, {124, 241}, },
			{{-1, 188}, },
			{{-1, 189}, },
			{{-1, 190}, },
			{{-1, 66}, },
			{{-1, 67}, },
			{{-1, 68}, },
			{{-1, 69}, {11, 135}, {12, 136}, },
			{{-1, 225}, {227, 299}, },
			{{-1, 226}, },
			{{-1, 70}, {226, 298}, },
			{{-1, 71}, },
			{{-1, 72}, },
			{{-1, 73}, },
			{{-1, 74}, },
			{{-1, 75}, },
			{{-1, 76}, },
			{{-1, 77}, },
			{{-1, 78}, },
			{{-1, 79}, },
			{{-1, 80}, },
			{{-1, 81}, },
			{{-1, 82}, },
			{{-1, 83}, },
			{{-1, 84}, },
			{{-1, 85}, },
			{{-1, 86}, },
			{{-1, 87}, },
			{{-1, 88}, },
			{{-1, 89}, },
			{{-1, 90}, },
			{{-1, 91}, },
			{{-1, 92}, },
			{{-1, 93}, },
			{{-1, 94}, {13, 138}, {75, 232}, {87, 233}, },
			{{-1, 95}, },
			{{-1, 96}, },
			{{-1, 97}, },
			{{-1, 98}, },
			{{-1, 99}, },
			{{-1, 229}, {100, 234}, },
			{{-1, 230}, {231, 303}, },
			{{-1, 100}, },
			{{-1, 101}, },
			{{-1, 102}, },
			{{-1, 103}, },
			{{-1, 128}, {125, 242}, {164, 279}, {382, 392}, {389, 396}, },
			{{-1, 104}, },
			{{-1, 105}, },
			{{-1, 106}, },
			{{-1, 306}, },
			{{-1, 346}, {347, 367}, },
			{{-1, 339}, {297, 341}, },
			{{-1, 330}, {295, 338}, },
			{{-1, 331}, },
			{{-1, 332}, },
			{{-1, 363}, },
			{{-1, 333}, },
			{{-1, 334}, },
			{{-1, 335}, {296, 340}, {297, 340}, },
			{{-1, 107}, {294, 336}, {295, 336}, },
			{{-1, 108}, },
			{{-1, 109}, },
			{{-1, 259}, },
			{{-1, 110}, },
			{{-1, 111}, },
			{{-1, 112}, },
			{{-1, 271}, },
			{{-1, 113}, },
			{{-1, 253}, },
			{{-1, 319}, },
			{{-1, 254}, },
			{{-1, 114}, },
			{{-1, 273}, },
			{{-1, 115}, {155, 260}, },
			{{-1, 264}, },
			{{-1, 323}, },
			{{-1, 265}, },
			{{-1, 116}, {155, 261}, },
			{{-1, 275}, },
			{{-1, 255}, {159, 274}, },
			{{-1, 266}, {160, 276}, },
			{{-1, 354}, {322, 356}, },
			{{-1, 117}, {6, 129}, {13, 139}, {75, 139}, {87, 139}, {125, 129}, {142, 256}, {156, 267}, {159, 256}, {160, 267}, {164, 129}, {294, 337}, {295, 337}, {296, 337}, {297, 337}, {318, 355}, {322, 355}, {382, 129}, {389, 129}, },
			{{-1, 118}, },
			{{-1, 119}, },
			{{-1, 120}, {236, 308}, {246, 308}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 121}, {6, 130}, {125, 130}, {134, 250}, {142, 130}, {156, 130}, {158, 272}, {159, 130}, {160, 130}, {164, 130}, {236, 309}, {246, 309}, {294, 130}, {295, 130}, {296, 130}, {297, 130}, {318, 130}, {322, 130}, {382, 130}, {389, 130}, },
			{{-1, 122}, },
			{{-1, 123}, {7, 133}, {45, 162}, {126, 245}, {132, 248}, {228, 302}, {244, 314}, {301, 343}, },
			{{-1, 370}, },
			{{-1, 379}, },
			{{-1, 167}, },
			{{-1, 170}, },
			{{-1, 197}, },
			{{-1, 204}, },
			{{-1, 209}, },
			{{-1, 214}, },
			{{-1, 124}, },
			{{-1, 227}, },
			{{-1, 231}, },
			{{-1, 347}, },
			{{-1, 238}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'for', 'if', 'some', 'every', ',', '$', '(', '+', '-', '*', '/', '//', '@', '..', '.', 'child', 'descendant', 'attribute', 'self', 'descendant-or-self', 'following-sibling', 'following', 'namespace', 'parent', 'ancestor', 'preceding-sibling', 'preceding', 'ancestor-or-self', 'comment', 'document-node', 'element', 'node', 'processing-instruction', 'schema-attribute', 'schema-element', 'text', integerliteral, letter, '_', decimalliteral, doubleliteral, stringliteral, EOF",
			"expecting: '$'",
			"expecting: '('",
			"expecting: 'for', 'if', 'some', 'every', '$', '(', '+', '-', '*', '/', '//', '@', '..', '.', 'child', 'descendant', 'attribute', 'self', 'descendant-or-self', 'following-sibling', 'following', 'namespace', 'parent', 'ancestor', 'preceding-sibling', 'preceding', 'ancestor-or-self', 'comment', 'document-node', 'element', 'node', 'processing-instruction', 'schema-attribute', 'schema-element', 'text', integerliteral, letter, '_', decimalliteral, doubleliteral, stringliteral",
			"expecting: letter, '_'",
			"expecting: 'for', 'if', 'some', 'every', ',', '$', '(', ')', '+', '-', '*', '/', '//', '@', '..', '.', 'child', 'descendant', 'attribute', 'self', 'descendant-or-self', 'following-sibling', 'following', 'namespace', 'parent', 'ancestor', 'preceding-sibling', 'preceding', 'ancestor-or-self', 'comment', 'document-node', 'element', 'node', 'processing-instruction', 'schema-attribute', 'schema-element', 'text', integerliteral, letter, '_', decimalliteral, doubleliteral, stringliteral",
			"expecting: '$', '(', '+', '-', '*', '/', '//', '@', '..', '.', 'child', 'descendant', 'attribute', 'self', 'descendant-or-self', 'following-sibling', 'following', 'namespace', 'parent', 'ancestor', 'preceding-sibling', 'preceding', 'ancestor-or-self', 'comment', 'document-node', 'element', 'node', 'processing-instruction', 'schema-attribute', 'schema-element', 'text', integerliteral, letter, '_', decimalliteral, doubleliteral, stringliteral",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', ')', '[', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', ':', '/', '//', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', '$', '(', ')', ']', '+', '-', '*', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', '@', '..', '.', 'child', 'descendant', 'attribute', 'self', 'descendant-or-self', 'following-sibling', 'following', 'namespace', 'parent', 'ancestor', 'preceding-sibling', 'preceding', 'ancestor-or-self', 'comment', 'document-node', 'element', 'node', 'processing-instruction', 'schema-attribute', 'schema-element', 'text', integerliteral, letter, '_', decimalliteral, doubleliteral, stringliteral, EOF",
			"expecting: '$', '(', '*', '@', '..', '.', 'child', 'descendant', 'attribute', 'self', 'descendant-or-self', 'following-sibling', 'following', 'namespace', 'parent', 'ancestor', 'preceding-sibling', 'preceding', 'ancestor-or-self', 'comment', 'document-node', 'element', 'node', 'processing-instruction', 'schema-attribute', 'schema-element', 'text', integerliteral, letter, '_', decimalliteral, doubleliteral, stringliteral",
			"expecting: '*', 'attribute', 'comment', 'document-node', 'element', 'node', 'processing-instruction', 'schema-attribute', 'schema-element', 'text', letter, '_'",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', ')', '[', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', '/', '//', EOF",
			"expecting: '::'",
			"expecting: '(', '::'",
			"expecting: 'return', 'in', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', '?', '(', ')', '[', ']', '+', '+', '-', '*', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', ':', '/', '//', ncnamechar, EOF",
			"expecting: EOF",
			"expecting: ',', ')', ']', EOF",
			"expecting: ',', EOF",
			"expecting: 'return', 'satisfies', 'else', ',', ')', ']', EOF",
			"expecting: 'return'",
			"expecting: 'return', 'satisfies', 'else', 'or', ',', ')', ']', EOF",
			"expecting: 'return', 'satisfies', 'else', 'or', 'and', ',', ')', ']', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', ',', ')', ']', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', ',', ')', ']', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', ',', ')', ']', '+', '-', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', ',', ')', ']', '+', '-', '*', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', ',', ')', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', ',', ')', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', ',', ')', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', ',', ')', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', ',', ')', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', ')', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', ')', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', '/', '//', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', '?', ')', '[', ']', '+', '+', '-', '*', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', '/', '//', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', '(', ')', '[', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', '/', '//', EOF",
			"expecting: 'return', 'in', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', '?', '(', ')', '[', ']', '+', '+', '-', '*', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', '/', '//', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', '(', ')', '[', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', ':', '/', '//', EOF",
			"expecting: 'return', 'in', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', ')', '[', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', '/', '//', EOF",
			"expecting: 'return', 'in', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', 'cast', ',', '?', ')', '[', ']', '+', '+', '-', '*', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', ':', '/', '//', EOF",
			"expecting: ',', ')'",
			"expecting: ')', '*', letter, '_'",
			"expecting: ')'",
			"expecting: ')', 'element', 'schema-element'",
			"expecting: ')', letter, '_', stringliteral",
			"expecting: 'of'",
			"expecting: 'as'",
			"expecting: 'for', 'if', 'some', 'every', ',', '$', '(', ']', '+', '-', '*', '/', '//', '@', '..', '.', 'child', 'descendant', 'attribute', 'self', 'descendant-or-self', 'following-sibling', 'following', 'namespace', 'parent', 'ancestor', 'preceding-sibling', 'preceding', 'ancestor-or-self', 'comment', 'document-node', 'element', 'node', 'processing-instruction', 'schema-attribute', 'schema-element', 'text', integerliteral, letter, '_', decimalliteral, doubleliteral, stringliteral",
			"expecting: 'for', 'if', 'some', 'every', '$', '(', ')', '+', '-', '*', '/', '//', '@', '..', '.', 'child', 'descendant', 'attribute', 'self', 'descendant-or-self', 'following-sibling', 'following', 'namespace', 'parent', 'ancestor', 'preceding-sibling', 'preceding', 'ancestor-or-self', 'comment', 'document-node', 'element', 'node', 'processing-instruction', 'schema-attribute', 'schema-element', 'text', integerliteral, letter, '_', decimalliteral, doubleliteral, stringliteral",
			"expecting: '*', letter, '_'",
			"expecting: 'in'",
			"expecting: 'then'",
			"expecting: 'attribute', 'comment', 'document-node', 'element', 'empty-sequence', 'item', 'node', 'processing-instruction', 'schema-attribute', 'schema-element', 'text', letter, '_'",
			"expecting: ',', ']'",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', ',', '?', ')', ']', '+', '+', '-', '*', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', ',', '?', ')', ']', '+', '+', '-', '*', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', 'is', 'satisfies', 'else', 'or', 'and', 'to', 'div', 'idiv', 'mod', 'union', 'intersect', 'except', 'instance', 'treat', 'castable', ',', '?', ')', ']', '+', '-', '*', '|', '=', '!=', '<', '<=', '>', '>=', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', '<<', '>>', EOF",
			"expecting: 'return', ','",
			"expecting: 'else'",
			"expecting: '?', ')'",
			"expecting: 'satisfies', ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 2, 2, 2, 2, 2, 2, 2, 2, 11, 14, 14, 11, 11, 11, 15, 16, 17, 18, 19, 18, 1, 18, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 6, 31, 31, 31, 31, 31, 32, 32, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 32, 11, 11, 11, 11, 11, 11, 11, 11, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 35, 35, 35, 36, 14, 17, 6, 4, 5, 16, 11, 37, 38, 11, 39, 39, 4, 31, 31, 2, 11, 11, 10, 10, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 41, 42, 40, 41, 43, 4, 4, 41, 17, 3, 4, 6, 20, 20, 6, 21, 21, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 21, 6, 6, 6, 6, 6, 22, 6, 6, 24, 6, 24, 6, 6, 6, 6, 25, 6, 25, 6, 6, 26, 6, 26, 6, 6, 27, 6, 27, 44, 27, 45, 28, 45, 29, 45, 30, 9, 9, 32, 9, 32, 46, 32, 11, 11, 11, 11, 32, 47, 48, 14, 14, 16, 6, 31, 49, 50, 39, 39, 4, 11, 39, 11, 11, 33, 39, 41, 39, 39, 39, 33, 33, 41, 41, 41, 33, 39, 41, 39, 39, 39, 33, 33, 41, 41, 41, 41, 41, 41, 41, 33, 18, 49, 20, 20, 21, 21, 21, 22, 24, 24, 25, 25, 26, 26, 27, 27, 51, 51, 4, 4, 32, 32, 11, 52, 52, 11, 11, 39, 41, 11, 35, 35, 14, 3, 3, 50, 39, 50, 11, 33, 4, 41, 33, 33, 4, 41, 33, 33, 33, 3, 2, 2, 27, 28, 28, 53, 53, 53, 53, 54, 28, 29, 55, 30, 11, 52, 11, 3, 39, 39, 11, 56, 57, 3, 50, 3, 41, 58, 58, 59, 41, 41, 28, 28, 28, 28, 30, 11, 39, 39, 1, 56, 56, 3, 57, 3, 57, 41, 3, 1, 59, 59, 28, 53, 4, 56, 18, 3, 57, 3, 18, 4, 3, 59, 49, 18, 3, 18, 49, 18, 3, 18, 3, 56, 59, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
