/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AIfexpr extends PIfexpr
{
    private TKeywordIf _keywordIf_;
    private TLparenth _lparenth_;
    private PExpr _expr_;
    private TRparenth _rparenth_;
    private TKeywordThen _keywordThen_;
    private PExprsingle _exprsingle1_;
    private TKeywordElse _keywordElse_;
    private PExprsingle _exprsingle2_;

    public AIfexpr()
    {
        // Constructor
    }

    public AIfexpr(
        @SuppressWarnings("hiding") TKeywordIf _keywordIf_,
        @SuppressWarnings("hiding") TLparenth _lparenth_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TRparenth _rparenth_,
        @SuppressWarnings("hiding") TKeywordThen _keywordThen_,
        @SuppressWarnings("hiding") PExprsingle _exprsingle1_,
        @SuppressWarnings("hiding") TKeywordElse _keywordElse_,
        @SuppressWarnings("hiding") PExprsingle _exprsingle2_)
    {
        // Constructor
        setKeywordIf(_keywordIf_);

        setLparenth(_lparenth_);

        setExpr(_expr_);

        setRparenth(_rparenth_);

        setKeywordThen(_keywordThen_);

        setExprsingle1(_exprsingle1_);

        setKeywordElse(_keywordElse_);

        setExprsingle2(_exprsingle2_);

    }

    @Override
    public Object clone()
    {
        return new AIfexpr(
            cloneNode(this._keywordIf_),
            cloneNode(this._lparenth_),
            cloneNode(this._expr_),
            cloneNode(this._rparenth_),
            cloneNode(this._keywordThen_),
            cloneNode(this._exprsingle1_),
            cloneNode(this._keywordElse_),
            cloneNode(this._exprsingle2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfexpr(this);
    }

    public TKeywordIf getKeywordIf()
    {
        return this._keywordIf_;
    }

    public void setKeywordIf(TKeywordIf node)
    {
        if(this._keywordIf_ != null)
        {
            this._keywordIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordIf_ = node;
    }

    public TLparenth getLparenth()
    {
        return this._lparenth_;
    }

    public void setLparenth(TLparenth node)
    {
        if(this._lparenth_ != null)
        {
            this._lparenth_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparenth_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TRparenth getRparenth()
    {
        return this._rparenth_;
    }

    public void setRparenth(TRparenth node)
    {
        if(this._rparenth_ != null)
        {
            this._rparenth_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparenth_ = node;
    }

    public TKeywordThen getKeywordThen()
    {
        return this._keywordThen_;
    }

    public void setKeywordThen(TKeywordThen node)
    {
        if(this._keywordThen_ != null)
        {
            this._keywordThen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordThen_ = node;
    }

    public PExprsingle getExprsingle1()
    {
        return this._exprsingle1_;
    }

    public void setExprsingle1(PExprsingle node)
    {
        if(this._exprsingle1_ != null)
        {
            this._exprsingle1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprsingle1_ = node;
    }

    public TKeywordElse getKeywordElse()
    {
        return this._keywordElse_;
    }

    public void setKeywordElse(TKeywordElse node)
    {
        if(this._keywordElse_ != null)
        {
            this._keywordElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keywordElse_ = node;
    }

    public PExprsingle getExprsingle2()
    {
        return this._exprsingle2_;
    }

    public void setExprsingle2(PExprsingle node)
    {
        if(this._exprsingle2_ != null)
        {
            this._exprsingle2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprsingle2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._keywordIf_)
            + toString(this._lparenth_)
            + toString(this._expr_)
            + toString(this._rparenth_)
            + toString(this._keywordThen_)
            + toString(this._exprsingle1_)
            + toString(this._keywordElse_)
            + toString(this._exprsingle2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._keywordIf_ == child)
        {
            this._keywordIf_ = null;
            return;
        }

        if(this._lparenth_ == child)
        {
            this._lparenth_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._rparenth_ == child)
        {
            this._rparenth_ = null;
            return;
        }

        if(this._keywordThen_ == child)
        {
            this._keywordThen_ = null;
            return;
        }

        if(this._exprsingle1_ == child)
        {
            this._exprsingle1_ = null;
            return;
        }

        if(this._keywordElse_ == child)
        {
            this._keywordElse_ = null;
            return;
        }

        if(this._exprsingle2_ == child)
        {
            this._exprsingle2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._keywordIf_ == oldChild)
        {
            setKeywordIf((TKeywordIf) newChild);
            return;
        }

        if(this._lparenth_ == oldChild)
        {
            setLparenth((TLparenth) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._rparenth_ == oldChild)
        {
            setRparenth((TRparenth) newChild);
            return;
        }

        if(this._keywordThen_ == oldChild)
        {
            setKeywordThen((TKeywordThen) newChild);
            return;
        }

        if(this._exprsingle1_ == oldChild)
        {
            setExprsingle1((PExprsingle) newChild);
            return;
        }

        if(this._keywordElse_ == oldChild)
        {
            setKeywordElse((TKeywordElse) newChild);
            return;
        }

        if(this._exprsingle2_ == oldChild)
        {
            setExprsingle2((PExprsingle) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
