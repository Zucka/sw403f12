/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.cc.xpath.node;

import com.interrupt.cc.xpath.analysis.*;

@SuppressWarnings("nls")
public final class AFilterStepexpr extends PStepexpr
{
    private PFilterexpr _filterexpr_;

    public AFilterStepexpr()
    {
        // Constructor
    }

    public AFilterStepexpr(
        @SuppressWarnings("hiding") PFilterexpr _filterexpr_)
    {
        // Constructor
        setFilterexpr(_filterexpr_);

    }

    @Override
    public Object clone()
    {
        return new AFilterStepexpr(
            cloneNode(this._filterexpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFilterStepexpr(this);
    }

    public PFilterexpr getFilterexpr()
    {
        return this._filterexpr_;
    }

    public void setFilterexpr(PFilterexpr node)
    {
        if(this._filterexpr_ != null)
        {
            this._filterexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._filterexpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._filterexpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._filterexpr_ == child)
        {
            this._filterexpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._filterexpr_ == oldChild)
        {
            setFilterexpr((PFilterexpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
