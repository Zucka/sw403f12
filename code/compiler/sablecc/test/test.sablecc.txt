Package sablecc.test.output;


Helpers
          a = ‘a’ | ‘A’ ;
          b = ‘b’ | ‘B’ ;
          e = ‘e’ | ‘E’ ;
          g = ‘g’ | ‘G’ ;
          i = ‘i’ | ‘I’ ;
          m = ‘m’ | ‘M’;
          n = ‘n’ | ‘N’ ;
          o = ‘o’ | ‘O’ ;
          p = ‘p’ | ‘P’ ;
          r = ‘r’ | ‘R’ ;
          t = ‘t’ | ‘T’;
          v = ‘v’ | ‘V’ ;
          w = ‘w’ | ‘W’;
          cr = 13 ; ⁄⁄ carriage return
          lf = 10 ; ⁄⁄ line feed
          tab = 9 ; ⁄⁄ tab char
          ascii_char = [32 .. 127] ;
          blank = ‘’ ;
          digit = [‘0’ .. ‘9’] ;
          letter = [[‘a’ .. ‘z’] + [‘A’ .. ‘Z’]] ;
          l_brace = ‘{’ ;
          r_brace = ‘}’ ;
          l_paren_star = ‘(*’ ;
          r_paren_star = ‘*)’ ;

Productions
          program =
                    program_heading
                    global_declaration_part
                    begin
                    main_statement_part
                    end dot;
          program_heading =
                    {non_empty} program identifier semicolon |
                    {empty} ;
          global_declaration_part =
                    var_declaration;
          var_declaration =
                    var var_decl+;
          var_decl =
                    identifier_list colon type;
          identifier_list =
                    {single} identifier |
                    {sequence} identifier_list comma identifier;
          type =
                    integer;
          main_statement_part =
                    statement_sequence;
          statement_sequence =
                    {single} statement |
                    {sequence} statement_sequence semicolon statement ;
          statement =
                    {assign} identifier assignop expression |
                    {writeln} writeln_stmt ;
          writeln_stmt =
                    {simple}writeln |
                    {arguments} writeln l_paren expression_list r_paren ;
          expression_list =
                    {single} expression |
                    {sequence} expression_list comma expression ;
          expression =
                    {term} term |
                    {plus} expression plus term |
                    {minus} expression minus term ;
          term =
                    {factor} factor |
                    {mult} term mult factor |
                    {div} term div factor;
          factor =
                    {identifier} identifier |
                    {integer} integer;


