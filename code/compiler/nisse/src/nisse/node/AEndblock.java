/* This file was generated by SableCC (http://www.sablecc.org/). */

package nisse.node;

import java.util.*;
import nisse.analysis.*;

@SuppressWarnings("nls")
public final class AEndblock extends PEndblock
{
    private TEndkwd _endkwd_;
    private final LinkedList<TSpace> _space_ = new LinkedList<TSpace>();
    private PBeblock _beblock_;
    private final LinkedList<TSpace> _second_ = new LinkedList<TSpace>();
    private TEol _eol_;

    public AEndblock()
    {
        // Constructor
    }

    public AEndblock(
        @SuppressWarnings("hiding") TEndkwd _endkwd_,
        @SuppressWarnings("hiding") List<TSpace> _space_,
        @SuppressWarnings("hiding") PBeblock _beblock_,
        @SuppressWarnings("hiding") List<TSpace> _second_,
        @SuppressWarnings("hiding") TEol _eol_)
    {
        // Constructor
        setEndkwd(_endkwd_);

        setSpace(_space_);

        setBeblock(_beblock_);

        setSecond(_second_);

        setEol(_eol_);

    }

    @Override
    public Object clone()
    {
        return new AEndblock(
            cloneNode(this._endkwd_),
            cloneList(this._space_),
            cloneNode(this._beblock_),
            cloneList(this._second_),
            cloneNode(this._eol_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEndblock(this);
    }

    public TEndkwd getEndkwd()
    {
        return this._endkwd_;
    }

    public void setEndkwd(TEndkwd node)
    {
        if(this._endkwd_ != null)
        {
            this._endkwd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endkwd_ = node;
    }

    public LinkedList<TSpace> getSpace()
    {
        return this._space_;
    }

    public void setSpace(List<TSpace> list)
    {
        this._space_.clear();
        this._space_.addAll(list);
        for(TSpace e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PBeblock getBeblock()
    {
        return this._beblock_;
    }

    public void setBeblock(PBeblock node)
    {
        if(this._beblock_ != null)
        {
            this._beblock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._beblock_ = node;
    }

    public LinkedList<TSpace> getSecond()
    {
        return this._second_;
    }

    public void setSecond(List<TSpace> list)
    {
        this._second_.clear();
        this._second_.addAll(list);
        for(TSpace e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TEol getEol()
    {
        return this._eol_;
    }

    public void setEol(TEol node)
    {
        if(this._eol_ != null)
        {
            this._eol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._endkwd_)
            + toString(this._space_)
            + toString(this._beblock_)
            + toString(this._second_)
            + toString(this._eol_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._endkwd_ == child)
        {
            this._endkwd_ = null;
            return;
        }

        if(this._space_.remove(child))
        {
            return;
        }

        if(this._beblock_ == child)
        {
            this._beblock_ = null;
            return;
        }

        if(this._second_.remove(child))
        {
            return;
        }

        if(this._eol_ == child)
        {
            this._eol_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._endkwd_ == oldChild)
        {
            setEndkwd((TEndkwd) newChild);
            return;
        }

        for(ListIterator<TSpace> i = this._space_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSpace) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._beblock_ == oldChild)
        {
            setBeblock((PBeblock) newChild);
            return;
        }

        for(ListIterator<TSpace> i = this._second_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSpace) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._eol_ == oldChild)
        {
            setEol((TEol) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
