/* This file was generated by SableCC (http://www.sablecc.org/). */

package nisse.node;

import nisse.analysis.*;

@SuppressWarnings("nls")
public final class APlaintextItemlistv1 extends PItemlistv1
{
    private PPlains _plains_;
    private TEol _eol_;

    public APlaintextItemlistv1()
    {
        // Constructor
    }

    public APlaintextItemlistv1(
        @SuppressWarnings("hiding") PPlains _plains_,
        @SuppressWarnings("hiding") TEol _eol_)
    {
        // Constructor
        setPlains(_plains_);

        setEol(_eol_);

    }

    @Override
    public Object clone()
    {
        return new APlaintextItemlistv1(
            cloneNode(this._plains_),
            cloneNode(this._eol_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPlaintextItemlistv1(this);
    }

    public PPlains getPlains()
    {
        return this._plains_;
    }

    public void setPlains(PPlains node)
    {
        if(this._plains_ != null)
        {
            this._plains_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plains_ = node;
    }

    public TEol getEol()
    {
        return this._eol_;
    }

    public void setEol(TEol node)
    {
        if(this._eol_ != null)
        {
            this._eol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._plains_)
            + toString(this._eol_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._plains_ == child)
        {
            this._plains_ = null;
            return;
        }

        if(this._eol_ == child)
        {
            this._eol_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._plains_ == oldChild)
        {
            setPlains((PPlains) newChild);
            return;
        }

        if(this._eol_ == oldChild)
        {
            setEol((TEol) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
