/* This file was generated by SableCC (http://www.sablecc.org/). */

package nisse.node;

import nisse.analysis.*;

@SuppressWarnings("nls")
public final class AItemlist extends PItemlist
{
    private TBlist _blist_;
    private PItemlistv1 _itemlistv1_;

    public AItemlist()
    {
        // Constructor
    }

    public AItemlist(
        @SuppressWarnings("hiding") TBlist _blist_,
        @SuppressWarnings("hiding") PItemlistv1 _itemlistv1_)
    {
        // Constructor
        setBlist(_blist_);

        setItemlistv1(_itemlistv1_);

    }

    @Override
    public Object clone()
    {
        return new AItemlist(
            cloneNode(this._blist_),
            cloneNode(this._itemlistv1_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAItemlist(this);
    }

    public TBlist getBlist()
    {
        return this._blist_;
    }

    public void setBlist(TBlist node)
    {
        if(this._blist_ != null)
        {
            this._blist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._blist_ = node;
    }

    public PItemlistv1 getItemlistv1()
    {
        return this._itemlistv1_;
    }

    public void setItemlistv1(PItemlistv1 node)
    {
        if(this._itemlistv1_ != null)
        {
            this._itemlistv1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._itemlistv1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._blist_)
            + toString(this._itemlistv1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._blist_ == child)
        {
            this._blist_ = null;
            return;
        }

        if(this._itemlistv1_ == child)
        {
            this._itemlistv1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._blist_ == oldChild)
        {
            setBlist((TBlist) newChild);
            return;
        }

        if(this._itemlistv1_ == oldChild)
        {
            setItemlistv1((PItemlistv1) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
