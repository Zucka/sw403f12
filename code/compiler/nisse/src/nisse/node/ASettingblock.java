/* This file was generated by SableCC (http://www.sablecc.org/). */

package nisse.node;

import java.util.*;
import nisse.analysis.*;

@SuppressWarnings("nls")
public final class ASettingblock extends PSettingblock
{
    private TSettingkwd _settingkwd_;
    private TLcurly _lcurly_;
    private PShortident _shortident_;
    private TPipe _pipe_;
    private final LinkedList<TSpace> _second_ = new LinkedList<TSpace>();
    private TChar _char_;
    private final LinkedList<TSpace> _third_ = new LinkedList<TSpace>();
    private TRcurly _rcurly_;
    private final LinkedList<TSpace> _space_ = new LinkedList<TSpace>();
    private TEol _eol_;

    public ASettingblock()
    {
        // Constructor
    }

    public ASettingblock(
        @SuppressWarnings("hiding") TSettingkwd _settingkwd_,
        @SuppressWarnings("hiding") TLcurly _lcurly_,
        @SuppressWarnings("hiding") PShortident _shortident_,
        @SuppressWarnings("hiding") TPipe _pipe_,
        @SuppressWarnings("hiding") List<TSpace> _second_,
        @SuppressWarnings("hiding") TChar _char_,
        @SuppressWarnings("hiding") List<TSpace> _third_,
        @SuppressWarnings("hiding") TRcurly _rcurly_,
        @SuppressWarnings("hiding") List<TSpace> _space_,
        @SuppressWarnings("hiding") TEol _eol_)
    {
        // Constructor
        setSettingkwd(_settingkwd_);

        setLcurly(_lcurly_);

        setShortident(_shortident_);

        setPipe(_pipe_);

        setSecond(_second_);

        setChar(_char_);

        setThird(_third_);

        setRcurly(_rcurly_);

        setSpace(_space_);

        setEol(_eol_);

    }

    @Override
    public Object clone()
    {
        return new ASettingblock(
            cloneNode(this._settingkwd_),
            cloneNode(this._lcurly_),
            cloneNode(this._shortident_),
            cloneNode(this._pipe_),
            cloneList(this._second_),
            cloneNode(this._char_),
            cloneList(this._third_),
            cloneNode(this._rcurly_),
            cloneList(this._space_),
            cloneNode(this._eol_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASettingblock(this);
    }

    public TSettingkwd getSettingkwd()
    {
        return this._settingkwd_;
    }

    public void setSettingkwd(TSettingkwd node)
    {
        if(this._settingkwd_ != null)
        {
            this._settingkwd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._settingkwd_ = node;
    }

    public TLcurly getLcurly()
    {
        return this._lcurly_;
    }

    public void setLcurly(TLcurly node)
    {
        if(this._lcurly_ != null)
        {
            this._lcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lcurly_ = node;
    }

    public PShortident getShortident()
    {
        return this._shortident_;
    }

    public void setShortident(PShortident node)
    {
        if(this._shortident_ != null)
        {
            this._shortident_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shortident_ = node;
    }

    public TPipe getPipe()
    {
        return this._pipe_;
    }

    public void setPipe(TPipe node)
    {
        if(this._pipe_ != null)
        {
            this._pipe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pipe_ = node;
    }

    public LinkedList<TSpace> getSecond()
    {
        return this._second_;
    }

    public void setSecond(List<TSpace> list)
    {
        this._second_.clear();
        this._second_.addAll(list);
        for(TSpace e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TChar getChar()
    {
        return this._char_;
    }

    public void setChar(TChar node)
    {
        if(this._char_ != null)
        {
            this._char_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._char_ = node;
    }

    public LinkedList<TSpace> getThird()
    {
        return this._third_;
    }

    public void setThird(List<TSpace> list)
    {
        this._third_.clear();
        this._third_.addAll(list);
        for(TSpace e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRcurly getRcurly()
    {
        return this._rcurly_;
    }

    public void setRcurly(TRcurly node)
    {
        if(this._rcurly_ != null)
        {
            this._rcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rcurly_ = node;
    }

    public LinkedList<TSpace> getSpace()
    {
        return this._space_;
    }

    public void setSpace(List<TSpace> list)
    {
        this._space_.clear();
        this._space_.addAll(list);
        for(TSpace e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TEol getEol()
    {
        return this._eol_;
    }

    public void setEol(TEol node)
    {
        if(this._eol_ != null)
        {
            this._eol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._settingkwd_)
            + toString(this._lcurly_)
            + toString(this._shortident_)
            + toString(this._pipe_)
            + toString(this._second_)
            + toString(this._char_)
            + toString(this._third_)
            + toString(this._rcurly_)
            + toString(this._space_)
            + toString(this._eol_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._settingkwd_ == child)
        {
            this._settingkwd_ = null;
            return;
        }

        if(this._lcurly_ == child)
        {
            this._lcurly_ = null;
            return;
        }

        if(this._shortident_ == child)
        {
            this._shortident_ = null;
            return;
        }

        if(this._pipe_ == child)
        {
            this._pipe_ = null;
            return;
        }

        if(this._second_.remove(child))
        {
            return;
        }

        if(this._char_ == child)
        {
            this._char_ = null;
            return;
        }

        if(this._third_.remove(child))
        {
            return;
        }

        if(this._rcurly_ == child)
        {
            this._rcurly_ = null;
            return;
        }

        if(this._space_.remove(child))
        {
            return;
        }

        if(this._eol_ == child)
        {
            this._eol_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._settingkwd_ == oldChild)
        {
            setSettingkwd((TSettingkwd) newChild);
            return;
        }

        if(this._lcurly_ == oldChild)
        {
            setLcurly((TLcurly) newChild);
            return;
        }

        if(this._shortident_ == oldChild)
        {
            setShortident((PShortident) newChild);
            return;
        }

        if(this._pipe_ == oldChild)
        {
            setPipe((TPipe) newChild);
            return;
        }

        for(ListIterator<TSpace> i = this._second_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSpace) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._char_ == oldChild)
        {
            setChar((TChar) newChild);
            return;
        }

        for(ListIterator<TSpace> i = this._third_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSpace) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rcurly_ == oldChild)
        {
            setRcurly((TRcurly) newChild);
            return;
        }

        for(ListIterator<TSpace> i = this._space_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSpace) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._eol_ == oldChild)
        {
            setEol((TEol) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
