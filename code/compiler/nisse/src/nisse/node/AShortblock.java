/* This file was generated by SableCC (http://www.sablecc.org/). */

package nisse.node;

import java.util.*;
import nisse.analysis.*;

@SuppressWarnings("nls")
public final class AShortblock extends PShortblock
{
    private TFormatKwd _formatKwd_;
    private final LinkedList<TSpace> _space_ = new LinkedList<TSpace>();
    private TLcurly _lcurly_;
    private PShortidents _shortidents_;
    private PPlains _plains_;
    private TRcurly _rcurly_;

    public AShortblock()
    {
        // Constructor
    }

    public AShortblock(
        @SuppressWarnings("hiding") TFormatKwd _formatKwd_,
        @SuppressWarnings("hiding") List<TSpace> _space_,
        @SuppressWarnings("hiding") TLcurly _lcurly_,
        @SuppressWarnings("hiding") PShortidents _shortidents_,
        @SuppressWarnings("hiding") PPlains _plains_,
        @SuppressWarnings("hiding") TRcurly _rcurly_)
    {
        // Constructor
        setFormatKwd(_formatKwd_);

        setSpace(_space_);

        setLcurly(_lcurly_);

        setShortidents(_shortidents_);

        setPlains(_plains_);

        setRcurly(_rcurly_);

    }

    @Override
    public Object clone()
    {
        return new AShortblock(
            cloneNode(this._formatKwd_),
            cloneList(this._space_),
            cloneNode(this._lcurly_),
            cloneNode(this._shortidents_),
            cloneNode(this._plains_),
            cloneNode(this._rcurly_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAShortblock(this);
    }

    public TFormatKwd getFormatKwd()
    {
        return this._formatKwd_;
    }

    public void setFormatKwd(TFormatKwd node)
    {
        if(this._formatKwd_ != null)
        {
            this._formatKwd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formatKwd_ = node;
    }

    public LinkedList<TSpace> getSpace()
    {
        return this._space_;
    }

    public void setSpace(List<TSpace> list)
    {
        this._space_.clear();
        this._space_.addAll(list);
        for(TSpace e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TLcurly getLcurly()
    {
        return this._lcurly_;
    }

    public void setLcurly(TLcurly node)
    {
        if(this._lcurly_ != null)
        {
            this._lcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lcurly_ = node;
    }

    public PShortidents getShortidents()
    {
        return this._shortidents_;
    }

    public void setShortidents(PShortidents node)
    {
        if(this._shortidents_ != null)
        {
            this._shortidents_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._shortidents_ = node;
    }

    public PPlains getPlains()
    {
        return this._plains_;
    }

    public void setPlains(PPlains node)
    {
        if(this._plains_ != null)
        {
            this._plains_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plains_ = node;
    }

    public TRcurly getRcurly()
    {
        return this._rcurly_;
    }

    public void setRcurly(TRcurly node)
    {
        if(this._rcurly_ != null)
        {
            this._rcurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rcurly_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._formatKwd_)
            + toString(this._space_)
            + toString(this._lcurly_)
            + toString(this._shortidents_)
            + toString(this._plains_)
            + toString(this._rcurly_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._formatKwd_ == child)
        {
            this._formatKwd_ = null;
            return;
        }

        if(this._space_.remove(child))
        {
            return;
        }

        if(this._lcurly_ == child)
        {
            this._lcurly_ = null;
            return;
        }

        if(this._shortidents_ == child)
        {
            this._shortidents_ = null;
            return;
        }

        if(this._plains_ == child)
        {
            this._plains_ = null;
            return;
        }

        if(this._rcurly_ == child)
        {
            this._rcurly_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._formatKwd_ == oldChild)
        {
            setFormatKwd((TFormatKwd) newChild);
            return;
        }

        for(ListIterator<TSpace> i = this._space_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TSpace) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._lcurly_ == oldChild)
        {
            setLcurly((TLcurly) newChild);
            return;
        }

        if(this._shortidents_ == oldChild)
        {
            setShortidents((PShortidents) newChild);
            return;
        }

        if(this._plains_ == oldChild)
        {
            setPlains((PPlains) newChild);
            return;
        }

        if(this._rcurly_ == oldChild)
        {
            setRcurly((TRcurly) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
